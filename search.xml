<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>百度还有翻盘的机会吗</title>
      <link href="/2021/08/26/bai-du-huan-you-fan-pan-de-ji-hui-ma/"/>
      <url>/2021/08/26/bai-du-huan-you-fan-pan-de-ji-hui-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="前面写点个人感想"><a href="#前面写点个人感想" class="headerlink" title="前面写点个人感想"></a>前面写点个人感想</h2><p>我对于BAT的态度，可能目前百度不配了。但是这并不妨碍我最喜欢百度。我认为百度一直是一家技术公司。当然现在百度没落了，不过我认为，也希望百度可以靠人工智能，靠AI翻盘。个人看来，百度可能是为数不多的未来可以做到和Google、Amazon一样的全球性质的高科技互联网公司，我认为全球高科技互联网公司，中国目前只有百度可以做到。当然现在百度有着太多太多的问题。产品体验过差确实是硬伤。不过目前最困难的时刻已经过去了，希望百度能够挺住熬过目前的困难，百度加油！</p><p>知乎上、各个论坛上都在骂百度的垃圾产品百家号，垃圾的广告，黑暗的竞价排名，百度客服的混乱与不负责任，已经看不到的企业文化（虽然我觉得现在阿里的也不咋地）……到处都是在吐槽诟病百度的目前种种缺点，好像现在百度就像是一个生病的巨人。靠着仅存的搜索引擎优势在苟活……</p><p>的确，以上都是很致命、很招人厌的缺点。我也认为如果这么继续下去百度可能真的要完了……</p><p>但是我还是很崇敬百度的许多举措……</p><p>他是国内为数不多的在<strong>认真</strong>做自己的深度学习框架paddlepaddle的企业，也是在企业已经如此境地的情况下坚持布局AI，8年无产出的投入近千亿研究AI的企业<del>（就这一点我觉得我对这个企业就绝对讨厌不起来）</del>, 仍然是自动驾驶这个领域甚至是全球领先的企业。可以说这是为数不多的国内高科技、搞技术的高新企业。像这么一个规模的企业，几乎都是在做产品，甚至阿里达摩院在承接外包，自负盈亏……</p><p>个人真心希望百度可以改善自己产品，优化形象，成功转型，成功赶上甚至引领AI的风口。逆势而为，未来是星辰大海！</p><blockquote><p>以下是转载内容，如有侵权，请联系博主<a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a>：</p><p> 本文来自微信公众号<a href="https://mp.weixin.qq.com/s/FweA28zX0sjHsGY4cf-wDA" target="_blank" rel="noopener">“智慧云董事会”（ID:izhihuiyun）</a>，作者：陈雪频</p><p>看了许多百度的分析，大多数都是吐槽和不看好，真正细致分析的、客观的几乎没有。直到我看到这篇文章，感觉写得非常精彩！也让我对百度的规划与政策有了更好的了解与理解，转载匆忙，如果这篇文章有侵权，请立刻联系本人<a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a>，侵删</p></blockquote><blockquote><p> 百度一度是中国市值最高的互联网公司，但在最近几年增长缓慢，不仅被阿里巴巴和腾讯超越，甚至市值落后于后来者美团和拼多多。本文通过对百度在战略和业务布局的分析，发现百度虽然在移动互联网时代一度落后，但在人工智能领域还有机会翻盘，上演一出类似于微软转型的好戏，但前提是百度必须在组织和文化方面持续优化，打造一个更加开放的生态型组织。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_21c213531bfa495bbe7effb905caad60_img_000" alt="李彦宏"></p><p>过去两年，<a href="https://36kr.com/projectDetails/28215" target="_blank" rel="noopener">百度</a>在资本市场的表现平平。2018年5月31日，百度的股价达到历史的最高点284美元，市值也达到历史最高点980亿美元。这之后，百度的股价就一直处在下跌通道中，一直跌到2020年3月31日的82美元才开始反弹。此时百度的市值为283亿美元，和20个月前相比跌幅超过70%，和10年前百度的市值相当。这之后百度的股价开始反弹，并在2020年6月22日反弹到123美元，和两个多月前相比上涨了近50%。</p><p>再把时间线拉长，百度在过去十年的股价也是起起伏伏。2011年，百度曾经一度是中国市值最高的互联网公司，和<a href="https://36kr.com/projectDetails/7133" target="_blank" rel="noopener">阿里巴巴</a>和腾讯并称BAT。当时的腾讯刚刚经历过3Q大战的洗礼，公司内部士气低迷，阿里巴巴只有B2B业务上市，股价也是一度低迷。当时投资人更看好在搜索领域一枝独秀的百度，而不是还在不断探索业务边界的阿里巴巴和腾讯。大家都认为百度是中国技术势力最雄厚的互联网公司，未来的想象空间更大。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_a3bd449a305d4ac8bd4c5722f936e4ce_img_000" alt="百度过去10年的股价变迁图"></p><p>十年过去了，腾讯的股价上升了20多倍，阿里巴巴在经历了B2B业务退市和集团上市，两家公司的市值都突破了5000亿美元，但百度的市值依然起起伏伏。十年前，美团、<a href="https://36kr.com/projectDetails/99343" target="_blank" rel="noopener">字节跳动</a>、滴滴和<a href="https://36kr.com/projectDetails/81304" target="_blank" rel="noopener">拼多多</a>还没有创立，但如今美团和拼多多的市值都超过了千亿美元，字节跳动和滴滴在一级市场的估值也都高于百度。虽然每家公司的商业模式都不一样，仅仅用市值来判断一家公司的价值未必正确，但至少能反应投资人对这家公司的信心。</p><p>“市场短期是投票器，长期是称重器。”这是价值投资教父本杰明.格雷厄姆的名言，也被他的学生沃伦.巴菲特奉为圭臬，意思是一家公司的股价波动短期来看是股民以持有市值投票的结果，长期来看这家公司的股价则能反映这个公司的真实价值。如果用价值投资的理念去判断一家企业，我就不能仅仅通过这家公司财报去衡量一家公司的未来，更要通过这家公司的战略、产品、组织、人才和文化等视角去判断这家公司的前景，从而评估它的价值。</p><p>这篇文章从价值投资的视角，分析百度在资本市场表现不佳的原因，并根据它在战略和业务上的布局，预测它未来可能的市场表现。这篇文章也希望能回答这样一个问题：一家曾经的行业霸主在遭遇增长失速之后，它还能恢复到以前的活力吗？</p><h2 id="01、百度市值下滑背后的原因何在？"><a href="#01、百度市值下滑背后的原因何在？" class="headerlink" title="01、百度市值下滑背后的原因何在？"></a>01、百度市值下滑背后的原因何在？</h2><p>关于百度市值下滑分析的文章不少，大都基于定量和定性的分析。不管是那种分析方法，都要从百度的财报看起，让我们先来分析百度过去三年多的财务报表。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_6659b27cca2a49a2b00183a825376b97_img_000" alt="财务报表"></p><p>百度2017—2020年的财务报表分析</p><p>从百度的财务报表可以看到，百度的主要收入为在线广告，尤其是搜索引擎和视频广告。从数据来看，百度在线广告的收入这3年没有大幅增长。2020年春节后，由于新冠病毒疫情的缘故，广告投放量大幅下滑，也导致百度在2020年第一季度的收入出现了两位数的下滑。再加上3月份美国遭遇了百年不遇的股灾，所有股票都大幅跳水，两个原因叠加在一起，这也是百度在今年股价大幅下滑的主要原因。</p><p>从细分行业的增长性来看，百度核心收入的增长缓慢和互联网的流量变迁有很大关系。在PC互联网时代，百度掌控了互联网信息的入口，“有事情、百度一下”，成为一代人的行为习惯。但随着移动互联网尤其是社交媒体的兴起，搜索引擎的信息掌控优势被削弱，信息获取的方式变得更加多元化，微信、<a href="https://36kr.com/projectDetails/38685" target="_blank" rel="noopener">微博</a>、视频、头条、抖音都在分散百度的流量，伴随着流量的分散，搜索带来的在线广告收入下滑不可避免。</p><p>根据中关村互动营销实验室发布的《2019年互联网广告发展报告》，2019年中国互联网广告总收入约4367亿人民币，相较于上一年增长率为18.2%。其中来自电商平台的广告占总量的35.9%，稳居第一，比2018年增长3%；搜索类平台广告以14.9%的份额仍居第二位，但比2018年的21%下滑了近三分之一；视频类平台收入同比增长43%，取代新闻资讯类平台，成为第三大互联网广告投放平台。百度的主要收入来源是搜索引擎和视频类平台带来的收入，尤其是搜索带来的广告收入，因此收入受行业影响下滑就难免了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_40ff7904ebb94ac4951e3f3ab7c0419a_img_000" alt="2019年在线广告收入的媒体平台类型排名"></p><p>再来分析一下中国互联网广告的前十名排名。中国在线广告收入最多的公司是阿里巴巴，这主要是因为阿里巴巴是电子商务平台的领导者，而这个细分赛道又在所有在线广告媒体渠道中占据了35.9%的收入，因此收入超过千亿人民币。由于字节跳动在短视频（抖音）和新闻资讯类媒体（今日头条）的表现突出，导致其收入已经超过百度，成为中国在线广告收入排名第二的公司。由此可见，百度增长失速的最重要的原因还是所在细分行业增幅下滑导致的。</p><p>决定一家公司市值的原因很多，有关这方面的财务模型也不少。如果高度简化的话，市值是投资人对公司未来价值的判断，这种判断一般基于两点：一是公司现在的财务表现，核心数据包括公司的销售额和利润，这是一个定量和相对静态的概念；第二是公司未来的增长潜力，包括这家公司过去一段时间的增长趋势，以及这家公司在增长潜力方面的综合判断，这是一个定性和相对动态的判断。</p><p>用这个市值模型可以看出，百度市值下滑的主要原因有三个：第一是核心业务收入下滑，导致公司的财务表现不佳，影响了投资者的信心。第二是百度虽然过去三年多的研发投入都在稳步增加，而且在AI方面获得技术突破，在AI领域的收入也在上涨，但投资者都这个领域的未来还持观望状态。第三是外部环境遭遇到了百年一遇的疫情和股灾影响，导致所有企业都遭遇了股价下跌，百度当然也不例外。</p><p>现在看来，百度最糟糕的时间应该已经过去了。</p><p>首先，百度搜索有两个显性变化，一是端内搜索不断增长，已经占到整体移动搜索50%以上；二是AI搜索带来近60%的登录用户，越来越多的广告主使用百家号、托管页和小程序营销运营。百度<a href="https://36kr.com/projectDetails/107450" target="_blank" rel="noopener">搜索广告</a>历史上曾经有高达50%的运营利润率，如今利润率保持40%以上，预期核心收入同比趋势变好。</p><p>其次，由于疫情放缓和经济复苏，导致百度在核心业务方面的广告收入也在快速复苏。再加上随着国家在新基建领域的十万亿级投资，百度在AI领域的收入一定会迎来爆发。</p><p>再次，美国最近实现量化宽松的货币政策，过去一段时间在美上市公司的股价都强力反弹，因此百度在未来一段时间的股价应该会持续走高。这也是百度在过去两个多月股价上涨50%的几个原因。</p><p>当然，我们也不能仅仅因根据一家公司的财报来判断这家公司的价值，更不能判断这家公司在未来的市值走向。想要对百度未来的发展有一个清晰的判断，还需要从百度的战略、产品、服务、组织、人才、运营、管理等层面去分析它，从而对百度的未来有一个更加完整的认识。</p><h2 id="02、百度在移动业务上还能获得增长吗？"><a href="#02、百度在移动业务上还能获得增长吗？" class="headerlink" title="02、百度在移动业务上还能获得增长吗？"></a>02、百度在移动业务上还能获得增长吗？</h2><p>首先我们来分析百度的战略布局。百度的战略是：“夯实移动基础、决胜AI时代”。其中，目前百度的主要收入来源就是移动业务（相当于现金流业务），包括PC搜索和移动搜索等，以及围绕着流量的视频、社群、知识和工具类服务。AI（人工智能）则是百度正在大力探索的业务（相当于未来的明星业务），这一块主要还在投入期，可以理解为百度的“第二曲线”业务。百度的战略核心就是在移动板块保持领先，确保现金流的稳定，同时在AI方面快速布局，获得更大的想象空间。</p><p>百度CEO李彦宏对“夯实移动基础”的理解是，百度要构建一个空前繁荣强大的移动生态。这个强大的移动生态不是简单的简单的“搜索+feed”，它们是百度的双引擎，但不是百度移动生态的全部。移动生态是指整个生态的相互依存关系是顺的，它能够孵化出强大的产品、好用的功能、好的用户体验。</p><p>分析百度在移动版图的布局，可以看出百度的主要做法是围绕着百度APP来展开的，通过百度APP的超级流量带动了知识、视频、社群和工具类产品。然后在一些垂直领域的内容和商业应用方面都有布局，其中大多数是百度自营的内容平台，还有一些是通过投资实现细分内容的连接，比如<a href="https://36kr.com/projectDetails/26201" target="_blank" rel="noopener">知乎</a>，果壳、<a href="https://36kr.com/projectDetails/50809" target="_blank" rel="noopener">凯叔讲故事</a>、<a href="https://36kr.com/projectDetails/30367" target="_blank" rel="noopener">网易</a>云音乐、<a href="https://36kr.com/projectDetails/113287" target="_blank" rel="noopener">梨视频</a>、<a href="https://dianping.36kr.com/space/4879001014" target="_blank" rel="noopener">有赞</a>等。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_68b486f043d341ae85018ad61447299a_img_000" alt="百度移动版图"></p><p>百度对优质内容非常重视，一个重要的原因是百度一直希望打造信息入口，这也决定了他们需要更加优质的内容。在PC互联网时代，百度就先后推出了贴吧、知道、百科等内容产品，至今这些产品仍是百度移动生态的重要组成部分。到了移动互联网时代，“信息孤岛”让百度可以获取的优质内容减少，于是百度先是发力百家号，为移动端提供优质内容，后又在2018年推出智能小程序，构建新的内容生态环境。</p><p>到目前为止，百度在包括知道、百科、文库等知识内容方面积累了超10亿的高质量内容。百度百科是全球最大的中文百科全书，拥有1600万个词条；百度知道是全球最大的互动问答平台，累积问答数达到5.5亿；百度文库是中国最大的文档分享平台，在线文档数超6亿。另外，百家号拥有240万内容生产者，生产内容包括文章、图片、短视频等；百度智能小程序月活跃用户达3亿，入驻小程序数量达到30万。</p><p>由此，百度构建了中国最大的以信息和知识为核心的移动生态。通过对百度在移动版图的布局可以看出，百度一方面通过双引擎——搜索和信息流的方式分发内容，并形成每天百亿级的流量分发，一方面通过百家号和智能小程序形成一个内容生态。与此同时，百度还通过战略投资的方式拓宽内容维度，满足更多用户多样化的内容需求，提高用户满意度，增加用户黏性，夯实以信息和知识为核心的移动生态。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_0fe877ed19e5421db2c72ac41b9b08b8_img_000" alt="百度在2018—2019年在移动赛道上的投资版图"></p><p>比如说，在百度投资的项目中，知乎拥有2.2亿用户，1.3亿回答数量，是国内头部知识问答社区。这些内容以智能小程序的形式接入百度App后，不仅拓宽了百度App内容生态维度，也为用户提供更广泛的知识内容，提升了用户体验。同样，果壳、凯叔讲故事、七猫小说、网易云音乐的接入，不仅满足用户对于图文、资讯、音频、视频、阅读等多种娱乐内容诉求，增强用户对于产品的黏性，提升用户使用时长。</p><p>百度想要在移动版图上保持增长，除了保持在搜索业务的稳定之外，还需要拓展自己在视频和新闻资讯领域的增长速度，这也是百度在内容生态方面发力的主要驱动力。从战略层面来看，百度已经看到了这个趋势，因此积极在内容端去发力，以获得未来的可持续增长。</p><p>随着百度搜索从网页端搜索向APP端和智能终端搜索转化，导致百度APP已经占到了百度收入的一半以上，而且越来越多的广告通过百家号和小程序来实现。2019年，百度的核心广告业务总收入约为 781 亿，净利润达到228亿，利润率接近30%。假设百度的核心广告业务收入长期保持10%的增长率，市盈率不低于12倍（这两个数字都比较保守），百度在移动业务的估值就应该不低于450亿美元，高于目前整个百度的市值。</p><p>综上所述，只要百度守住了移动业务的基本盘，保持稳健的现金流，就有翻盘的机会。</p><h2 id="03、AI商业化是否可期？"><a href="#03、AI商业化是否可期？" class="headerlink" title="03、AI商业化是否可期？"></a>03、AI商业化是否可期？</h2><p>如果说移动业务是百度的现金流业务，是百度的立身之本，但在这个领域由于竞争已经比较充分，这个领域发展得再好也只能是保持优势。百度要想恢复BAT时代的荣耀，市值在现有基础上增长10倍以上，和腾讯和阿里巴巴比肩，就需要在这个领域能有突破性的发展。</p><p>为什么这么说呢？主要原因有两个：第一是大势所趋，在未来数字经济将会迎来一波爆发性的增长，这里面存在十万亿级的市场，其中AI则是数字经济的核心驱动因素。第二是相对优势，现在各大公司都在发力AI，但百度在这个领域耕耘时间最长，拥有的专利最多，相比其他企业更具优势。一个好战略应该满足三个条件：有现实的市场需求，企业有资源和技术，有差异化的竞争优势。AI对于百度来说是三者兼备。</p><p>通过对政治、经济、社会和科技做分析（PEST分析），都会发现AI是大趋势。从政治来看，国家在AI方面出台了一系列政策，在2020年推出的新基建中，AI是七大部分之一。从经济来看，中国经济的转型升级，企业面临数字化转型，而AI在数字化转型中扮演大脑角色。从社会来看，2020年的新冠病毒疫情中，AI扮演了非常重要的角色。从科技来看，现在各种AI的应用越来越成熟，并形成了一个完整的产业链。</p><p>2018年12月，中央经济工作会议在北京举行，会议重新定义了基础设施建设，把5G、人工智能、工业互联网、物联网定义为“新型基础设施建设”，简称“新基建”。在新基建中，人工智能扮演中大脑的角色，在这个领域未来会有数以千亿的投资，而百度在这个领域具备优势。2020年，新冠肺炎疫情发生以来，AI在医疗、配送、巡检等方面<a href="https://36kr.com/projectDetails/461959" target="_blank" rel="noopener">大显</a>身手，“新基建”也按下快进键，双重因素叠加，导致AI正迎来新的发展新机遇。AI的商业化也开始迎来了春天，作为AI领域的领导者，百度具有很大的想象空间。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_c7b3511b68354d71b9519f1984c7e1a6_img_000" alt="百度的AI新基建版图"></p><p>AI会在三个层次带来实质的经济和产业结构性影响，而百度在这三个层次上都有布局：</p><p>首先是智能交互层，对应的是各种终端设备和应用服务，主要商业模式是2C。在移动互联网时代对应的是智能手机和各种APP应用，但人工智能和物联网会超越智能手机的范围，比如智能音箱，各种可穿戴设备，传感装置和机器人等，这必将导致整个行业被重新洗牌。百度在这个领域非常有优势，移动端拥有十亿以上的用户，对话式语音交互的小度音箱中国市场份额第一，他们都是AI的终端设备和应用。</p><p>其次是基础设施层，对应的是5G网络、云计算、大数据和AI等，这些基础设施最终都会通过云服务的模式对外开放共享，其主要商业模式是2B。这个层次的创新不如用户终端层面那样明显，但影响却非常深远。国外的谷歌、亚马逊和微软都在这个基础设施领域长期投资，这也是支撑他们的市值超过一万亿美元的重要基础。在国内，<a href="https://36kr.com/projectDetails/25167" target="_blank" rel="noopener">华为</a>、百度、腾讯和阿里巴巴都在这里投以重金，其中百度则以AI见长。</p><p>最后是产业智能化层面，对应的是交通、医疗、城市、教育等等具体行业的智能化，以及在智能化基础之上，这些行业之间的相互影响，其商业模式可能是垂直整合的，既有2B的成分，也有2C的成分。数字技术对行业的改造主要集中在信息、零售、旅游、酒店、本地生活服务和金融等个人信息驱动的行业，但物联网和人工智能驱动的智能经济不但包括了个人信息，还包括了物的信息，比如无人驾驶就聚合很多创新机会。百度、腾讯和阿里巴巴都在推出产业互联网，其主要的思路就是利用AI等数字技术推动传统产业的转型升级。其中，百度在交通、能源、教育等领域的数字技术方面比较有优势。</p><p>百度在AI领域的优势在于它布局很早。从2017年起，AI作为百度新的驱动引擎，逐渐深入其各项业务中，无论是搜索、内容分发，还是智能驾驶、医疗等，都打上了AI的烙印。基于庞大的用户数据能够让百度在AI算法上占领优势，因此百度一直在不断加码基础设施建设，不断投资人工智能基础技术。百度在中国建立了十几个云计算中心，并投资了40千兆交换机，为人工智能技术和存储提供重要支持。“百度大脑”的参数规模已经达到百亿级，创造了世界上最大的深度神经网络。</p><p>中国专利保护协会发布的《人工智能技术专利深度分析报告》显示，2019年百度以2368件的AI专利申请量在国内位居第一，是腾讯的2倍，阿里巴巴的3倍以上。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_af6955ea361f43e4bbf73c462cebffb9_img_000" alt="百度在AI领域的布局"></p><p>百度还通过投资在泛互联网和AI企业，营造AI的产业生态。其中，2016 年 9 月，百度成立百度风投，基金规模超过 30 亿人民币，专注于投资人工智能领域的早期项目；2016 年 10 月，百度成立百度资本，基金规模 200 亿人民币，投资于泛互联网领域中后期项目。2018年4月，百度还成立了长成基金，出资额为5亿美元，投资泛互联网和人工智能领域的创新企业。</p><p>百度一直在用AI思维看出行，围绕人和车，百度分别推出了对话式人工智能系统DuerOS、自动驾驶汽车平台Apollo和百度云，这也是百度人工智能商业化的重要部分。在百度的投资版图中，交通出行领域一直都深得百度青睐，百度投资了长沙智能驾驶研究院、VisualThreat、<a href="https://36kr.com/projectDetails/5263" target="_blank" rel="noopener">环宇智行</a>、Lunewave等出行领域相关的项目。百度在教育领域的投资也透露着AI思维，比如百思编程、<a href="https://36kr.com/projectDetails/123796" target="_blank" rel="noopener">海豚思维</a>和Snark AI等项目。</p><p>从市值走势来看，百度在智能驾驶和车联网方面拥有较大的想象空间。同比自动驾驶企业Waymo，它在上一轮融资估值就有 300 亿美金，这说<a href="https://36kr.com/projectDetails/78900" target="_blank" rel="noopener">明投</a>资者对这个领域非常看好。百度拥有全球领先的自动驾驶开放平台和国内领先的车联网，目前 60 车厂的400 款车型有搭载百度的系统，无论是技术还是市场影响力要超过了Waymo，体现在资本市场的估值方面，也应该会有比较大的想象空间。</p><p>在2018年的AI开发者大会上，来自全球的7000多位AI开发者和爱好者见证了百度在AI领域的发展：云端全功能AI芯片“昆仑”、百度大脑3.0、百度智能小程序、DuerOS 3.0开放平台、Apollo3.0开放平台、AR仿真等。由此可见，在百度一个全产业链高度开放的生态系统已然成型，市场也越来越成熟了。</p><p>在百度的财报中可能看到这种变化，基于AI业务的收入也增长迅速，从2017年的117亿增加到2019年的293亿人民币，增幅超过150%。2020年全球遭遇新冠肺炎疫情，导致百度的在线广告收入和去年同比下滑了19%，但以AI为主的其他业务收入则逆市增长了28%。此消彼长，相信不会超过几年，百度在AI领域的收入就会超过移动版图的收入，从而成为一个以AI为主导的公司。</p><h2 id="04、如何将技术优势转化为市场表现？"><a href="#04、如何将技术优势转化为市场表现？" class="headerlink" title="04、如何将技术优势转化为市场表现？"></a>04、如何将技术优势转化为市场表现？</h2><p>通过上面的分析我们可以看出，百度的在移动板块的业务布局完整，收入增长也相对稳健；在AI领域的技术积累有优势，所在赛道未来有很大的增长潜力。从2017年到现在，百度在研发方面的投入合计超过500亿人民币，在移动生态和AI领域的投资加起来的投资超过了300亿人民币。从财报来看，百度在AI领域的收入在快速增长，也证明战略方向上是正确的。</p><p>不过，要把技术优势转化为市场成果，要把研发投入和投资转化为财务数据，并最终在资本市场上体现为市值增长，百度还需要在组织、人才、运营、管理方面持续优化，确保战略能够落地。</p><p>根据<a href="https://36kr.com/projectDetails/442969" target="_blank" rel="noopener">罗伯特</a>·卡普兰和戴维·诺顿提出的战略地图模型，一家公司的长期股东价值最直接的原因是财务表现，包括说收入、利润、现金流和投资回报率等，但财务表现往往是由客户价值决定的，包括公司的产品、服务、品牌等。而支持客户价值的则是公司内部运营，包括创新、运营管理和客户管理。在这个基础下面，则是公司的人力资本和组织资本，以及企业的领导力、价值观和企业文化等。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_503efc82a5d34313aecd4f943b4f245b_img_000" alt="战略地图框架"></p><p>百度要面临的第一个挑战是在产品和运营方面的优化。业内流传这样一句话：百度的技术、腾讯的产品和阿里的运营。这句话未必非常精确，但确实也能反映一些问题，那就是百度骨子里是一家技术公司，在技术方面存在优势，但在产品和运营方面还存在诸多不足。相当长的时间里，百度的核心业务是搜索引擎，主要针对的客户是个人，这种商业模式决定了百度会把更多精力放在技术创新上，而不需要在产品打磨和运营方面花太多精力，久而久之也就塑造了百度的组织能力和企业文化。</p><p>现在百度的商业模式需要它在内容和AI方面发力。内容主要针对个人客户，对产品能力要求很高，这是腾讯比较强的地方；AI主要针对企业客户，对运营能力要求很高，这是阿里巴巴比较强的地方。百度在AI领域的专利数量比阿里巴巴和腾讯都要领先，但在AI领域的市场表现还没有完全迸发出来，也说明百度在产品和运营能力方面需要加强。如果百度要赢得竞争，就需要强化自己这两方面的组织能力。</p><p>组织能力背后是企业的人力资本。百度这些年增长乏力，给人的感觉还是百度对优秀人才的吸引力不够。我曾经听过百度内部管理者的解释，大意是技术人才对平台的依赖程度不如产品管理者和运营管理者，他们更容易跳槽到另一个平台，或者获得投资方的支持去创业。这个理由也能自圆其说，但也不能掩盖百度在人才吸引和激励方面的问题。比如陆奇和张亚勤都曾经做过微软的全球副总裁，到百度之后没有发挥期望中的价值，他们的离职处理得很体面，但还是让人感觉略有遗憾。</p><p>战略和组织相互影响，再好的战略如果没有和战略匹配的组织能力也很难落地，而组织能力的核心是高绩效的管理者。比如说，百度看到了O2O领域的巨大潜力，投以几百亿人民币，最后惨淡收场。从赛道选择来看，百度的战略判断并没有错，美团现在的成功证明了这一点。百度在糯米项目上的失败和缺乏相关领军人才有很大的关系，因为O2O对运营的要求非常高，如果没有这个领域的领军人才，再好的战略也无法落地。</p><p>说到领导梯队，还是忍不住要拿百度和阿里巴巴和腾讯对比。马云已经退休了，马化腾也很少露面，但这毫不影响他们业务的增长，一个很重要的原因就是这两家公司都有“良将如潮”的领导梯队，而这些领导人才大都是内部培养出来的，背后有一个完善的人才培养、选拔和激励机制。但在很长一段时间里，百度似乎更青睐外部的明星经理人，更愿意用高薪去吸引人才，而不太愿意培养和提拔内部管理者，导致百度内部的高潜人才出不来，久而久之就没有形成一个“良将如潮”的领导梯队。</p><p>总的来说，百度的战略上有很好的布局，而且在技术积累方面有一定的优势，但想要把技术优势转化为市场优势，就必须在组织能力和企业文化方面做出转变，这是百度要面临的挑战。</p><h2 id="05、百度正在开始新的长征"><a href="#05、百度正在开始新的长征" class="headerlink" title="05、百度正在开始新的长征"></a>05、百度正在开始新的长征</h2><p>好消息是，百度正在发生积极的变化。分析百度在2019年开始的变化，我们发现百度在组织构架、人才结构和企业文化方面都在做出大幅调整，这种调整产生的积极效果也开始初步显现出来。</p><p>2019年1月17日，李彦宏发全员邮件，发布百度的新愿景：“今天，我们把这样的思考、这样的认识明确为公司的愿景，那就是：成为最懂用户，并能帮助人们成长的全球顶级高科技公司。这是百度历史上首次发布愿景，这24个字将上承新使命、下展公司‘夯实移动基础、决胜AI时代’的整体战略，锚定百度在未来的新坐标——不仅是聚焦用户、成就他人的百度，也是立足全球、有所作为的百度！”</p><p>随后不久，百度开始了在组织构架和人才方面的大幅调整。2019年5月17日，百度发布2019年第一季度财报，财报显示其遭遇了上市以来的首个季度亏损，同时还宣布了百度高级副总裁、搜索公司总裁向海龙辞职的消息，以及将百度搜索公司已改组“移动生态事业群”（简称MEG）。向海龙作为百度核心业务的负责人，曾经一度被认为“最不可能动”的人。向海龙的离职是一个标志性事件，意味着百度开始大幅调整高管。</p><p>人事变动往往表明了公司在发展态度上的改变。2019年，通过密集的调兵遣将，百度形成了1（李彦宏）+15 （VP以上高管）的新决策层。根据<a href="https://36kr.com/projectDetails/29820" target="_blank" rel="noopener">猎云网</a>的梳理，这15位高管中有12名是新晋高管，其中5位来自内部晋升，3位元老回归，4位外部引进，这12个人都是75后-85后，平均在百度服务时间为8年。百度组建了近5年来最年轻的高管团队。</p><p>就在2019年5月17号李彦宏与百度MEG管理层的沟通会上，李彦宏还提出了三点新的要求：第一、确保公司彻底透明，必须说实话，必须信息透明，绝对不能欺上瞒下；第二、重新评估约定俗成的一些做法，找到新的机会，才有创新的空间，才能够比以前做得更好；第三、谁受益、谁推动，解决不了往上报。有些事情，靠一个人的力量完不成，别人又不同意你，那就把这件事情反馈到两个人的共同老板那里，让他来做这个决策，到底行还是不行。这三点要求说明百度在企业文化方面开始重点调整。</p><p>企业文化建设是HR部门的工作，但百度的企业文化历来比较弱，导致百度留不住人，变成“互联网黄埔军校”。为了改变企业文化，百度把曾经的创业元老崔珊珊请回来担任新的HR副总裁，她在2000年就加入百度，对百度很有感情，用百度内部人的话来说就是“一心就想让百度好”，由她来推动企业文化变革正合适。</p><p>在2019年7月11日百度公司的总监会上，负责HR的副总裁崔珊珊讲话的主题就是，“提升组织能力，开始新的长征。”，面对百度的核心管理层，崔珊珊直言不讳：“领军人物要为业绩负责，那些干得不好的、不好好做管理的、把业绩做差了的人，就要为差的业绩买单。”</p><p>曾经拯救过IBM的郭士纳认为，要让一家企业重新焕发活力，秘诀就是文化和绩效。用他的话来说，“公司文化不仅仅是游戏的一个方面——它就是游戏本身”，那么绩效其实就是游戏规则。为了更好地改变企业文化，百度也把公司的绩效考核方法快速从传统的KPI切换到OKR。</p><p>李彦宏曾在邮件里批评了公司的KPI文化：“如果你用一个简单的机械的KPI往下分解和传递，那么很可能到基层到一线员工的时候，他完全不理解我们为什么要干这个事儿。这个时候如果他心目当中想的不是用户体验，想的不是市场需求，想的是我怎么能够完成这个数，那这个公司真的是时间一长就完蛋了。”</p><p>这种KPI的绩效考核指标导致了公司内部上下上下信息不对称，主管和员工不能够正确地沟通，员工之间也都是各干各的，少有相互看齐；管理层为了让数据好看去玩小动作，而且让人才识别有问题。更严重的是，由于KPI过于强调公司业绩，不管实现路径是什么，是不是对用户体验、公司品牌有伤害，导致价值观严重变形。百度在过去发生过的一些危机，都或多或少和这种KPI导致的价值观变形有关。</p><p>百度到目前为止推行OKR已经一年多的时间了，最重要的作用就是落实了上下同心。OKR是横向和纵向都可见的，公司里每个人都知道李彦宏的OKR是什么，总监知道VP的OKR是什么，员工知道部门领导的OKR是什么，这样就能够让公司的战略目标层层嵌套，层层对齐，有利于提升效率，减少资源浪费。</p><h2 id="06、腾讯和微软转型给百度的启示"><a href="#06、腾讯和微软转型给百度的启示" class="headerlink" title="06、腾讯和微软转型给百度的启示"></a>06、腾讯和微软转型给百度的启示</h2><p>任何变化都需要一定的时间才能产生结果。现在判断百度转型是否成功还言之太早。但观察同类公司在经历过危机之后的转变，或许对百度的未来会有些启发。</p><p>第一个值得借鉴的公司是腾讯。之所以拿腾讯和百度相比，是因为腾讯也曾经历过严重的声誉危机。2010年的“3Q大战”，虽然当时腾讯赢了针对360的官司，但品牌形象也受到了严重伤害。腾讯的企业文化一度内向，他们把精力专注在用户和产品上，看到有什么产品流行就拿来模仿，然后利用自己的流量优势去碾压对手。同时由于腾讯和外部专家、媒体和同行都交流不多，外部对腾讯也充满了误读，导致市场口碑不太好。</p><p>2011年，腾讯组织了一批外部专家“诊断腾讯”，给腾讯提了很多尖锐的意见。在这种外部刺激之下，腾讯也开始变得更加开放起来。这种开放不只是企业文化的开放，在战略布局上也更加开放，不再像以前看到一个机会就去自己干，而是投资业内的优秀企业，通过为他们赋能来谋求共生。同时，腾讯开始组织结构调整，让组织更加匹配战略。在新的组织构架和企业文化下，腾讯孵化出了微信等现象级产品，并在2017年开始推出产业互联网。这一些系列战略布局和组织变革，也让腾讯的市值10年内增加了20多倍，成为一家生态级的企业。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_7b0e36d940d7420db1f1d1b722401634_img_000" alt="腾讯过去10年的股价变迁图（东方财富网）"></p><p>另一个值得借鉴的公司是微软。微软曾经是PC时代的王者，在互联网时代也布局很早，但似乎一直没有做得特别出色，也先后错过了收购雅虎、谷歌和facebook的机会，甚至有人说微软错过了互联网的竞争。当时微软的企业文化也比较糟糕，部门之间内斗得很厉害，公司内部士气低落，大量优秀人才纷纷离开。在这样的背景下，微软的收入止步不前，股价也一路下跌，市值一度跌破700亿美元。</p><p>幸运的是，微软看准了云计算的趋势，由于这一块的业务增长很快。负责云计算业务的萨提亚·纳德拉在2014年担任微软新任CEO。萨提亚·纳德拉担任微软CEO之后，开始“刷新”微软，不仅把微软的战略重心调整为云计算，而且在企业文化方面做了达到大刀阔斧的变革，让整个企业更得更加有执行力，也让微软创新焕发生机。伴随着这种变化的是，微软的股价在他上任之后上涨了超过6倍，并在2020年6月22日的市值达到1.52万亿美元，成为全球仅次于苹果公司的科技公司。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_c9bfc4e75c174c6eaed12d75b58c6194_img_000" alt="微软过去10年的股价变迁图（东方财富网）"></p><p>从腾讯和微软的例子都可以看到：一家曾经遭遇危机、增长失速的企业依然可以重启增长，但前提是选准战略方向，汇聚优秀人才，刷新企业文化，增强组织能力。这是百度正在做的事情，我们无法预测百度未来的市值会不会也会迎来10倍以上的增长，但至少它又重新走在了正确的路上。</p><p>百度的未来在哪里？或许辛弃疾的这首词里蕴藏了答案：众里寻他<a href="https://36kr.com/projectDetails/187422" target="_blank" rel="noopener">千百度</a>，蓦然回首，那人却在，灯火阑珊处。灯火阑珊处，也是星辰大海。</p><p>参考资料：</p><p>潘乱：《百度正在刷新：四万人开始新长征》</p><p>财经：《百度推动全员绩效变革，李彦宏的OKR有哪些？》</p><p>中关村互动营销实验室：《2019年互联网广告发展报告》</p><p>凤凰网：《百度是否被低估？》</p><p>作者 | 陈雪频，<a href="https://36kr.com/projectDetails/29044" target="_blank" rel="noopener">智慧云</a>创始合伙人，多家高成长企业的战略顾问和总裁教练。</p><p>编辑 | 智慧云董事会，定位于”高成长企业的外部董事会”，致力于提升企业家领导力，助力企业高速成长。</p>]]></content>
      
      
      <categories>
          
          <category> 互联网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度 </tag>
            
            <tag> 科技 </tag>
            
            <tag> 企业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN经典模型复现数据分析解析</title>
      <link href="/2021/08/14/cnn-jing-dian-mo-xing-fu-xian-shu-ju-fen-xi-jie-xi/"/>
      <url>/2021/08/14/cnn-jing-dian-mo-xing-fu-xian-shu-ju-fen-xi-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次共动手实现了模型LeNet、AlexNet、VGG(11 13 16 19)、GoogLeNet共7个模型，以CIFAR10数据集作为分类结果跑数据前前后后跑了大概有几天吧（当然并不是一直在跑数据），终于得到了所有数据，本人将数据分析过程记录下来。以后就会选择用TensorBoard来记录了。</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>由于我们最终是要得到3类图，分别为：</p><ul><li>这七个模型的loss随着epoch的变化的折线图（每一个模型都画一个并也有放一张图中分析）</li><li>这七个模型的test accuracy随着epoch的变化的折线图（每一个模型都画一个并也有放一张图中分析）</li><li>这七个模型训练完毕后，测试CIFAR10数据集10类每一类的准确率，并且再加上一个平均准确率的直方图（也就是7个直方图，每个直方图有11项数据）</li><li>七个模型最终预测准确率直方图</li></ul><p><em>我们一个一个分析。</em></p><h1 id="目前已有数据"><a href="#目前已有数据" class="headerlink" title="目前已有数据"></a>目前已有数据</h1><p>目前经过模型训练，我们得到了3个字典all_loss, accuracy, sort_accuracy, 含有7个模型的训练结果，分别对应我们的目标。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'all_loss:'</span><span class="token punctuation">,</span> all_loss<span class="token punctuation">,</span> <span class="token string">'accuracy:'</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">,</span> <span class="token string">'sort_accuracy:'</span><span class="token punctuation">,</span> sort_accuracy<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>all_loss</strong>:</p><p>{‘LeNet’: [1.6242144256544204, 1.31352958249039, 1.1847674048107095, 1.0951759464757533, 1.0312513256027236, 0.9760023163094097, 0.9317566171641237, 0.8888657108683351, 0.851712247841799, 0.8184668843134504, 0.7859083576722551, 0.7644560352320559, 0.7326112778157816, 0.7069267691783393, 0.6854747742204733, 0.6642881736340465, 0.6426100643186026, 0.6204320310554822, 0.6023138596873518, 0.5891161807839563], ‘AlexNet’: [1.6470382594177528, 1.2535949297921443, 1.0847475018855173, 0.9779244823785295, 0.8868776897513097, 0.8185919923463542, 0.7630485494740865, 0.712278577117148, 0.6728370328667983, 0.6266675178945942, 0.5853622808280238, 0.5530675600163081, 0.5216182161763702, 0.48412983791613073, 0.47559833306859717, 0.4513656324656324, 0.4125896211587231, 0.39553951881992766, 0.37599814571654727, 0.3764796929466118], ‘VGG11’: [1.2797923941720546, 0.8204267419688761, 0.6319287241801801, 0.5093692947448406, 0.3947184955271024, 0.30049776959918817, 0.22226405595217713, 0.1716289870436193, 0.12499573790278794, 0.10720912222238049, 0.08451989348654552, 0.07376416784010903, 0.06238203229706184, 0.05902868207292414, 0.054739658074399546, 0.046656431376819574, 0.0440141692180995, 0.040774361139257746, 0.037835499233601716, 0.038758098736319496], ‘VGG13’: [1.2642371852684509, 0.7722501971989947, 0.5903376623264054, 0.4784044684923213, 0.3800432443847437, 0.30268731431278123, 0.23576976750951137, 0.18087512682027676, 0.1408744841037542, 0.10939275374864717, 0.08912606567770834, 0.07885368761744664, 0.0641673685397174, 0.059465244257598734, 0.05032006161191555, 0.05069959139102436, 0.0446176283173007, 0.04227883966442089, 0.038349986351278245, 0.035195458980138435], ‘VGG16’: [1.4878040287653198, 0.9365591992959952, 0.7370820180763065, 0.6060846281783355, 0.5078294051958777, 0.4291884641894294, 0.3603880833024564, 0.2933719548994623, 0.24789767926725584, 0.198568012527264, 0.1621592563060124, 0.1343770895839271, 0.11871750627541938, 0.0996952341926639, 0.08778401462586306, 0.0753310109254049, 0.06421501902134522, 0.06112010521195529, 0.0573385018331911, 0.0516717257278869], ‘VGG19’: [1.7686422246191509, 1.193289189539907, 0.9002916185599764, 0.7483896711826934, 0.6286251023221199, 0.5321085340417254, 0.4624791795297352, 0.38920851096587106, 0.33552453419684297, 0.2911587263483678, 0.24505771608913646, 0.20557330978696076, 0.1741280048142385, 0.14644487293513345, 0.1290046954908601, 0.11228246268544756, 0.09866908017803183, 0.08531898694664307, 0.08279588602601176, 0.0675076813722277], ‘GoogLeNet’: [1.2311952696431934, 0.7666956804063924, 0.578668496149885, 0.4777612447205102, 0.3925454377594506, 0.3375073971079134, 0.2815402130908368, 0.23534502303394514, 0.19595492798406297, 0.16418727704554872, 0.14072739037082477, 0.11543235368431186, 0.10002748314839076, 0.08524505978824137, 0.08325784758050138, 0.06983265248925218, 0.06453105599111508, 0.058409628307665974, 0.05595131519743625, 0.05454142128511587]}</p><p><strong>accuracy:</strong></p><p>{‘LeNet’: [0.47634, 0.57336, 0.61238, 0.62712, 0.66916, 0.6842, 0.68662, 0.7085, 0.73304, 0.7478, 0.73412, 0.7546, 0.76134, 0.77652, 0.79072, 0.77714, 0.80508, 0.80592, 0.79098, 0.8204], ‘AlexNet’: [0.4927, 0.588, 0.67408, 0.70754, 0.72952, 0.75498, 0.7811, 0.77366, 0.8081, 0.79696, 0.82704, 0.83872, 0.84712, 0.8661, 0.8742, 0.86808, 0.8815, 0.88648, 0.88684, 0.88756], ‘VGG11’: [0.69674, 0.76524, 0.81788, 0.8647, 0.91078, 0.93784, 0.95356, 0.97072, 0.97222, 0.96346, 0.98072, 0.97492, 0.983, 0.98192, 0.9873, 0.98874, 0.98556, 0.99128, 0.98768, 0.99384], ‘VGG13’: [0.6891, 0.77314, 0.83566, 0.88822, 0.90306, 0.92948, 0.93804, 0.96178, 0.97378, 0.97418, 0.97518, 0.98266, 0.98802, 0.9846, 0.98568, 0.98912, 0.99238, 0.9936, 0.99396, 0.98878], ‘VGG16’: [0.61826, 0.72454, 0.79506, 0.81732, 0.84844, 0.88578, 0.90558, 0.92866, 0.93832, 0.9508, 0.95308, 0.96834, 0.97676, 0.95392, 0.98222, 0.98524, 0.98964, 0.98392, 0.98868, 0.98892], ‘VGG19’: [0.4279, 0.66604, 0.7312, 0.77616, 0.82448, 0.84562, 0.87258, 0.90588, 0.9072, 0.93078, 0.94332, 0.95704, 0.95202, 0.9642, 0.97252, 0.9682, 0.97178, 0.97656, 0.97264, 0.98384], ‘GoogLeNet’: [0.68024, 0.78884, 0.84078, 0.87326, 0.88924, 0.90944, 0.92276, 0.93896, 0.94442, 0.95026, 0.9642, 0.96864, 0.97296, 0.97084, 0.97456, 0.97932, 0.98056, 0.98624, 0.98712, 0.98292]} </p><p><strong>sort_accuracy ：</strong></p><p>{‘LeNet’: [0.8550247116968699, 0.9040880503144654, 0.7291338582677165, 0.7156105100463679, 0.8411949685534591, 0.688135593220339, 0.8456692913385827, 0.8050847457627118, 0.9357366771159875, 0.8855799373040752], ‘AlexNet’: [0.9159802306425041, 0.9119496855345912, 0.8267716535433071, 0.7372488408037094, 0.8915094339622641, 0.8101694915254237, 0.9700787401574803, 0.888135593220339, 0.9780564263322884, 0.9482758620689655], ‘VGG11’: [1.0, 0.9921383647798742, 0.9921259842519685, 0.9953632148377125, 0.9874213836477987, 0.988135593220339, 0.9984251968503937, 0.9966101694915255, 0.9952978056426333, 0.9984326018808778], ‘VGG13’: [0.9857142857142858, 0.9910714285714286, 0.9846153846153847, 0.9775641025641025, 0.9801980198019802, 0.9935275080906149, 0.9819819819819819, 0.9933110367892977, 0.9866220735785953, 1.0], ‘VGG16’: [0.9821428571428571, 1.0, 0.9907692307692307, 0.9871794871794872, 0.9966996699669967, 0.9935275080906149, 0.993993993993994, 0.9832775919732442, 0.9899665551839465, 1.0], ‘VGG19’: [0.9964285714285714, 0.9821428571428571, 0.9723076923076923, 0.9166666666666666, 0.9933993399339934, 0.9805825242718447, 0.984984984984985, 0.9899665551839465, 0.9966555183946488, 1.0], ‘GoogLeNet’: [0.9892857142857143, 0.9970238095238095, 0.9723076923076923, 0.967948717948718, 0.9834983498349835, 0.970873786407767, 0.996996996996997, 0.9899665551839465, 0.9933110367892977, 0.9879518072289156]}</p></blockquote><h1 id="导入必要库"><a href="#导入必要库" class="headerlink" title="导入必要库"></a>导入必要库</h1><p> 首先导入必要的库，这里我们主要使用到matplotlib库，由于我们使用的是jupyter notebook，所以我们额外加了个命令<code>%matplotlib inline</code>，这是python一个魔术方法，可以将我们的图嵌套到cell的输出里面。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">%</span>matplotlib inline<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="颜色设置"><a href="#颜色设置" class="headerlink" title="颜色设置"></a>颜色设置</h1><h2 id="查看各类颜色"><a href="#查看各类颜色" class="headerlink" title="查看各类颜色"></a>查看各类颜色</h2><p>由于我们需要将各种折线画到一张图中，所以我们尽量不同模型使用不同颜色，所以我们首先需要了解都有哪些颜色。</p><p>输入如下代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列出所有的matplotlib有的颜色</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> hex <span class="token keyword">in</span> matplotlib<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>cnames<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> hex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们可以得到所有的颜色以及其rgb值(共有148种)：</p><blockquote><p>aliceblue #F0F8FF<br>antiquewhite #FAEBD7<br>aqua #00FFFF<br>aquamarine #7FFFD4<br>azure #F0FFFF<br>beige #F5F5DC<br>bisque #FFE4C4<br>black #000000<br>blanchedalmond #FFEBCD<br>blue #0000FF<br>blueviolet #8A2BE2<br>brown #A52A2A<br>burlywood #DEB887<br>cadetblue #5F9EA0<br>chartreuse #7FFF00<br>chocolate #D2691E<br>coral #FF7F50<br>cornflowerblue #6495ED<br>cornsilk #FFF8DC<br>crimson #DC143C<br>cyan #00FFFF<br>darkblue #00008B<br>darkcyan #008B8B<br>darkgoldenrod #B8860B<br>darkgray #A9A9A9</p><p>[show more (open the raw output data in a text editor) …](vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#)</p><p>wheat #F5DEB3 white #FFFFFF whitesmoke #F5F5F5 yellow #FFFF00 yellowgreen #9ACD32</p></blockquote><h2 id="设置自己的颜色"><a href="#设置自己的颜色" class="headerlink" title="设置自己的颜色"></a>设置自己的颜色</h2><p>因为一共有7种模型，我们只需要7种颜色就行，这里用到了zip将其打包，如下：</p><pre class="line-numbers language-python"><code class="language-python">colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wheat'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">]</span>colors <span class="token operator">=</span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>all_loss<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> colors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>{‘LeNet’: ‘wheat’, ‘AlexNet’: ‘blue’, ‘VGG11’: ‘yellow’, ‘VGG13’: ‘green’, ‘VGG16’: ‘pink’, ‘VGG19’: ‘purple’, ‘GoogLeNet’: ‘red’}</p></blockquote><p><em>而后我们选择颜色就可以直接这么选择就OK。</em></p><h1 id="loss-epoch折线图"><a href="#loss-epoch折线图" class="headerlink" title="loss -epoch折线图"></a>loss -epoch折线图</h1><h2 id="各个模型对比分析"><a href="#各个模型对比分析" class="headerlink" title="各个模型对比分析"></a>各个模型对比分析</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python">epoch <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'The loss of Every model with epoch'</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> loss <span class="token keyword">in</span> all_loss<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(name, colors[name])</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'%3s'</span><span class="token operator">%</span>round<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'loss/all.png'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><ol><li>这里面epoch作为x轴，一共有20个epoch,所以我们np.arange(1, 21).</li><li>plt.figure()是建立了一个图，其中figsize参数是一个元组，用来定义我们建立的图的大小，（width, height），matplotlib 的 figure 就是一个 单独的 figure 窗口, 窗口里面还可以有更多的小图片.</li><li>而后我们直接设置plt.title</li><li>随后我们选择绘图，这里只有一个figure是为了把所有折线画到一张图中</li><li>随后我们直接选用plt.plot绘图，第一个为x轴，第二个为y轴，颜色选择我们之前一一对应的，label是我们所选的图例，我们图例需要在plt.legend()命令后才会显示。linewidth是我们线条的粗细，实际上也可以调成虚线，需要调整<code>linestyle==&#39;--&#39;</code>.</li><li>里面嵌套的for循环用来标注各个点的纵坐标，标注数据以方便后续分析</li><li>plt.legend(loc=’best’),loc是图例的位置，这个可以自定义，也可以直接’best’让程序自动分配最好的图例位置。<strong>如果嫌图例框小可以使用<code>borderpad=2</code>更改内部填充，我们将使整个图例框变大(单位是字体大小的倍数，类似于<code>em</code></strong></li><li>plt.savefig是用来保存图片，里面可以填我们需要保存到的路径。必须放到plt.show()前面，否则会得到空图像</li><li>plt.show()是直接显示输出图像</li></ol><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><blockquote><p> <a href="https://imgtu.com/i/f6BJ29" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/14/f6BJ29.png" alt="loss-epoch"></a></p></blockquote><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><p><strong>先挖个坑</strong></p><h2 id="单独输出模型"><a href="#单独输出模型" class="headerlink" title="单独输出模型"></a>单独输出模型</h2><p>讲过以上如何绘图之后，实际上接下来就简单多了。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python">epoch <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>all_loss<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">,</span> loss <span class="token operator">=</span> data    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>f<span class="token string">'The loss of model {name} with epoch'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'loss/The loss of every model with epoch'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><ol><li>这里面由于上文讲了大部分，这里就挑一部分来看</li><li>首先我们定义图像大小之后（<del>别问我怎么弄的参数，试出来的</del>）这里面设定了有子图plt.subplot(a, b, c)实际上a, b是指准备给图像平均分为a*b几份，c是指目前要操作的位置是第几份子图，如果我们想要进一步探索可不可以不平均分，可以看<a href="https://mofanpy.com/tutorials/data-manipulation/plt/subpot1/" target="_blank" rel="noopener">这里</a>，<a href="https://blog.csdn.net/math_gao/article/details/109521842?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162894368316780255248420%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162894368316780255248420&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109521842.first_rank_v2_pc_rank_v29&utm_term=matplotlib+%E8%B0%83%E6%95%B4%E5%AD%90%E5%9B%BE%E5%A4%A7%E5%B0%8F&spm=1018.2226.3001.4187" target="_blank" rel="noopener">调子图间距</a> 实际上我也是随便找的资料看，大家上网随便一搜就OK。</li><li>接着是我们的绘图、保存了，比较简单，这里不多说了。</li></ol><p><strong>另外需要注意的就是我们的顺序一定要注意，否则会出现一些意想不到的错误</strong></p><h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><blockquote><p><a href="https://imgtu.com/i/f6BNK1" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/14/f6BNK1.png" alt="The loss of every model with epoch"></a></p></blockquote><h1 id="accuracy-epoch折线图"><a href="#accuracy-epoch折线图" class="headerlink" title="accuracy-epoch折线图"></a>accuracy-epoch折线图</h1><h2 id="各个模型的对比分析"><a href="#各个模型的对比分析" class="headerlink" title="各个模型的对比分析"></a>各个模型的对比分析</h2><p>由于都是折线图，所以我们代码差距实际上并不大：</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python">epoch <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'The Accuracy of Every model with epoch'</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> rate <span class="token keyword">in</span> accuracy<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> rate<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'%3s'</span><span class="token operator">%</span>round<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">,</span> borderpad<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'accuracy/all.png'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a>输出结果</h3><blockquote><p><a href="https://imgtu.com/i/f6sjdP" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/14/f6sjdP.png" alt="The Accuracy of Every model with epoch"></a></p></blockquote><h3 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h3><p>实际上代码是非常类似的，并不需要额外去分析</p><h3 id="对比分析-1"><a href="#对比分析-1" class="headerlink" title="对比分析"></a>对比分析</h3><p><strong>同样先挖个坑</strong></p><h2 id="单独输出模型-1"><a href="#单独输出模型-1" class="headerlink" title="单独输出模型"></a>单独输出模型</h2><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python">epoch <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> rate <span class="token keyword">in</span> accuracy<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>f<span class="token string">'The Accuracy of model {name} with epoch'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'accuracy/%s.png'</span><span class="token operator">%</span>name<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出结果-3"><a href="#输出结果-3" class="headerlink" title="输出结果"></a>输出结果</h3><blockquote><p><a href="https://imgtu.com/i/f66YBn" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/14/f66YBn.png" alt="The accuracy of every model with epoch"></a></p></blockquote><h1 id="sort-variety-sort分布直方图"><a href="#sort-variety-sort分布直方图" class="headerlink" title="sort_variety-sort分布直方图"></a>sort_variety-sort分布直方图</h1><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>sort_accuracy<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">,</span> rate <span class="token operator">=</span> data    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>f<span class="token string">'The Accuracy Of Every Variety Of {name}'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>classes<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plt.legend(loc='best')</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>classes<span class="token punctuation">,</span> rate<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">"%3s"</span><span class="token operator">%</span>round<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'The test_acc of every model'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>models_name<span class="token punctuation">,</span> test_acc<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'bgry'</span><span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>models_name<span class="token punctuation">,</span> test_acc<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'%3s'</span><span class="token operator">%</span>round<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'sort_accuracy/the accuracy of every variety.png'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码分析-3"><a href="#代码分析-3" class="headerlink" title="代码分析"></a>代码分析</h2><ol><li>首先定义窗口大小</li><li>另外这里面用plt.bar来定义直方图，横坐标为classes, 纵坐标为rate，同样这里事实上不需要图例</li><li>这里面由于我们放好多图在一张图里了，所以字体看起来有些小，我们可以使用frontsize这个属性来<a href="https://blog.csdn.net/u011008379/article/details/60478927" target="_blank" rel="noopener">调大小</a>。</li><li>另外就是我们保留位数利用round(y, 2), 2为保留两位数字。</li></ol><p><a href="https://imgtu.com/i/f6f13V" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/14/f6f13V.png" alt="the accuracy of every variety"></a></p><h2 id="对比分析-2"><a href="#对比分析-2" class="headerlink" title="对比分析"></a>对比分析</h2><p>挖坑</p><p><strong>终于，CNN分析完毕，接下来就要尝试新东西了，请各位继续关注我的博客🙂</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> CNN </tag>
            
            <tag> matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> numpy </tag>
            
            <tag> GoogLeNet </tag>
            
            <tag> LeNet </tag>
            
            <tag> AlexNet </tag>
            
            <tag> VGG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kaggle竟然不支持TensorBoard</title>
      <link href="/2021/08/13/kaggle-jing-ran-bu-zhi-chi-tensorboard/"/>
      <url>/2021/08/13/kaggle-jing-ran-bu-zhi-chi-tensorboard/</url>
      
        <content type="html"><![CDATA[<p>   最近想白嫖一下Kaggle的GPU，费了一些功夫<a href="https://blog.csdn.net/bigbennyguo/article/details/87956434?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control" target="_blank" rel="noopener">学了学</a>TensorBoard, 后来发现Kaggle上的命令和本地运行还不一样。又学了学<a href="https://zhuanlan.zhihu.com/p/66748652" target="_blank" rel="noopener">Kaggle上的启动方式</a>，学完后，满怀期待的开始测试一些基本代码。没想到却遇到了这样的情况：</p><p><a href="https://imgtu.com/i/fDuEkQ" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/13/fDuEkQ.png" alt="气死我了！！"></a></p><p>竟然运行超时！我本来以为是因为没有科学shangwang的原因，所以就开始可学的上网，但是重新运行命令，还是这样的结果，没有办法，只好上网搜一下为什么，问度娘为什么Kaggle上运行Tensorboard没有响应，没有结果……。嗨，好吧……中文社区竟然根本没有人提出这个问题，自然也没有人解答，后来把错误原因输进去，一输入就得到了Kaggle上问答区的讨论：</p><p><a href="https://imgtu.com/i/fDuc9A" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/13/fDuc9A.png" alt="NO!!!"></a></p><p>多谢大哥！原来TensorBoard 已被暂时禁用，因为它会减慢所有用户的 Jupyter 笔记本启动时间。 他们说他们正在努力将其取回 10 个月前。 它现在似乎已经退居二线。 作为一种解决方法，我发现这个 notebook 可以在当前的 docker 文件上运行。 有关在 Kaggle 中使用 TensorBoard 的更多信息，请参阅此<a href="https://www.kaggle.com/product-feedback/89671" target="_blank" rel="noopener">issue</a>。</p><p>然而我参阅后……发现彻底用不了了，乖乖自己用matplotlib实现吧……</p><p>唉唉唉！要不是我本人没有GPU，谁稀罕Kaggle Tesla K80GPU那点算力……</p><p>最后附上一些TensorBoard技巧：</p><h2 id="在Kaggle上（目前没啥用）"><a href="#在Kaggle上（目前没啥用）" class="headerlink" title="在Kaggle上（目前没啥用）"></a>在Kaggle上（目前没啥用）</h2><p>相比本地机中使用notebook进行可视化，在这种远程的notebook中如果使用魔法函数</p><pre class="line-numbers language-python3"><code class="language-python3">！tensorboard --logdir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会导致你无法打开tensorboard的http服务（也就是网址）。本文使用一种简单的方法，通过tensorboardX在notebook可视化pytorch模型参数。</p><p>第一步import tensorboardX （如何使用tensorboardX请参考reference）：</p><pre class="line-numbers language-text"><code class="language-text">from tensorboardX import SummaryWriter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步初始化一个 SummaryWriter实例：</p><pre class="line-numbers language-text"><code class="language-text">writer = SummaryWriter()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三步：</p><pre class="line-numbers language-text"><code class="language-text">%load_ext tensorboard.notebook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第四步把你模型需要在tensorboard中可视化的参数写入writer：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-39de1b0efa3e5ce57e95d02208478e04_1440w.jpg" alt="img"></p><p>第五步：</p><pre class="line-numbers language-text"><code class="language-text">%tensorboard --logdir ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来你就可以训练你的模型了，而且在边训练的时候可以边看到模型参数的变化。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-e7e1d23b2830e5deaa826b2ac0e06649_1440w.jpg" alt="img"></p><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p><a href="https://blog.csdn.net/bigbennyguo/article/details/87956434?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control" target="_blank" rel="noopener">https://blog.csdn.net/bigbennyguo/article/details/87956434?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> GPU </tag>
            
            <tag> Kaggle </tag>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU/GPU/TPU/APU家族们</title>
      <link href="/2021/08/13/cpu-gpu-tpu-apu-jia-zu-men/"/>
      <url>/2021/08/13/cpu-gpu-tpu-apu-jia-zu-men/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章转载自个人博客<a href="http://www.techeasygo.com/archives/1143" target="_blank" rel="noopener">闻西谈</a>，如有侵权，请与博主本人联系：<a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a></p></blockquote><p>刚开始接触深度学习概念时，基本大多数时候也就提到GPU，也基本是用GPU来进行深度学习算法训练或部署人脸识别系统的。</p><p>近几年，随着人工智能(尤其是人脸识别)的爆炸式发展，诞生了许多新的东西，其中这芯片，就让很多人都摸不着头脑。</p><p>除了CPU，GPU之外，还有TPU，NPU等，真的是CPU/GPU/TPU/NPU傻傻分不清楚啊。</p><p>今天，闻西就来帮大家理理这些让人分不清楚的芯片到底都是啥？怎么区别它们？</p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a><strong>CPU</strong></h2><p>CPU是大家听到得最多的。</p><p>CPU英文全称是Central Processing Unit，中文全称是中央处理器，是计算机的核心器件，CPU通常由三个部分组成：<strong>计算单元、控制单元和存储单元。</strong></p><p>架构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-d65f155a80f7a1d6e6227d01c7f414a1_1440w.jpg" alt="img"></p><p>是不是看不懂？看不懂就对了，下面这张图才是帮助你理解的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-046ee01f1002ef7e7db48eeda9aa539e_1440w.jpg" alt="img"></p><h2 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a><strong>GPU</strong></h2><p>GPU全称是Graphics Processing Unit，中文全称叫图形处理器，它也是由三个部分组成：<strong>计算单元、控制单元和存储单元。</strong></p><p>我们继续沿用上面CPU架构图用来表示各个单元的颜色来表示下GPU架构(黄色用来表示控制单元，绿色用来表示计算单元，橙色用来表示存储单元)，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic4.zhimg.com/80/v2-7d630d1681ddd6ee47968af93bec0c23_1440w.jpg" alt="img"></p><p>这妥妥是个CPU变种啊！</p><p>我们把CPU和GPU的架构图放在一起比较下，看看有啥区别：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic4.zhimg.com/80/v2-005d784787c6e72d75214c3cbe1ea303_1440w.jpg" alt="img"></p><p>CPU这边起码30%都是用在了控制单元，各个单元占比还算均衡，而GPU就夸张了，80%以上都用在了计算单元，偏科有点严重啊。</p><p>正是由于这种区别，导致CPU精于控制和复杂运算，而GPU精于简单且重复的运算。</p><p><strong>另外CPU和GPU还有一个最大的区别：CPU是顺序执行运算，而GPU是可以大量并发的执行运算，通俗的说就是CPU做事情是一件一件来做，而GPU是很多件事情同时做。</strong></p><p>但很多件事情同时做，一定是简单的事情，就像一个人一样，我们没法同时做两件复杂的事情。</p><p>借用知乎上某大神的说法，就像你有个工作需要计算几亿次一百以内加减乘除一样，最好的办法就是雇上几十个小学生一起算，一人算一部分，反正这些计算也没什么技术含量，纯粹体力活而已；而CPU就像老教授，积分微分都会算，就是工资高，一个老教授资顶二十个小学生，你要是富士康你雇哪个？</p><p>GPU就是用很多简单的计算单元去完成大量的计算任务，纯粹的人海战术。这种策略基于一个前提，就是小学生A和小学生B的工作没有什么依赖性，是互相独立的。</p><p><strong>但有一点需要强调，虽然GPU是为了图像处理而生的，但是我们通过前面的介绍可以发现，它在结构上并没有专门为图像服务的部件</strong>，只是对CPU的结构进行了优化与调整，所以现在GPU不仅可以在图像处理领域大显身手，它还被用来科学计算、密码破解、数值分析，海量数据处理（排序，Map-Reduce等），金融分析等需要大规模并行计算的领域。</p><p>上面我们提到的CPU和GPU都是通用芯片。</p><p>但古语有云：工欲善其事必先利其器。</p><p>一块石头，是通用的，但如果我专门打磨打磨，让它变成锋利的，是不是就可以用来切割东西了呢？</p><p>有了这个概念后，对于TPU，NPU等等众多的PU们，你把它们当成都是专门打磨过的石头，就很好理解了。</p><h2 id="TPU"><a href="#TPU" class="headerlink" title="TPU"></a><strong>TPU</strong></h2><p>自从谷歌的AlphaGo打败李世石之后，谷歌在人工智能界的知名度也越来越大了，于是谷歌推出了它们的深度学习框架TensorFlow，这个深度学习框架也就此扬名世界。</p><p>有了好的算法框架，就得要有硬件来支持啊，传统的GPU行吗？</p><p>当然行，可是它毕竟是块通用的石头，要是打磨打磨就好了。</p><p>于是针对谷歌的深度学习框架TensorFlow专门定制的芯片诞生了，英文全称就叫Tensor Processing Unit，翻译为中文就是张量处理单元，它到底有多牛呢？比较下你就知道了：</p><p><strong>TPU与同期的CPU和GPU相比，可以提供15-30倍的性能提升，以及30-80倍的效率（性能/瓦特）提升。</strong></p><p>吼吼，这可不是一丁点的效率提升，是大大的提升。</p><h2 id="NPU"><a href="#NPU" class="headerlink" title="NPU"></a><strong>NPU</strong></h2><p>NPU英文全称是Neural network Processing Unit， 中文叫神经网络处理器。</p><p>神经网络是个啥？</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-9818a287fb926b1d6cd213546e91d934_1440w.jpg" alt="img"></p><p>神经网络就是你大脑里面的神经元连接成的网络，错综复杂，据说越复杂越聪明，当然太复杂了，就成神经病了。</p><p>而这个NPU，即神经网络处理器，就是要模仿人的大脑神经网络，使之具备智能。</p><p>怎么模仿呢？</p><p>NPU工作原理是在电路层模拟人类神经元和突触，并且用深度学习指令集直接处理大规模的神经元和突触，一条指令完成一组神经元的处理。相比于CPU和GPU，NPU通过突触权重实现存储和计算一体化，从而提高运行效率。</p><h2 id="其他PU们"><a href="#其他PU们" class="headerlink" title="其他PU们"></a><strong>其他PU们</strong></h2><p>顺着这个套路，感觉妈妈再也不用担心我的PU了。</p><p>APU — Accelerated Processing Unit, 加速处理器，AMD公司推出加速图像处理芯片产品。</p><p>BPU — Brain Processing Unit, 地平线公司主导的嵌入式处理器架构。</p><p>CPU — Central Processing Unit 中央处理器， 目前PC core的主流产品。</p><p>DPU — Deep learning Processing Unit, 深度学习处理器，最早由国内深鉴科技提出；另说有Dataflow Processing Unit 数据流处理器， Wave Computing 公司提出的AI架构；Data storage Processing Unit，深圳大普微的智能固态硬盘处理器。</p><p>FPU — Floating Processing Unit 浮点计算单元，通用处理器中的浮点运算模块。</p><p>GPU — Graphics Processing Unit, 图形处理器，采用多线程SIMD架构，为图形处理而生。</p><p>HPU — Holographics Processing Unit 全息图像处理器， 微软出品的全息计算芯片与设备。</p><p>IPU — Intelligence Processing Unit， Deep Mind投资的Graphcore公司出品的AI处理器产品。</p><p>MPU/MCU — Microprocessor/Micro controller Unit， 微处理器/微控制器，一般用于低计算应用的RISC计算机体系架构产品，如ARM-M系列处理器。</p><p>NPU — Neural Network Processing Unit，神经网络处理器，是基于神经网络算法与加速的新型处理器总称，如中科院计算所/寒武纪公司出品的diannao系列。</p><p>RPU — Radio Processing Unit, 无线电处理器， Imagination Technologies 公司推出的集合集Wifi/蓝牙/FM/处理器为单片的处理器。</p><p>TPU — Tensor Processing Unit 张量处理器， Google 公司推出的加速人工智能算法的专用处理器。目前一代TPU面向Inference，二代面向训练。</p><p>VPU — Vector Processing Unit 矢量处理器，Intel收购的Movidius公司推出的图像处理与人工智能的专用芯片的加速计算核心。</p><p>WPU — Wearable Processing Unit， 可穿戴处理器，Ineda Systems公司推出的可穿戴片上系统产品，包含GPU/MIPS CPU等IP。</p><p>XPU — 百度与Xilinx公司在2017年Hotchips大会上发布的FPGA智能云加速，含256核。</p><p>ZPU — Zylin Processing Unit, 由挪威Zylin 公司推出的一款32位开源处理器。</p><p><strong>这么下去感觉26个字母完全不够用啊，话说以后PU们会不会长的跟车牌一样了呢？</strong></p><p><strong>比如：XZAYPU，嗯，我看就差加个粤B在前面了。</strong></p><p><strong>以后妈妈可能还是要担心我的PU了！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> GPU </tag>
            
            <tag> 显卡 </tag>
            
            <tag> CPU </tag>
            
            <tag> TPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习GPU利用率低问题分析(转)</title>
      <link href="/2021/08/12/shen-du-xue-xi-gpu-li-yong-lu-di-wen-ti-fen-xi-zhuan/"/>
      <url>/2021/08/12/shen-du-xue-xi-gpu-li-yong-lu-di-wen-ti-fen-xi-zhuan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转载自：<a href="https://benpaodewoniu.github.io/2021/01/21/torch16/" target="_blank" rel="noopener">犀牛鸟的博客</a>,如有侵权请与本人联系：<a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a></p></blockquote><p>这个真的是值得人研究的事情，如果，<code>gpu</code> 利用率很低，那还不如 <code>cpu</code> 来的舒爽。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/qq_32998593/article/details/92849585" target="_blank" rel="noopener">深度学习PyTorch，TensorFlow中GPU利用率较低，CPU利用率很低，且模型训练速度很慢的问题总结与分析</a></li></ul><p>我会结合我自己的经验加上这篇博文来做一个总结！</p><p>在深度学习模型训练过程中，在服务器端或者本地<code>pc端</code>，输入<code>nvidia-smi</code>来观察显卡的<code>GPU内存占用率</code>（<code>Memory-Usage</code>），<code>显卡的GPU利用率</code>（<code>GPU-util</code>），然后采用<code>top</code>来查看<code>CPU</code>的线程数（<code>PID数</code>）和<code>利用率</code>（<code>%CPU</code>）。往往会发现很多问题，比如</p><ul><li>GPU内存占用率低</li><li>显卡利用率低</li><li>CPU百分比低等等</li></ul><h1 id="GPU内存占用率问题"><a href="#GPU内存占用率问题" class="headerlink" title="GPU内存占用率问题"></a>GPU内存占用率问题</h1><p>这往往是由于</p><ul><li><code>模型的大小</code></li><li><code>batch size</code>的大小</li></ul><p>来影响这个指标。</p><p>当你发下你的<code>GPU占用率</code>很小的时候，比如<code>40%</code>，<code>70%</code>，等等。</p><p>此时，如果你的网络结构已经固定，此时只需要改变<code>batch size</code>的大小，就可以尽量利用完整个<code>GPU</code>的内存。<code>GPU</code>的内存占用率主要是<code>模型的大小</code>，包括网络的宽度，深度，参数量，中间每一层的缓存，都会在内存中开辟空间来进行保存，所以模型本身会占用很大一部分内存。</p><p>其次是<code>batch size</code>的大小，也会占用影响内存占用率。<code>batch size</code>设置为<code>128</code>，与设置为<code>256</code>相比，内存占用率是接近于<code>2</code>倍关系。当你<code>batch size</code>设置为<code>128</code>，占用率为<code>40%</code>的话，设置为<code>256</code>时，此时模型的占用率约等于<code>80%</code>，偏差不大。所以在模型结构固定的情况下，尽量将<code>batch size</code>设置大，充分利用<code>GPU</code>的内存。（<code>GPU</code>会很快的算完你给进去的数据，主要瓶颈在<code>CPU的数据吞吐量</code>上面。）</p><h1 id="GPU利用率问题"><a href="#GPU利用率问题" class="headerlink" title="GPU利用率问题"></a>GPU利用率问题</h1><p>这个是<code>Volatile GPU-Util</code>表示，当没有设置好<code>CPU的线程数</code>时，这个参数是在反复的跳动的，<code>0%</code>，<code>20%</code>，<code>70%</code>，<code>95%</code>，<code>0%</code>。这样停息<code>1-2</code> 秒然后又重复起来。其实是<code>GPU</code>在等待数据从<code>CPU</code>传输过来，当从总线传输到<code>GPU</code>之后，<code>GPU</code>逐渐起计算来，利用率会突然升高，但是<code>GPU</code>的算力很强大，<code>0.5秒</code>就基本能处理完数据，所以利用率接下来又会降下去，等待下一个<code>batch</code>的传入。因此，这个<code>GPU利用率</code>瓶颈在<code>内存带宽</code>和<code>内存介质</code>上以及<code>CPU的性能</code>上面。最好当然就是换更好的四代或者更强大的内存条，配合更好的<code>CPU</code>。</p><p>另外的一个方法是，在<code>PyTorch</code>这个框架里面，数据加载<code>Dataloader</code>上做更改和优化，包括<code>num_workers</code>（线程数），<code>pin_memory</code>，会提升速度。解决好数据传输的带宽瓶颈和GPU的运算效率低的问题。在<code>TensorFlow</code>下面，也有这个加载数据的设置。</p><h2 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h2><pre><code>torch.utils.data.DataLoader(image_datasets[x],                            batch_size=batch_size,                             shuffle=True,                            num_workers=8,                            pin_memory=True)</code></pre><p>为了提高利用率，首先要将<code>num_workers</code>（线程数）设置得体，<code>4</code>,<code>8</code>,<code>16</code>是几个常选的几个参数。本人测试过，将<code>num_workers</code>设置的非常大，例如，<code>24</code>，<code>32</code>,等，其效率反而降低，因为模型需要将数据平均分配到几个子线程去进行预处理，分发等数据操作，设高了反而影响效率。</p><p>当然，线程数设置为<code>1</code>，是单个CPU来进行数据的预处理和传输给<code>GPU</code>，效率也会低。其次，当你的服务器或者电脑的内存较大，性能较好的时候，建议打开<code>pin_memory</code>打开，就省掉了将数据从<code>CPU</code>传入到缓存<code>RAM</code>里面，再给传输到<code>GPU</code>上；为<code>True</code>时是直接映射到<code>GPU</code>的相关内存块上，省掉了一点数据传输时间。</p><h2 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h2><pre><code>dataset = dataset.map(map_func=parse_fn, num_parallel_calls=FLAGS.num_parallel_calls)</code></pre><p>ps： <code>tensorflow</code> 的代码我没有试过</p><h1 id="CPU的利用率问题"><a href="#CPU的利用率问题" class="headerlink" title="CPU的利用率问题"></a>CPU的利用率问题</h1><p>很多人在模型训练过程中，不只是关注<code>GPU</code>的各种性能参数，往往还需要查看<code>CPU</code>处理的怎么样，利用的好不好。这一点至关重要。</p><p>但是对于<code>CPU</code>，不能一味追求超高的占用率。如图所示，对于<code>14339</code>这个程序来说，其<code>CPU</code>占用率为<code>2349%</code>（我的服务器是<code>32</code>核的，所以最高为<code>3200%</code>）。这表明用了<code>24核CPU</code>来加载数据和做预处理和后处理等。其实主要的<code>CPU</code>花在加载传输数据上。此时，来测量数据加载的时间发现，即使<code>CPU</code>利用率如此之高，其实际数据加载时间是设置恰当的<code>DataLoader</code>的<code>20倍</code>以上，也就是说这种方法来加载数据慢<code>20倍</code>。</p><p>当<code>DataLoader</code>的<code>num_workers=0</code>时，或者不设置这个参数，会出现这个情况。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://benpaodewoniu.github.io/images/torch/16_0.png" alt="img"></p><p>下面的数据可以看出，加载数据的实际是<code>12.8s</code>，模型<code>GPU</code>运算时间是<code>0.16s</code>，<code>loss反传</code>和更新时间是<code>0.48s</code>。此时，即使<code>CPU</code>为<code>2349%</code>，但模型的训练速度还是非常慢，而且，<code>GPU</code>大部分是时间是空闲等待状态。</p><pre><code>当 num_workers = 0 时，模型每个阶段的时间统计load data time: 12.8model process time is: 0.159loss backward and para update time : 0.47</code></pre><p>当我将<code>num_workers=1</code>时，出现的时间统计如下，<code>load data time</code>为<code>6.3</code>，数据加载效率提升<code>1</code>倍。且此时的<code>CPU利用率</code>为<code>170%</code>，用的<code>CPU</code>并不多，性能提升<code>1</code>倍。</p><pre><code>当 num_workers = 1 时，模型每个阶段的时间统计load data time: 6.33model process time is: 0.1244loss backward and para update time : 0.45</code></pre><p>此时，查看<code>GPU</code>的性能状态（我的模型是放在<code>1</code>,<code>2</code>,<code>3</code>号卡上训练），发现，虽然<code>GPU(1,2,3)</code>的内存利用率很高，基本上为<code>98%</code>，但是利用率为<code>0%</code>左右。表面此时网络在等待从<code>CPU</code>传输数据到<code>GPU</code>，此时<code>CPU</code>疯狂加载数据，而<code>GPU</code>处于空闲状态。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://benpaodewoniu.github.io/images/torch/16_1.png" alt="img"></p><p>由此可见，<code>CPU的利用率</code>不一定最大才最好。</p><p>对于这个问题，解决办法是，增加<code>DataLoader</code>这个<code>num_wokers</code>的个数，主要是增加子线程的个数，来分担主线程的数据处理压力，多线程协同处理数据和传输数据，不用放在一个线程里负责所有的预处理和传输任务。</p><p>我将<code>num_workers=8,16</code>都能取得不错的效果。此时用<code>top</code>查看<code>CPU</code>和线程数，如果我设置为<code>num_workers=8</code>，线程数有了<code>8</code>个连续开辟的线程<code>PID</code>，且大家的占用率都在<code>100%</code>左右，这表明模型的<code>CPU端</code>，是较好的分配了任务，提升数据吞吐效率。效果如下图所示，<code>CPU利用率</code>很平均和高效，每个线程是发挥了最大的性能。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://benpaodewoniu.github.io/images/torch/16_2.jpg" alt="img"></p><p>此时，在用<code>nvidia-smi</code>查看<code>GPU</code>的利用率，几块<code>GPU</code>都在满负荷，满<code>GPU</code>内存，满<code>GPU</code>利用率的处理模型，速度得到巨大提升。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://benpaodewoniu.github.io/images/torch/16_3.png" alt="img"></p><p>上图中可以看见，<code>GPU</code>的内存利用率最大化，此时是将<code>batch size</code>设置的较大，占满了<code>GPU的内存</code>，然后将<code>num_workers=8</code>，分配多个子线程，且设置<code>pin_memory=True</code>，直接映射数据到<code>GPU</code>的专用内存，减少数据传输时间。<code>GPU</code>和<code>CPU</code>的数据瓶颈得到解决。整体性能得到权衡。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对上面的分析总结一下。</p><p>第一是增加<code>batch size</code>，增加<code>GPU</code>的内存占用率，尽量用完内存，而不要剩一半，空的内存给另外的程序用，两个任务的效率都会非常低。</p><p>第二，在数据加载时候，将<code>num_workers</code>线程数设置稍微大一点，推荐是<code>8,16</code>等，且开启<code>pin_memory=True</code>。不要将整个任务放在主进程里面做，这样消耗<code>CPU</code>，且速度和性能极为低下。</p><p>另外，我在跑我自己代码的时候，发现，耗费时间最多的地方时数据的预处理</p><p>数据预处理</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TrainDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        归一化、数据处理、等等        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用的过程中</p><pre class="line-numbers language-python"><code class="language-python">train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>trainDataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>每一次 <code>for batch_idx, (data, target) in enumerate(train_loader)</code> 都要重新来处理一边数据，比如归一化等，所以，很麻烦。</p><p>所以，我的做法是提前将数据处理好，将处理好的数据放在 <code>csv</code>等格式的文件中，然后直接读取文件就好了。我的代码提升了 <code>50</code> 倍。</p><h1 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h1><ul><li><pre class="line-numbers language-shell"><code class="language-shell">top<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看 <code>cpu</code></li><li>实时查看你的<code>CPU</code>的进程利用率，这个参数对应你的<code>num_workers</code>的设置</li></ul></li><li><pre class="line-numbers language-shell"><code class="language-shell">watch -n 0.5 nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>每<code>0.5秒</code>刷新并显示显卡设置</li><li>实时查看你的<code>GPU</code>的使用情况，这是<code>GPU</code>的设置相关。这两个配合好。包括<code>batch_size</code>的设置。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> GPU </tag>
            
            <tag> CPU </tag>
            
            <tag> 加速 </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战系列之知乎GPU</title>
      <link href="/2021/08/12/pa-chong-shi-zhan-xi-lie-zhi-zhi-hu-gpu/"/>
      <url>/2021/08/12/pa-chong-shi-zhan-xi-lie-zhi-zhi-hu-gpu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下内容均爬虫获得，如有侵权，请联系博主lry89757，邮箱： <a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a></p></blockquote><h1 id="实验室一块GPU都没有怎么做深度学习？"><a href="#实验室一块GPU都没有怎么做深度学习？" class="headerlink" title="实验室一块GPU都没有怎么做深度学习？"></a>实验室一块GPU都没有怎么做深度学习？</h1><p>2021-02-23阅读 2500</p><p>这个问题，5年前我也想问。</p><p>还记得 CVPR 2015 开完会回来，感觉大家都在讨论 deep learning，convolutional neural network，当时觉得应该试试。我就用网上开源的 LetNet 在笔记本上训练了一下我们当时自己采集的数据集，结果完爆我们费尽心思手动设计的传统方法。我当时就鼓动我老板，让她给实验室买个带 GPU 的机器。结果她语重心长地说: “你看实验室这些旧电脑，我之前给每一个 PhD 学生都配一台电脑，结果没过多长时间，大家都不用了，只用自己的笔记本，所以不要把钱花在硬件上”。我竟无言以对。。。</p><p>但是 Research 还是要做，我就一狠心买了个 Titan-Z GPU，大概花了博士一个月的工资，然后就有了下面这张图：</p><p><a href="https://imgtu.com/i/fwS3HU" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/12/fwS3HU.jpg" alt="fwS3HU.jpg"></a><br>](<a href="https://imgtu.com/i/fwSJN4" target="_blank" rel="noopener">https://imgtu.com/i/fwSJN4</a>)</p><p><a href="https://imgtu.com/i/fwSyUe" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/12/fwSyUe.jpg" alt="fwSyUe.jpg"></a></p><p>那时候还没有 eGPU，我就自己搞了个解决方案，用一个外置台式机电源带动 thunderbolt to PCIe 的转接器。有了这些“装备”之后，我就开始了调参的不归路。</p><p>比较早入坑，16 年用 MatConvNet 复现了一下 ResNet zhanghang1989/ResNet-Matconvnet，然后用 ResNet 提了下 feature，比较容易水 paper。在 NVIDIA 实习的时候，听说可以自己写 proposal 向 NVIDIA 申请免费的 GPU，之后就每年都申请一块，直到毕业 (链接：GPU Grant Application)。在发了几篇 deep learning 的 paper 之后，我老板也开始换方向了，而且给组里的学弟们买了8卡的GPU Server（当时是我毕业前帮老板挑的机器，可惜自己没有用到）。</p><p>很难想象，当初如果自己没有自费买 GPU，现在我会在哪里，在做什么。如果客观条件不好，尽量想办法克服一下，机会要好好把握</p><h2 id="作者：孔祥勇-https-www-zhihu-com-question-299434830-answer-1138597471"><a href="#作者：孔祥勇-https-www-zhihu-com-question-299434830-answer-1138597471" class="headerlink" title="作者：孔祥勇 https://www.zhihu.com/question/299434830/answer/1138597471"></a><strong>作者：孔祥勇</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1138597471" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1138597471</a></strong></h2><p>我们学科，学校都一般，大部分老师都没经费没这些硬件的。</p><p>我自己实验室是一点点积累买GPU的，拿不到国家课题就做企业课题，然后用来给学生买GPU，电脑，内存，磁盘，保证本科+研究生20多人的计算能力。AI计算的话：一台双卡2080ti主力计算工作站，4台2080或者2070S的GPU，研究生人均一台，本科一个团队一台。平常跑不满，如果有外面合作的学生也会借给他们用，如果有交集，可以科研论文合作。</p><p>下一步打算：对合作型联合的热爱科研的学生，如果自己导师没有出论文经费的我会帮他们出。当然条件也是要求：他除了要完成自己的论文也要多做些工作，如果愿意的话，支持下学生也没问题。如果有这方面需求愿意合作，可以私信我。</p><p>我们主要做医学人工智能，通用AI在技术上一样的，不限制课题。</p><h2 id="作者：时间旅客-https-www-zhihu-com-question-299434830-answer-1138460434"><a href="#作者：时间旅客-https-www-zhihu-com-question-299434830-answer-1138460434" class="headerlink" title="作者：时间旅客 https://www.zhihu.com/question/299434830/answer/1138460434"></a><strong>作者：时间旅客</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1138460434" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1138460434</a></strong></h2><p>实验室没有GPU，也不想花钱租GPU，就只能用CPU了。CPU比GPU慢很多，所以复杂的数据量大的研究是没法做了。那么有没有数据量小，且有一些意义的研究呢？有。</p><p><strong>建议研究一些可解释性的相关问题。</strong></p><p>举一个卷积神经网络的例子，比如这个问题：</p><p>能否对卷积神经网络工作原理做一个直观的解释？<a href="https://www.zhihu.com/question/39022858" target="_blank" rel="noopener">https://www.zhihu.com/question/39022858</a></p><p>大家都是从滤波器的角度解释卷积核，那么怎么能知道是否说的是对的呢？是不是可以取100张猫和100张狗，模型设置为一层feature map为10的3*3卷积+全局pool，训练到过拟合。看看哪几个维度会预测到猫，哪几个维度会预测到狗，再看看这10个卷积核长什么样，分析一下原图过了这些卷积核到底获得了什么特征。</p><p>再比如，CNN在经过图像旋转、平移、放缩等增强方法之后是可以具有相应的不变性的。那么它到底是怎么获得这种不变性的呢？是利用不同的feature map映射到最后输出向量中不同的维度，还是最后会映射到相同维度呢？</p><p>再进一步，行人重识别任务中有很多用度量学习的方法，两张差异很大的图片过同一个模型可以得到比较近似的向量，那么这些模型是怎么获取特征并怎么映射的呢？</p><p>这些问题其实是我一直思考没想出答案，但也没去做实验的。因为我有GPU，平时搭模型、调参的工作做多了，就没有太大动力去研究这些有意思的问题了。</p><h2 id="作者：莫笑傅立叶-https-www-zhihu-com-question-299434830-answer-1693087823"><a href="#作者：莫笑傅立叶-https-www-zhihu-com-question-299434830-answer-1693087823" class="headerlink" title="作者：莫笑傅立叶 https://www.zhihu.com/question/299434830/answer/1693087823"></a><strong>作者：莫笑傅立叶 <a href="https://www.zhihu.com/question/299434830/answer/1693087823" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1693087823</a></strong></h2><p>1.兄弟，赶紧催着老师买一块。</p><p>\2. 要么看老师和计算机学院老师关系如何，直接住对方实验室去。</p><p>\3. 我用过好多网上平台，滴滴云还行，有大企业背书又便宜，还有好多送的活动。</p><p>\4. colab就算了。</p><h2 id="作者：snowhou-https-www-zhihu-com-question-299434830-answer-1231487151"><a href="#作者：snowhou-https-www-zhihu-com-question-299434830-answer-1231487151" class="headerlink" title="作者：snowhou https://www.zhihu.com/question/299434830/answer/1231487151"></a><strong>作者：snowhou</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1231487151" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1231487151</a></strong></h2><p>你这一块卡没有做深度学习不太现实，<strong>最好说服你老师最好买几张卡(1080ti)以上</strong>，毕竟也不是你一个人在用。这是其实是最划算的方式，在网上无论是免费还是付费的资源，终究不是长远之计，而且有一定的使用限制。<strong>争取不到卡的话还是乘早弃坑吧，深度学习不用大量的卡”喂”，很难研究出什么东西。</strong></p><p>[<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/12/fwSJN4.jpg" alt="fwSJN4.jpg"></p><p>分享下我自己的”卡”路，你可以参考下我的”贫民”历程。</p><p>一开始有<strong><em>4块1080\</em></strong>，和师兄们一起用，当时刚开始入门，也就跑下 cs231n 和当时还是caffe 版本的 R-CNN，电脑系统太老了caffe总是出问题，也在网上用过服务器(国内付费的，谷歌云的300美金，Colab 等)，也就随便跑了跑。后来随着 detectron 等的开源，发现 1080 显存太小了，而且速度太慢，只能跑 VOC，跑 COCO 不太现实，一度很奔溃，想着是不是要换个方向。</p><p>以后对老师软磨硬泡，加了台 <strong>双2080ti</strong>  的机器，终于可以跑 COCO 了，虽然训练时间还是略长，不过已经在接受范围内了。</p><p>后来机缘巧合下发现了些免费的平台(百度 AIStudio等)，第一次用到 <strong>V100</strong> ，爽过吸大麻。多注册了几个账户，终于不在担心算力的问题，就这样开始了升级打怪之路，跑跑论文代码，打打比赛，好多任务都可以并行展开了，这时候就相当舒服了，没有了算力的约束，成长起来也是很快的。假如没有了这些免费平台，怕不是要在入门的地方原地踏步了。</p><p>其实缺少算力还可以去企业实习，不过如果基本的 1080ti 都用不上，大概门都入不了，公司估计也进不去。所以还是最开始的话，<strong>尽早联合你同届同学说服老师买卡，不然还是乘早弃坑。自己学(无人指导) + 没卡 = 天坑 ️，切记！</strong></p><h2 id="作者：艾力克斯Alex-https-www-zhihu-com-question-299434830-answer-1016932439"><a href="#作者：艾力克斯Alex-https-www-zhihu-com-question-299434830-answer-1016932439" class="headerlink" title="作者：艾力克斯Alex https://www.zhihu.com/question/299434830/answer/1016932439"></a><strong>作者：艾力克斯Alex</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1016932439" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1016932439</a></strong></h2><p>上学期做的computional vision  远程连接学校linux装不了tensorflow，Google Colab尝试了两天也没设置好</p><p>然后心一横 我就用我的四核8GBMacBook慢慢跑吧 train一次一天 validate 6个小时，我就这样坚持了一个月把作业写完了。</p><h2 id="作者：视学算法-https-www-zhihu-com-question-299434830-answer-1071679101"><a href="#作者：视学算法-https-www-zhihu-com-question-299434830-answer-1071679101" class="headerlink" title="作者：视学算法 https://www.zhihu.com/question/299434830/answer/1071679101"></a><strong>作者：视学算法</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1071679101" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1071679101</a></strong></h2><p>对初学者来说CPU足以。以下几点：</p><p>1、先把CPU利用好：其实对于很多初学者来说能把OpenMPI配置好，多线程利用起来，C底层程序用Intel MKL编译(需要Intel CPU)，基本上可以带来的效率提升可以近似于用GPU。</p><p>2、然后利用好你自己的时间: 貌似现在道听途说一般的结论是GPU比CPU提速10倍左右。大家想想，训练一个模型，本来要CPU跑10个小时，结果买了GPU只用1一个小时，但是节约来的9个小时里面一半浪费在了看知乎上（说你呢！），另一半浪费在了刷微信上。本屌最近跑些NLP方面的东西，东西不是特别大，Ubuntu笔记本装了OpenMPI可以四个线程一起跑，也比单核CPU快一倍左右，基本上白天先把模型设置好，跑上3~4个Epoch看看效果，然后在晚上睡觉之前开始跑个20-30个循环，第二天早上怎么也都好了。</p><p>3、最后设计好数据结构: 另外其实数据预处理的好，用简便的方法存在内存里面，也是可以提升不少效率的。</p><h2 id="作者：runner-time-https-www-zhihu-com-question-299434830-answer-1099500820"><a href="#作者：runner-time-https-www-zhihu-com-question-299434830-answer-1099500820" class="headerlink" title="作者：runner time https://www.zhihu.com/question/299434830/answer/1099500820"></a><strong>作者：runner time</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1099500820" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1099500820</a></strong></h2><p>实验室连显卡都没有就说要搞深度学习？那我看你们导师也是脑门一拍，然后随手搞本教科书胡搞乱搞，你觉得这样下去能搞出什么名堂？</p><p>不如买块游戏显卡打游戏去。</p><p>哦，其实游戏显卡也是可以搞深度学习的，图灵架构显卡的CUDA计算力高达7.0，只要1500元一块，你值得拥有！</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> GPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音频可视化：采样、频率和傅里叶变换（转）</title>
      <link href="/2021/08/11/yin-pin-ke-shi-hua-cai-yang-pin-lu-he-fu-li-xie-bian-huan/"/>
      <url>/2021/08/11/yin-pin-ke-shi-hua-cai-yang-pin-lu-he-fu-li-xie-bian-huan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>真是金子一样的文章！我觉得这一篇文章写的真是太有水平了！很感谢这样良心乐于分享的作者。  </p><p>本博客转载自<a href="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/" target="_blank" rel="noopener">cjting</a>, 如有侵权，请立刻联系博主<a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a>.</p></blockquote><h1 id="音频可视化：采样、频率和傅里叶变换"><a href="#音频可视化：采样、频率和傅里叶变换" class="headerlink" title="音频可视化：采样、频率和傅里叶变换"></a>音频可视化：采样、频率和傅里叶变换</h1><p>2021.08.07</p><p>[TOC]</p><p>印象中使用的第一个 PC 音乐播放器是「千千静听」，大概是 08 年左右。我还清楚地记得它自带了一首梁静茹的歌「Love is everything」，动听的旋律至今萦绕耳旁。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/qianqian.jpeg" alt="img"></p><p>千千静听的左上角有一组随着音乐跳动的柱子，我想大家都习以为常了，很多播放器都有这功能。但是其实有没有想过，这是怎么实现的？</p><p>要理解这个问题，我们首先要理解声音是什么。</p><h2 id="波"><a href="#波" class="headerlink" title="波"></a>波</h2><p>中学物理有介绍过，声音是由物体振动产生的，这个振动经由介质传导到我们的耳朵中引起耳膜振动从而让我们听见声音。</p><p>我们可以用波形来描述振动，其中横轴是时间，纵轴是振动的位移，也就是离开原点的距离。</p><p>振动的两个关键属性是频率和振幅，频率是指一秒钟振动多少次，对应于音高，频率越高声音越尖锐刺耳。</p><p>振幅则表示最大的位移值，对应于音量，振幅越大声音越响。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/200hz.png" alt="img"></p><p>上图是用 <a href="https://matplotlib.org/" target="_blank" rel="noopener">matplot</a> 绘制的一个正弦波，可以看出在 0.01s 内振动了 2 次，因此频率是 200，振幅是 1。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">sin_wave</span><span class="token punctuation">(</span>hz<span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">*</span> hz <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Time"</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>sin_wave<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种最简单的波形对应的声音叫做 pure tone，顾名思义，非常的简单而且纯粹。</p><p>下面是用 <a href="https://www.scipy.org/" target="_blank" rel="noopener">scipy</a> 生成的 200hz 的声音，大家可以听听看。</p><p><audio controls style="width: 680px; margin: 16px 0px;"></audio></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token punctuation">.</span>io<span class="token punctuation">.</span>wavfile <span class="token keyword">as</span> wavSAMPLE_RATE <span class="token operator">=</span> <span class="token number">44100</span>DURATION <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">write_wav</span><span class="token punctuation">(</span>hz<span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> DURATION<span class="token punctuation">,</span> SAMPLE_RATE <span class="token operator">*</span> DURATION<span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  tone <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">*</span> hz <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>  normalized_tone <span class="token operator">=</span> np<span class="token punctuation">.</span>int16<span class="token punctuation">(</span><span class="token punctuation">(</span>tone <span class="token operator">/</span> tone<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">32767</span><span class="token punctuation">)</span>  wav<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token string">"{hz}hz.wav"</span><span class="token punctuation">,</span> SAMPLE_RATE<span class="token punctuation">,</span> normalized_tone<span class="token punctuation">)</span>write_wav<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是 800hz 的声音，可以明显感觉到，声音更加尖锐了。</p><p><audio controls style="width: 680px; margin: 16px 0px;"></audio></p><p>现实世界中我们听到的声音不会是 pure tone，而是各种 pure tone 叠加的结果。</p><p>下图中蓝色是 200hz，黄色是 800hz，而绿色则是它们叠加的结果，已经不再是一个 pure tone 了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/200-add-800hz.png" alt="img"></p><p>下面是绿色曲线听起来的效果。</p><p><audio controls style="width: 680px; margin: 16px 0px;"></audio></p><p>总结一下：</p><ul><li>我们可以用一个波形图来表示声音，其中 X 轴是时间，Y 轴是振动的位移</li><li>最简单的正弦波对应的声音叫做 pure tone</li><li>日常中我们听到的声音都是各种 pure tone 叠加的结果</li></ul><p>Tip:</p><p>如果想了解一点乐理，<a href="https://www.lightnote.co/music-theory/sound-waves" target="_blank" rel="noopener">LITENOTE</a> 非常不错。</p><p>它的网页做得很棒，通过互动的形式讲述基本的乐理知识，包括音阶、和弦，十二平均律等。</p><h2 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h2><p>因为声音是一个随时间变化的连续函数，任意一段间隔内都有无穷多个值，而无穷多的数据是没办法存储在计算机中的。</p><p>想要存储，我们就需要将它离散化变成离散序列，具体的方法就是采样，使用固定的间隔对函数进行求值。</p><p>这是原始的声音。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/origin.png" alt="img"></p><p>这是采样后的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/sampled.png" alt="img"></p><p>通过采样，我们将一个无尽序列变成了一个有限序列，其中每一个值叫做样本，这样就可以方便地在计算机中存储了。</p><p>采样的关键参数有两个，分别是采样频率和采样深度。</p><p>采样频率是指每秒钟采样多少次，很明显，采样频率越高，样本越多，数据量越大，同时也更接近原始的声音。</p><p>采样深度是指用多少比特去存储采样得到的值，使用的比特越多，还原得到的声音越细腻，和图片的色彩深度是一个道理。</p><p>假设我们用 16bit 采样深度和 44100 的采样频率，那么一段一秒钟的声音就变成了一个 44100 大小的 int16 数组。</p><p>得到采样值数组以后，接下来如何存储这个数组就是编码的范畴了。我们可以直接存，也可以采用某种算法压缩以后再存。各种各样的办法，对应着各种各样的音频格式，比如 MP3, AAC, WAV 等。</p><p>这其中 AAC 和 MP3 格式是有损的，也就是存储以后再读出来，得到的样本和原始的会有一些区别，但这些区别很细微，可以忽略。有损的特点就是在基本不影响最终播放效果的情况下，大幅度减少文件体积。</p><p>而 WAV 则是无损的，输入是什么，读出来就是什么，缺点自然是体积要大很多。</p><p>我们可以通过 scipy 来读取 WAV 音频。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token punctuation">.</span>io<span class="token punctuation">.</span>wavfile <span class="token keyword">as</span> wavrate<span class="token punctuation">,</span> all_samples <span class="token operator">=</span> wav<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"xxx.wav"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rate<span class="token punctuation">,</span> len<span class="token punctuation">(</span>all_samples<span class="token punctuation">)</span><span class="token punctuation">,</span> all_samples<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 44100 10639873 int16</span><span class="token comment" spellcheck="true"># 上面分别是：采样率，样本总数，以及样本值的类型</span><span class="token comment" spellcheck="true"># int16 说明每一个样本是 16bit 整数</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_samples<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [-41 -51 -49 -41 -28 -15 -20 -33 -32 -38 -54 -54 -44 -30  -8  10  11   2</span><span class="token comment" spellcheck="true"># -14 -36]</span><span class="token comment" spellcheck="true"># 可以看到样本就是一组数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，采样频率是 44100，一共有 10639873 个样本，使用 int16 进行存储，计算可知这首歌的时间是 241 秒。</p><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><p>给定一个 200hz 的波形和一个 800hz 的波形，计算它们叠加以后的结果非常简单，没有任何难度。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/200-add-800hz.png" alt="img"></p><p>但是，如果给到叠加以后的结果呢？</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/mixed.png" alt="img"></p><p>能看出上面的绿色曲线是 200hz+800hz 叠加得到的吗？完全看不出来，甚至，这样的逆推真的可行吗？还是说和永动机一样在原理上就是不可行的？</p><p>答案是可行的，通过傅里叶变换，我们可以将一个复合波形拆解为构成它的简单波形。</p><p>想想都觉得不可思议，这是怎么做到的？傅里叶又是怎么想到的？不得不说十八世纪的法国数学家傅里叶是一个天才，让人仰望。</p><p>Tip: 3Blue1Brown 有一个视频介绍傅里叶变换的原理，非常棒：<a href="https://www.youtube.com/watch?v=spUNpyF58BY" target="_blank" rel="noopener">形象的介绍：什么是傅里叶变换？</a></p><p>接下来我们来看看怎样通过傅里叶变换来拆解复合波形。</p><p>我们可以认为傅里叶变换是一个函数，它的输入为 N 个实数，代表采样值，输出为 N 个复数，代表不同频率的分量，这里我们忽略复数的实部和虚部，只关心它的模，也就是绝对值。</p><p>Tip: 这里关于傅里叶变换的说法并不完整，比如傅里叶变换的输入也可以是复数。但是对我们来说理解到这一层面就够了。如果想要深入研究，可以去学习数字信号处理相关的课程。</p><p>我们使用 scipy 来实际进行一下傅里叶变换。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>fft <span class="token keyword">import</span> fft<span class="token punctuation">,</span> fftfreq<span class="token comment" spellcheck="true"># 这是即将进行变换的采样值: [0, 1, 2, 3, 4, 5, 6, 7]</span>samples <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这是傅里叶变换的结果</span>y <span class="token operator">=</span> fft<span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 变换结果为 8 个复数</span><span class="token comment" spellcheck="true"># (28-0j)</span><span class="token comment" spellcheck="true"># (-3.9999999999999996+9.65685424949238j)</span><span class="token comment" spellcheck="true"># (-4+4j)</span><span class="token comment" spellcheck="true"># (-4+1.6568542494923797j)</span><span class="token comment" spellcheck="true"># (-4-0j)</span><span class="token comment" spellcheck="true"># (-4-1.6568542494923797j)</span><span class="token comment" spellcheck="true"># (-4-4j)</span><span class="token comment" spellcheck="true"># (-3.9999999999999996-9.65685424949238j)</span><span class="token comment" spellcheck="true"># x 是上面每个结果对应的频率</span><span class="token comment" spellcheck="true"># 这里 fftfreq 函数的第一个参数为样本数量</span><span class="token comment" spellcheck="true"># 第二个参数为 采样率的 倒数，我们假定采样率为 8</span>x <span class="token operator">=</span> fftfreq<span class="token punctuation">(</span>len<span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [ 0.  1.  2.  3. -4. -3. -2. -1.]</span><span class="token comment" spellcheck="true"># 这里意味着 y[0] 对应的频率是 0，y[1] 对应的频率是 1</span><span class="token comment" spellcheck="true"># 负数频率是什么含义？我们可以不管，忽略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码我们构造了 8 个数字进行傅里叶变换，并假定这组样本是使用采样率 8 进行采样得到的。</p><p>变换的结果是 8 个复数，这 8 个复数对应 8 个频率，我们可以看出，正频率和负频率对应的变换结果是一样的，也就是变换后的结果是对称的。</p><p>上面得到的结果意义不大，因为输入没什么意义。现在我们使用傅里叶变换处理一下 200hz+800hz 叠加后的波形，看看是否能还原回 200hz 和 800hz。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">import</span> figure<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>fft <span class="token keyword">import</span> fft<span class="token punctuation">,</span> fftfreqfigure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>DURATION <span class="token operator">=</span> <span class="token number">0.01</span>SAMPLE_RATE <span class="token operator">=</span> <span class="token number">44100</span><span class="token keyword">def</span> <span class="token function">gen_sine_wave</span><span class="token punctuation">(</span>freq<span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> DURATION<span class="token punctuation">,</span> int<span class="token punctuation">(</span>DURATION <span class="token operator">*</span> SAMPLE_RATE<span class="token punctuation">)</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">*</span> freq <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>  <span class="token keyword">return</span> yhz200 <span class="token operator">=</span> gen_sine_wave<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>hz800 <span class="token operator">=</span> gen_sine_wave<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 叠加后的采样数据</span><span class="token comment" spellcheck="true"># 这里每个样本不是 int16，而是 float，无关紧要</span>total <span class="token operator">=</span> hz200 <span class="token operator">+</span> hz800y <span class="token operator">=</span> fft<span class="token punctuation">(</span>total<span class="token punctuation">)</span>x <span class="token operator">=</span> fftfreq<span class="token punctuation">(</span>len<span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> SAMPLE_RATE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 此时横轴是频率，纵轴是该频率的分量</span><span class="token comment" spellcheck="true"># 使用 np.abs 计算复数的模</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图中我们可以看出，首先输出结果是左右对称的，我们忽略掉负频率部分，只关注正频率。</p><p>其次，傅里叶变换告诉我们该输入信号由 2 个频率组成，程序运行时鼠标放上去可以看出是 200 和 800。也就是说，通过傅里叶变换，我们将复合波形拆解为了简单波形。</p><p>或者说，通过傅里叶变换，我们将一个信号拆解为了一组不同频率的正弦波，将它从时域变换到了频域。信号还是这个信号，只不过换个角度去看它。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/transform.png" alt="img"></p><p>总结一下：</p><ul><li>傅里叶变换是一个函数，输入一串数字代表样本值，输出一串复数代表频率分量</li><li>每个数字具体代表的频率可以根据样本数量和采样频率计算得知</li><li>我们不关心复数的方向，我们只关心复数的模</li><li>傅里叶输出的结果是左右对称的，因此只有一半的信息有价值</li></ul><p>因为输出结果是对称的，只有一半的信息有价值，因此有一个变体叫做 <code>rfft</code>，只返回一半的信息，计算速度可以更快一些。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>fft <span class="token keyword">import</span> rfft<span class="token punctuation">,</span> rfftfreqSAMPLE_RATE <span class="token operator">=</span> <span class="token number">8</span>samples <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 此时 x 和 y 都是 5 个值</span>y <span class="token operator">=</span> rfft<span class="token punctuation">(</span>samples<span class="token punctuation">)</span>x <span class="token operator">=</span> rfftfreq<span class="token punctuation">(</span>len<span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> SAMPLE_RATE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># y[0] 表示频率 0 的分量</span><span class="token comment" spellcheck="true"># y[1] 表示频率 1 的分量</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0. 1. 2. 3. 4.]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 和之前 fft/fftfreq 的输出对比，可以发现结果是一样的，只不过去掉了对称的冗余信息</span><span class="token comment" spellcheck="true"># (28+0j)</span><span class="token comment" spellcheck="true"># (-3.9999999999999996+9.65685424949238j)</span><span class="token comment" spellcheck="true"># (-4+4j)</span><span class="token comment" spellcheck="true"># (-4+1.6568542494923797j)</span><span class="token comment" spellcheck="true"># (-4+0j)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="音频可视化"><a href="#音频可视化" class="headerlink" title="音频可视化"></a>音频可视化</h2><p>到了这里所有实现音频可视化所需要的知识都备齐了。</p><p>首先我们可以猜到，随音乐跳动的每个柱子，对应的是一个频率或一组频率，而柱子的高度则是频率的分量大小，这两个信息傅里叶变换都能给到。</p><p>现在剩下的问题则是输入是什么？我们不可能把一首歌曲的所有样本作为输入进行傅里叶变换，如果这样做，我们只能得到一份频率数据。</p><p>我们希望得到的频率数据随着音乐在变化，因此这里要选择一个窗口大小（FFT_SIZE），比如 2048。随着音乐的播放，我们每次都从当前播放位置选择 2048 个样本然后进行傅里叶变换。</p><p>现在我们的初步音频可视化方案就确定了：</p><ul><li>解析音频文件得到 allSamples</li><li>每次绘图时，从当前 sample 开始选择 FFT_SIZE 个 sample</li><li>对这些 sample 进行傅里叶变换</li><li>对变换得到的复数求模</li><li>把结果变换到 0 ~ 1 然后绘图</li></ul><p>接下来我们用 Web 来实现一个简单的音频可视化工具。</p><p>首先，解析音频文件得到 allSamples 我们可以使用 WebAudio 的 API。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 得到某个音频文件的二进制数据</span><span class="token keyword">const</span> ab <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"xxx.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 新建 WebAudio context</span><span class="token keyword">const</span> audioCtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AudioContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 解析 arrayBuffer</span><span class="token keyword">const</span> audioBuffer <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span><span class="token function">decodeAudioData</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>audioBuffer<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// AudioBuffer {length: 10639872, duration: 241.2669387755102, sampleRate: 44100, numberOfChannels: 2}</span><span class="token comment" spellcheck="true">//  duration: 241.2669387755102</span><span class="token comment" spellcheck="true">//  length: 10639872</span><span class="token comment" spellcheck="true">//  numberOfChannels: 2</span><span class="token comment" spellcheck="true">//  sampleRate: 44100</span><span class="token comment" spellcheck="true">// [[Prototype]]: AudioBuffer</span><span class="token comment" spellcheck="true">// 一般来说音频都有多个声道，用于立体声播放</span><span class="token comment" spellcheck="true">// 这里我们选第一个声道就可以了</span><span class="token keyword">const</span> allSamples <span class="token operator">=</span> audioBuffer<span class="token punctuation">.</span><span class="token function">getChannelData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// allSamples 就是我们要的样本数组，每一个样本值是浮点数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allSamples<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Float32Array(10) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我们使用 <code>requestAnimationFrame</code> 来进行绘制。</p><p>每次绘制的时候，需要先获取当前的播放位置。audioBuffer 中有音频的总时间，通过 <code>audioCtx.currentTime</code> 我们可以得知当前的播放时间，两个相除便是播放位置。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 用户点击播放时</span><span class="token keyword">const</span> onPlay <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 记录下播放的开始时间</span>  <span class="token keyword">const</span> startTime <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span>currentTime  <span class="token keyword">const</span> draw <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 目前播放了多少时间 (seconds)</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span>currentTime <span class="token operator">-</span> startTime    <span class="token comment" spellcheck="true">// 播放的进度是多少</span>    <span class="token keyword">const</span> per <span class="token operator">=</span> cur <span class="token operator">/</span> audioBuffer<span class="token punctuation">.</span>duration    <span class="token keyword">const</span> startIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>allSamples<span class="token punctuation">.</span>length <span class="token operator">*</span> per<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 从 startIndex 开始切割 FFT_SIZE 个 sample 出来</span>    <span class="token comment" spellcheck="true">// 此时要进行傅里叶变换的 samples 就准备好了</span>    <span class="token keyword">const</span> samples <span class="token operator">=</span> allSamples<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> startIndex <span class="token operator">+</span> FFT_SIZE<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是傅里叶变换了，这里我找了一下，JS 相关的库很少，不过验证下来 <a href="https://github.com/indutny/fft.js/" target="_blank" rel="noopener">fft.js</a> 是可用的。</p><p>Tip: 不得不说科学计算还是 Python 方便，numpy 和 scipy 真的太好用了。</p><p>经过 FFT 以后，我们得到了 1025 个复数，对这些复数取模，得到 1025 个实数。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// JS 没有复数，我们自行定义一个</span><span class="token keyword">class</span> <span class="token class-name">Complex</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>real<span class="token punctuation">,</span> imag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> real    <span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">=</span> imag  <span class="token punctuation">}</span>  <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> rfft <span class="token operator">=</span> <span class="token punctuation">(</span>samples<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FFTJS</span><span class="token punctuation">(</span>samples<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token keyword">const</span> out <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">createComplexArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> N <span class="token operator">=</span> samples<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>  f<span class="token punctuation">.</span><span class="token function">realTransform</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> samples<span class="token punctuation">)</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span>out<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 此时我们得到了一组实数</span><span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">rfft</span><span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tip:</p><p>其实这里还有一个过程，我们不会直接把 samples 进行 FFT 变换，而是会先应用一个 Window Function，这样做的目的如果感兴趣可以自行了解。</p><p>对于我们来说，Window Function 就是一个 <code>number[] -&gt; number[]</code> 的函数。</p><p>接下来就是将这些数字变换到 0 ~ 1 区间，这一步比较简单，观察一下最大最小值做个线性变换就行了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> y<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">80</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有了一组 0 ~ 1 的数字以后，我们就可以使用 Canvas 进行绘图了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> W <span class="token operator">=</span> <span class="token number">800</span> <span class="token comment" spellcheck="true">// canvas width</span><span class="token keyword">const</span> H <span class="token operator">=</span> <span class="token number">600</span> <span class="token comment" spellcheck="true">// canvas height</span><span class="token keyword">const</span> draw <span class="token operator">=</span> <span class="token punctuation">(</span>spectrum<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> W<span class="token punctuation">,</span> H<span class="token punctuation">)</span>  <span class="token keyword">const</span> barWidth <span class="token operator">=</span> W <span class="token operator">/</span> spectrum<span class="token punctuation">.</span>length  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> spectrum<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> v <span class="token operator">=</span> spectrum<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">const</span> x <span class="token operator">=</span> i <span class="token operator">*</span> barWidth    <span class="token keyword">const</span> height <span class="token operator">=</span> v <span class="token operator">*</span> H    <span class="token keyword">const</span> y <span class="token operator">=</span> H <span class="token operator">-</span> height    ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> barWidth<span class="token punctuation">,</span> height<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们来看看结果，打开 <a href="http://cjting.me/audio-vis-demo/" target="_blank" rel="noopener">audio-vis-demo</a>，选择一个音频文件，取消勾选 “Smooth”，点击播放，然后我们会发现，柱子可以正常地绘制出来，但是它们”跳跃“得非常厉害，不够平稳。</p><p>这是因为我们漏了一步，叫做 Time smoothing。</p><p>具体的机理我并不理解，所以就不再说明了，对我们的目标来说，这部分当做黑盒处理就可以了。</p><p>这里我想说明一下，在我看来，学习任何知识都是分层的，学到自己感兴趣的层级即可，对下一层有一个定性的认识，需要的时候可以再去细究。</p><p>我们可以认为 Time smoothing 就是对当前的 result 和上一个 result 进行某种操作，然后输出一组值。</p><p>下面是具体的算法，代码非常简单，但是效果非常明显。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> smoothConstantDown <span class="token operator">=</span> <span class="token number">0.08</span><span class="token keyword">const</span> smoothConstantUp <span class="token operator">=</span> <span class="token number">0.8</span><span class="token keyword">if</span><span class="token punctuation">(</span>lastY <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lastY<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lastY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      lastY<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> smoothConstantDown <span class="token operator">+</span> lastY<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> smoothConstantDown<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      lastY<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> smoothConstantUp <span class="token operator">+</span> lastY<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> smoothConstantUp<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  lastY <span class="token operator">=</span> y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在 Demo 中勾选上 “Smooth” 启用这个算法，然后就会发现图像马上变得不再跳动了，整体结果已经和其他播放器很接近了。</p><p>注意，这里我们是为了学习底层的步骤和细节，所以很多操作都自己来做。如果真的需要开发相关功能，使用 WebAudio 的 API 是更合理的选择。</p><p>我在 <a href="http://cjting.me/audio-vis-demo/" target="_blank" rel="noopener">audio-vis-demo</a> 中也基于 WebAudio 的 API 进行了实现，主要是为了对比和参考。</p><p>到这里，我们完整地实现了从一组数字到可视化图形的全过程，深切地感受到了数学的魅力。这里的编码一点也不难，难的，或者是让人赞叹的，是背后的数学，人类智慧皇冠上最灿烂的明珠。</p>]]></content>
      
      
      <categories>
          
          <category> 数码知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数码 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 音频 </tag>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora集成PicGo图床服务</title>
      <link href="/2021/08/10/typora-ji-cheng-picgo-tu-chuang-fu-wu/"/>
      <url>/2021/08/10/typora-ji-cheng-picgo-tu-chuang-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>给大家推送一波福利，新版本的 Markdown 写作利器 ——<strong>Typora</strong>，集成了 PicGo 服务，文章插入图片即可通过 PicGo 服务上传到图床内。废话不多说，直接开门见山！</p><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>安装 PicGo 软件，接着图床的搭建，并进行相关的配置。</p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>注意：PicGo 软件的版本要求 2.2.0 及以上</p><p>打开 PicGo 软件的设置界面，进行 Server 的设置：</p><p>PicGo 设置 -&gt; 设置 Server，开启 Server，监听地址不用进行更改，监听端口的值设置为 36677，这个值的获取在 Typora 软件中，下面会提到：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316220909.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316220909.png" alt></a></p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>注意：Typora 软件的版本要求 0.9.84 及以上</p><p>接下来进行 Typora 的设置，Typora 的安装我就不说了，相信大家都会安装，打开 typora 软件，依次打开步骤为：文件 -&gt; 偏好设置 -&gt; 图像，具体配置参考下面的图中的配置：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316222009.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316222009.png" alt></a></p><h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><p>进行验证，看 Typora 是否可以成功的通过 PicGo 上传到图床</p><p>点击第三步图中的验证图片选项，当成功后会出现下面图中的情况</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316222349.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316222349.png" alt></a></p><p>图中可以看出监听地址以及端口号，这个需要与 PicGo 的 Server 服务中的监听地址以及端口号一致，否则上传会失败！</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>有三种方法</p><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p>采用拖拽的方法，直接将本地图片拖拽到文章中，即可进行上传</p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>采用插入本地图片的方法，使用快捷键 <strong>Ctrl + Shift + I</strong>，选择图片路径即可</p><h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><p>采用截图软件，我推荐大家一款软件 ——<strong>Snipaste</strong>，可以快速截图并进行粘贴，快捷键 <strong>F1</strong>，进行截图，<strong>Ctrl + C</strong>，进行复制，<strong>Ctrl + V</strong>，进行粘贴，可以直接粘贴到文章内，然后就自动上传到图传内，很方便，还有很多好用的截图软件，我就不在这里说了</p><p>如果你在电脑上登录 QQ，也可以通过快捷键 <strong>Ctrl + Alt + A</strong>，进行快速截图并进行复制粘贴，直接粘贴到文章中即可。</p><h1 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h1><h2 id="错误一：-Failed-to-fetch"><a href="#错误一：-Failed-to-fetch" class="headerlink" title="错误一： Failed to fetch"></a>错误一： Failed to fetch</h2><p>这个问题一般是因为端口不一致而导致的，Typora 监听的端口号为 36677，如何解决呢？</p><p>解决办法：</p><p>打开 PicGo 软件，然后依次打开 <code>PicGo设置</code>👉<code>设置Server</code>，查看当前的端口号，如果不是 36677，则将监听端口号修改为 36677 即可。</p><p>不过有的时候，我们的老朋友 Failed to fetch 还是如约而至，打开端口设置一看，怎么变成了 366771？？？？</p><p>问题在于端口冲突，如果你打开了多个 picgo 程序，就会端口冲突，<strong>picgo 自动帮你把 36677 端口改为 366771 端口</strong>，导致错误。log 文件里也写得很清楚。</p><p><code>解决方法</code>：<strong>先把 picgo 中的端口设置改回 36677，然后退出所有 picgo 程序</strong>，再使用 typora 上传功能（会自动启动 picgo 程序）</p><h2 id="错误二：-“success”-false"><a href="#错误二：-“success”-false" class="headerlink" title="错误二：{“success”,false}"></a>错误二：{“success”,false}</h2><p>这个错误相信也有很多小伙伴遇到了，原因是<strong>文件名冲突</strong>了，如果你上传过一张 image1.jpg 的图片，再上传名称一样的图片就会失败，log 日志中也会写道。</p><p>办法也很简单，打开 picgo 设置，将【<strong>时间戳重命名】打开</strong>即可，再次上传即可成功！另外还有一件事就是目前PicGo.app不支持上传网络图片，所以我们目前只能上传本地图片(我被<a href="https://github.com/Molunerfinn/PicGo/issues/432" target="_blank" rel="noopener">这个</a>坑死了）。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/moisten-the-rain/image01/raw/master/img/20210810183614.jpg" alt></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200501114637.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200501114637.png" alt></a></p><hr><p>友情提醒：</p><p>PicGo 的日志 (log) 文件是个好东西，如果出现报错，图片上传不成功的情况，大家可以打开日志看看，根据日志输出，然后自己尝试解决，百度是个好东西！😎😎😎</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200501114257.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200501114257.png" alt></a></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/2020-05-01_11-43-27.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/2020-05-01_11-43-27.png" alt></a></p><hr><p>参考：<a href="https://zhuanlan.zhihu.com/p/114175770" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/114175770</a></p><blockquote><p><strong>文章作者:</strong> <a href="mailto:undefined" target="_blank" rel="noopener">Yafine</a></p><p><strong>文章链接:</strong> <a href="https://yafine-blog.cn/posts/4e9b.html" target="_blank" rel="noopener">https://yafine-blog.cn/posts/4e9b.html</a></p><p><strong>版权声明:</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="https://yafine-blog.cn/" target="_blank" rel="noopener">过客～励む</a>！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> markdown </tag>
            
            <tag> 码云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次反挖矿病毒（转）</title>
      <link href="/2021/08/10/ji-yi-ci-fan-wa-kuang-bing-du-zhuan/"/>
      <url>/2021/08/10/ji-yi-ci-fan-wa-kuang-bing-du-zhuan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://home.cnblogs.com/u/wq242424/" target="_blank" rel="noopener">丨o聽乄雨o丨</a></p><p>出处：<a href="http://www.cnblogs.com/wq242424/" target="_blank" rel="noopener">http://www.cnblogs.com/wq242424/</a></p><p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。</p></blockquote><p>这两天实验室电脑中度了，无故被占用50%cpu挖矿，且运行任何程序都会killed。</p><p>运行原理类似于，自动网上下载挖矿程序，然后rm删除程序，让你无从找到程序，有时候还会用ld.so.preload伪装，使你看不到占用资源的挖矿程序名称，在试了各种办法后，最有效的如下：</p><p><strong>一、杜绝恶意IP访问</strong></p><p>执行netstat查询外部ip，</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ netstat -ant<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现来自于荷兰的一个ip：</p><pre class="line-numbers language-shell"><code class="language-shell">1 45.153.184.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>禁用ip：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ iptables -I INPUT -s  45.153.0.0/16 -j DROP2 # 保存规则3 $ iptables-save > /etc/sysconfig/iptables4 # 使规则生效5 $ iptables -L<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就禁止了此ip的访问。</p><p>有时，黑客会利用自启动程序在开机时对iptables进行修改，所以需要事先对iptables进行清空，在此，记录下重写iptables的过程。</p><p>清除所有规则：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ iptables -F2 $ iptables -X3 $ iptables -Z<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加一些常用端口：</p><pre class="line-numbers language-shell"><code class="language-shell"> 1 #允许本地回环接口(即运行本机访问本机) 2 $ iptables -A INPUT -i lo -j ACCEPT 3 # 允许已建立的或相关连的通行 4 $ iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT 5 #允许所有本机向外的访问 6 $ iptables -A OUTPUT -j ACCEPT 7 # 允许访问22,21,20,80端口 8 $ iptables -A INPUT -p tcp --dport 22 -j ACCEPT 9 $ iptables -A INPUT -p tcp --dport 21 -j ACCEPT10 $ iptables -A INPUT -p tcp --dport 20 -j ACCEPT11 $ iptables -A INPUT -p tcp --dport 80 -j ACCEPT12 # 允许127.0.0.113 $ iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT14 $ iptables -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEP15 #16 $ iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT17 $ iptables -A OUTPUT  -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT18 #允许ping19 $ iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT20 #运行自己指定的网段21 $ iptables -A INPUT -p tcp -s 172.16.0.0/16 --dport 22 -j ACCEPT22 #禁止其他未允许的规则访问23 $ iptables -A INPUT -j REJECT  #（注意：如果22端口未加入允许规则，SSH链接会直接断开。）24 $ iptables -A FORWARD -j REJECT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看网络通信，查找异常IP：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ netstat -ant 或者 netstat -antp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/fJmhB6" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fJmhB6.png" alt="IP"></a></p><p>禁止挖矿网段：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ iptables -I INPUT -s 198.251.0.0/16 -j DROP2 $ iptables -I INPUT -s 45.153.0.0/16 -j DROP3 $ iptables -I INPUT -s 54.38.193.170 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只允许内网网段：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ iptables -A INPUT -p tcp -s 172.16.0.0/16 --dport 22 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此，规则就重写完成，记得保存规则生效：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ iptables-save > /etc/sysconfig/iptables2 $ iptables -L<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置iptables开机启动：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ chkconfig --level 345 iptables on2 $service iptables save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>二、删除挖矿病毒源程序</strong></p><p>可以参考<a href="https://blog.csdn.net/weixin_45284355/article/details/110728620" target="_blank" rel="noopener">https://blog.csdn.net/weixin_45284355/article/details/110728620</a> 这篇博客，跟我遇到的问题几乎一样。</p><p>在 /bin/ 下找到 sysdrr 挖矿源病毒程序，并删除！</p><p>同时也可以使用 find / -name sysdrr 全盘查找源病毒程序，并删除！</p><p>在 /etc/cron.monthly/ , /etc/cron.weekly/ , /etc/cron.daily/ , /etc/cron.hourly/ 这些定时目录里找到sync程序并删除！</p><p>用 crontab -l 查看定时任务并删除所有异常定时任务。</p><p>上述sysdrr和sync直接删除不了，就需要先用 chattr -R -i /bin/sysdrr 和 chattr -R -i /bin/sync ，在用 rm -f 删除！</p><p>这样就解决了挖矿病毒的问题。</p><p>至此，我们就成功啦！</p>]]></content>
      
      
      <categories>
          
          <category> 挖矿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比特币 </tag>
            
            <tag> 挖矿 </tag>
            
            <tag> 反挖矿 </tag>
            
            <tag> 挖矿病毒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EIP-1559只是开始（转）</title>
      <link href="/2021/08/10/eip-1559-zhi-shi-kai-shi/"/>
      <url>/2021/08/10/eip-1559-zhi-shi-kai-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="EIP-1559只是开始"><a href="#EIP-1559只是开始" class="headerlink" title="EIP-1559只是开始"></a><strong>EIP-1559只是开始</strong></h2><p>以太坊的伦敦升级于8月4日完成，其中包括了著名的EIP-1559。在EIP-1559推出至今，不到4天，已经烧毁了16,230.38个ETH（截止到写稿时），价值接近5,000万美元。当真实的ETH被烧毁时，人们终于感受到EIP-1559的燃烧能量，看到每天都会有大量的ETH被烧掉。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/bd0493633e96ae3d431424151d76e4fb.png" alt="oh">)（EIP-1559推出后烧毁的ETH总量，Ultrasound.money)</p><p>当然，只有EIP-1559无法导致ETH的通缩。当前每天ETH的新增量大约为13,000个，EIP-1559启动后第一天以太坊烧毁的ETH量为4791.5个。EIP-1559大约使ETH新增率降低30%左右（当然ETH的销毁量也会根据网络的使用情况发生变化，这里只是根据当前情况的大概预估）</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/1ab262af5685209692bdd1606447b82c.png" alt="my">)（EIP-1559推出之后第一天烧毁的ETH量，etherchain.org)</p><p>蓝狐笔记在之前的文章《<a href="http://mp.weixin.qq.com/s?__biz=MzAwOTk1NjM0NQ%3D%3D&chksm=9b551eadac2297bbf939efb5ff7d33c98703a8f0ac52f5e715796747f052abb857b8a3f3ddea&idx=1&mid=2247491643&scene=21&sn=1c03eba5cd5a2d1fc9bff0024c2c8270#wechat_redirect" target="_blank" rel="noopener">EIP-1559与以太坊之路</a>》中也提到，未来半年多，以太坊有三件重要的事情，其中影响最大的还是POS的融合，它对以太坊和ETH的影响会远超EIP-1559，也就是说，EIP-1559只是拉开大幕，大戏还在路上。PoS的融合会直接改变ETH的性质。</p><h2 id="PoS融合才是大戏"><a href="#PoS融合才是大戏" class="headerlink" title="PoS融合才是大戏"></a><strong>PoS融合才是大戏</strong></h2><p>减半效应的概念来自于比特币每四年一次的减半，每次减半导致其新增发行的大幅下降。当新增量下降，而需求量保持不变或者上升时，就会推动价格的上升。关于BTC的减半，可以参考蓝狐笔记之前文章《<a href="http://mp.weixin.qq.com/s?__biz=MzAwOTk1NjM0NQ%3D%3D&chksm=9b56e2c2ac216bd4a77695b9b7c5b21283976f2e54697d875dbfae1ae195d853d9f510a8a083&idx=1&mid=2247490644&scene=21&sn=b99c5afae4c6741dd1dd39fe80f4128e#wechat_redirect" target="_blank" rel="noopener">比特币的减半效应与ETH2.0的质押效应</a>》、《<a href="http://mp.weixin.qq.com/s?__biz=MzAwOTk1NjM0NQ%3D%3D&chksm=9b56e920ac216036da9f4b0a9b161122da35627bf6a5328be972d28f5725f300f61ea4c4d74a&idx=1&mid=2247489462&scene=21&sn=dba87af98559637ed9e71974e23cbd7a#wechat_redirect" target="_blank" rel="noopener">BTC的减半效应：如何计入价格？</a>》。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/8baf69163fdeaa486a398c22338a8550.png" alt="god">)（关于BTC减半效应的形象展示，来源于MoonCapital)</p><p>这在比特币的历史上曾经多次得到证明。如今，以太坊社区中的一部分人也将减半效应概念运用到以太坊上，而且相对于btc的减半来说，是三倍减半。那么，如何理解以太坊的三倍减半概念？</p><h2 id="三倍减半"><a href="#三倍减半" class="headerlink" title="*三倍减半"></a>*三倍减半</h2><p>目前ETH年增发率大约为4%，每年新增大约460万多个ETH，平均每日新增大约13,000个左右，假设PoS新增发行0.4%（根据质押率会有变化），平均日新增大约13,00多个ETH。也就是说，按照当前每日新增为13,000个ETH，减半之后为6,500个ETH，第二次减半则3,250个ETH，第三次减半为1,625个ETH。从13,000到1,625，一共缩减87.5%，接近于90%的缩减，大约相当于3倍减半。（注：这里的具体数字不是精确数字，根据具体情况，会有一定的上下浮动，主要是为了说明量级）</p><p>当每天新增ETH仅为1,625个左右时，即便是如今的日烧毁量也超过这个日新增量，这会导致ETH进入通缩的状态。</p><p>BTC的总量是恒定的，不会通缩。而ETH随着PoS的到来，有很大概率进入通缩的状态。这导致ETH会变得越来越稀缺。从这里也可以看出，BTC和ETH经济机制的不同。</p><p>当然，需要着重强调的是，这里无法评判谁的经济政策更好。如果从长远生态发展看，不一定通缩就一定是好的，一个越来越稀缺的ETH是否是好事，目前还不能下定论，这个需要辩证来看问题。</p><p>不过，仅从供需的市场角度，这会导致对ETH的需求不断增加，供应的减少会带来压力，会导致ETH价值上涨。一个通缩的ETH会面临越来越大的需求竞争。这个竞争不仅来自于DeFi的锁定，也来自于PoS的质押需求。</p><h2 id="PoS质押"><a href="#PoS质押" class="headerlink" title="*PoS质押"></a>*PoS质押</h2><p>截止到蓝狐笔记写稿时为止，仅仅是8个多月的时间，ETH2.0质押合约中存入的ETH数量高达6,548,125个ETH，占据ETH总量的5.6%左右。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/48074e0aa6ee539d0834ca45a46e6ca3.png" alt="az">)（存入ETH2.0质押合约的ETH量增长趋势，beaconcha.io)</p><p>随着后续PoS融合，随着矿工的迁移，预计质押的PoS还会大幅度上升。根据蓝狐笔记的预估，未来存入ETH2.0质押合约中的ETH有机会达到2,000到3,000万个以上，甚至更高，占据ETH总量20%以上。（注：这里只是预估，还不是现实）</p><p>在这种情况下，从流通市场中，会有大量的ETH被移走，一是每天有真实的ETH被烧毁，二是有越来越多的ETH进入到ETH2.0的质押合约，以赚取ETH的收益。</p><h2 id="DeFi的锁定"><a href="#DeFi的锁定" class="headerlink" title="*DeFi的锁定"></a>*DeFi的锁定</h2><p>截止到蓝狐笔记写稿时，目前DeFi中锁定的ETH超过950万个，超过ETH流通量的8%，预计锁定在DeFi中的ETH很快会突破1000万个。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/fb2d2815f4fa8f2cf9e6440d3c03705b.png" alt="%%%">)（ETH在DeFi中的锁定量,DeFiPulse)</p><p>随着后续DeFi协议的发展，尤其是借贷、DEX、衍生品等领域的继续发展，DeFi领域对ETH的需求也是逐步增加的。未来DeFi领域对ETH的需求也有可能会突破2000万个。（注：这只是预估，并非发生的现实）</p><p>那么，未来PoS+DeFi大概会锁定市场中接近40-50%的ETH，甚至更高的比例，而每天的新增发行量有可能小于每日的烧毁量。即便是PoS+DeFi的锁定量不变，整个市场上流通的ETH也会越来越少。</p><h2 id="ETH走向通缩是大概率事件"><a href="#ETH走向通缩是大概率事件" class="headerlink" title="ETH走向通缩是大概率事件"></a><strong>ETH走向通缩是大概率事件</strong></h2><p>如果以太坊PoS融合顺利，在这个前提下，考虑到其年新增发行率的下降以及ETH烧毁量的情况，ETH有很大的概率走向通缩，而通缩的ETH会对其供求关系产生极其重要的影响。与此同时，PoS的机制导致对ETH的质押需求在增加，加上DeFi协议对ETH的需求也在增长，未来半年之后的ETH可能是完全不同的ETH。</p><p>当然，未来政策层面的变化，有可能会对PoS产生一些不利的影响，但长远看，如果这个影响只是降低其收益率，并不是不让它存在，那么，从这个角度，虽然会面临阻力，但趋势还会继续。</p><blockquote><p>本文转载自：<a href="https://blog.csdn.net/weixin_44383880" target="_blank" rel="noopener">巴比特资讯</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 挖矿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比特币 </tag>
            
            <tag> 以太坊 </tag>
            
            <tag> 挖矿 </tag>
            
            <tag> EIP-1559 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊GAS费爆棚，矿工疯狂扫货高端笔记本挖矿（转）</title>
      <link href="/2021/08/10/yi-tai-fang-gas-fei-bao-peng-kuang-gong-feng-kuang-sao-huo-gao-duan-bi-ji-ben-wa-kuang/"/>
      <url>/2021/08/10/yi-tai-fang-gas-fei-bao-peng-kuang-gong-feng-kuang-sao-huo-gao-duan-bi-ji-ben-wa-kuang/</url>
      
        <content type="html"><![CDATA[<p>一句话，市场似乎已经到了“闭眼梭哈也致富”的阶段。</p><p>很多挖矿或者使用Uniswap等需要用到以太坊链上转账的投资人发现，现在GAS费太贵了，有多贵呢？一个简单的交易就需要几百块，复杂的合约交互，比如挖个矿，没有几千块是不行了。DeFi，普通人彻底玩不起了。羊毛也不舍得薅了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy8xVk8yRlNpY1JHVlJOa0NxSld1ZnhyRkl5TFRBdUFpYUJaRlBXREF4clBVSURqeFVLNWQwNUhNSHhHdVVxYk15MXo3U1FXY0JGMXZxbm0wQ3Z3ZFRtQmRnLzY0MA?x-oss-process=image/format,png" alt="……"></p><p>▲以太坊相关数据（6日下午2点，OKlink）</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy8xVk8yRlNpY1JHVlJOa0NxSld1ZnhyRkl5TFRBdUFpYUJaNGR6NGt5ZXVkMjk1dXhUaFZlSWlhQ1VJaGljOGlidlNBUzFTY3JCdVd5RmdpY00zaWFyaWE4cTJPUHlRLzY0MA?x-oss-process=image/format,png" alt="Gwei"></p><p>▲某挖矿项目的GAS费用，487GAS等于近千元人民币</p><p>据Tokenview数据显示，2月5日以太坊链上手续费总和达到12827.06 ETH（约为3018.9千万美元），单日GAS均价为150 GWei，单笔交易手续费平均值为24.7美元，属于近两年的最高位。</p><p>行业大V“比特币超级君”就说：“以太坊高昂的手续费正在驱赶绝大多数defi矿工。”</p><p>那什么时候GAS便宜呢？看下图。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy8xVk8yRlNpY1JHVlJOa0NxSld1ZnhyRkl5TFRBdUFpYUJaS25aVFpXN2phWnl0SFozV2ljV1ZBMGNhbWhOS2lhdlJ2ZEI5clRJejVzTzFZV1ZNSVhxaWNuS21RLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>通过数据可以发现，整体而言，<strong>一周的下午1点到3点这个时间段的GAS费用最便宜</strong>，只有80Gwei。凌晨、午夜的费用相对最贵，可以轻松翻越400Gwei。</p><p>所以，如果你要通过DeFi应用交易，或是要去某个未发币的应用里薅羊毛，这个图可以让你一眼看GAS费用最“划算”的时间点。</p><p>当然，这个数据是动态的，变化非常快，更多实时数据可以通过一个叫做gasnow的网站查看，这是以太坊最大的矿池星火矿池做的小网站，它分析处理了以太坊的链上数据后给出了针对GAS费用的预测。网站如下，可点击收藏：<a href="https://gasnow.sparkpool.com/" target="_blank" rel="noopener">https://gasnow.sparkpool.com/</a></p><h2 id="1"><a href="#1" class="headerlink" title="1"></a><strong><em>1</em></strong></h2><h2 id="DeFi疯狂，以太坊矿工扫货笔记本挖矿"><a href="#DeFi疯狂，以太坊矿工扫货笔记本挖矿" class="headerlink" title="DeFi疯狂，以太坊矿工扫货笔记本挖矿"></a>DeFi疯狂，以太坊矿工扫货笔记本挖矿</h2><p>数据显示，以太坊矿工在一小时内赚了350万美元，这是迄今为止最高的每小时采矿收入。</p><p>但是，众所周知，因为疫情等原因，2020年以来高端显卡的供货不足，有钱也买不到。随着ETH价格突破前高，矿工们已经把注意力投降向了游戏本，尤其是搭载了最新最强显卡的高端机型。</p><p>最近，鱼池就做了一个热门小视频，主持人拿着一台搭载了NVIDIA3060显卡的华硕笔记本去星巴克薅羊毛。数据显示，该游戏本可提供40MH/S的算力，结合难度和币价，日收益约23元，260天回本，年化140%的回报率。电费白嫖。</p><p>这不是段子。目前，确实有一部分矿工在扫货笔记本，他们要么把笔记本肢解，取出显卡重新组装为矿机，要么直接安上软件挖矿。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy8xVk8yRlNpY1JHVlJOa0NxSld1ZnhyRkl5TFRBdUFpYUJaWjVGUEoxSFpYd25QMUN4VFMzc210NktueFdDeE1MTko1aE5yVWt5UWljbHRjYmprYlpQVE1pYWcvNjQw?x-oss-process=image/format,png" alt="走起！！"></p><h2 id="2"><a href="#2" class="headerlink" title="2"></a><strong><em>2</em></strong></h2><h2 id="以太坊拥堵，交易所公链和二层网络的机会来了？"><a href="#以太坊拥堵，交易所公链和二层网络的机会来了？" class="headerlink" title="以太坊拥堵，交易所公链和二层网络的机会来了？"></a>以太坊拥堵，交易所公链和二层网络的机会来了？</h2><p>以太坊堵了，GAS费贵了，对谁最有利？无疑是以“太坊杀手”，比如Cardano、Polkadot、Cosmos等。</p><p>结合今天的市场热点，币安的bsc，火币的heco，ok交易所的okchain，这些交易所公链可能也将获得市场青睐。</p><p>另外，值得期待的就是Layer2（二层网络）类项目。但不得不说，Layer2的目前还难当大任，炒作噱头超过了实际的价值。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL3N6X21tYml6X2dpZi9RamNKakQ1VVJWa1Vhb0Q2TXdpY2pOSlMxbWlhaWJYaWI3eDRyQWh4Wm5KRWNaRXNxdWxNTjJsS0xjQ3hOR1N0UWFNQ2tGR3JReUZUVFJpYmtCb2FEWXJoYzJBLzY0MA?x-oss-process=image/format,png" alt="走好！"></p><blockquote><p>本文转载自：<a href="https://blog.csdn.net/weixin_44383880" target="_blank" rel="noopener">巴比特资讯</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 挖矿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比特币 </tag>
            
            <tag> 以太坊 </tag>
            
            <tag> 挖矿 </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梅西，诺坎普永远是你的家</title>
      <link href="/2021/08/09/mei-xi-nuo-kan-pu-yong-yuan-shi-ni-de-jia/"/>
      <url>/2021/08/09/mei-xi-nuo-kan-pu-yong-yuan-shi-ni-de-jia/</url>
      
        <content type="html"><![CDATA[<h5 id="事先声明"><a href="#事先声明" class="headerlink" title="事先声明"></a>事先声明</h5><p><em>这是本人的博客，本人为自己留下的互联网自留地，我想写什么就写什么，这里面可能有很多很气愤，发泄的话，但是轮不到别人指责。以下文章布局很乱，本人想到什么写什么</em></p><h2 id="原本这是一个很美好的夏天"><a href="#原本这是一个很美好的夏天" class="headerlink" title="原本这是一个很美好的夏天"></a>原本这是一个很美好的夏天</h2><p>原本这是一个很让人开心的夏天，多年国家队无冠之后，老板以绝对核心、各项MVP的身份捧得了美洲杯。有力击碎了所谓“体系球员”、“国家队短板”的称号。今年也被称为罗粉“全完蛋了”的一年，老板今年竞争对手全部拉跨，自身又有绝对亮眼的表现，马上就7座金球奖加身。所谓的把金球数印在某人球衣后面🤣。一身轻松、度假归来的老板本来打算降薪50%，同意与巴塞罗那俱乐部签订续约，可谁曾想，巴萨最后关头居然突然变卦，因为CVC而无法完成与梅西的续约。这显然是完全无法让球迷、让梅西接受的一件事情。</p><h2 id="队史最佳？巴萨以前怎么对小罗、克圣，如今怎么对梅西"><a href="#队史最佳？巴萨以前怎么对小罗、克圣，如今怎么对梅西" class="headerlink" title="队史最佳？巴萨以前怎么对小罗、克圣，如今怎么对梅西"></a>队史最佳？巴萨以前怎么对小罗、克圣，如今怎么对梅西</h2><hr><p><strong><em>“受任于败军之际，奉命于危难之间，尔来二十有一年矣”</em></strong></p><p>为俱乐部奋斗21年的队长，30多座冠军，自家青训出来的历史最佳，梦三王朝的绝对功臣，大厦将倾之力挽狂澜。即使如此，仍然虚怀若谷，待人接物谦虚亲和，甚至配不上一个体面的送别……我不知道这是一家怎样的俱乐部，那些年的四亿妄为、管理层的昏庸、高薪资（即使已经答应了降薪50%）、更新换代都可以作为借口，但我无法忍受这么一种送别。仅仅一个人的发布会，坐着自己的几名队友、几家媒体。由梅西自己在那里抽泣着讲了一个多小时。</p><p><strong>一个非常简单的声明，就这么让生活21年的队史最佳离开，还是被蒙骗的离开，被当作博弈的棋子，直到最后彻底用完剩余价值才被扔掉</strong></p><p>以下两段来自知乎：</p><blockquote><p>梅西是一个善良、真实的人，他没有隐藏自己的任何感情，他到最后也深爱着俱乐部，为了俱乐部的脸面，他给拉狗留足了余地，实际上梅西已经表达了被欺骗被拖延的事实，但却用了最温柔的方式。梅西甚至表达了他同意一半降薪后可以继续让步的决心，只是拉狗没有再提进一步的要求。</p><p>因为这个靠着梅西上位的演技派主席，他低估了梅西对俱乐部的爱，他整个剧本中唯一没有料到的就是梅西会立即同意降薪一半，甚至表达出只要能留下可以继续舍弃的决心！</p></blockquote><blockquote><p>梅西：之前他们要求让我降薪50%，我同意了，他们再没别的要求。但最终没法续约。</p><p>拉波尔塔：嘿嘿，降薪50%只是想逼走你的噱头，没想到这傻小子真同意….</p></blockquote><h2 id="他们只是不要我了"><a href="#他们只是不要我了" class="headerlink" title="他们只是不要我了"></a>他们只是不要我了</h2><hr><p>曾经梅西曾接受采访说：</p><p><a href="https://imgtu.com/i/fGSCT0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/09/fGSCT0.jpg" alt></a><br><a href="https://imgtu.com/i/fGS9wq" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/09/fGS9wq.jpg" alt></a></p><p>如今他们真的不要老板了</p><p>](<a href="https://imgtu.com/i/fGw6FH" target="_blank" rel="noopener">https://imgtu.com/i/fGw6FH</a>)</p><p><a href="https://imgtu.com/i/fGSR7q" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/09/fGSR7q.jpg" alt></a></p><p>他们让老板独自一人完成了发布会（拉波尔塔想要和老板一起开，我只想说这个人真是<del>厚颜无耻</del>），会上他没有说任何人的不是，只是表达了对这家俱乐部的感激，表达了自己的不舍，以及表达了自己的眼泪：</p><p>[<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fGw6FH.jpg" alt></p><h2 id="我不担心他不会创造奇迹，但真希望那抹颜色是红蓝，或是蓝白"><a href="#我不担心他不会创造奇迹，但真希望那抹颜色是红蓝，或是蓝白" class="headerlink" title="我不担心他不会创造奇迹，但真希望那抹颜色是红蓝，或是蓝白"></a>我不担心他不会创造奇迹，但真希望那抹颜色是红蓝，或是蓝白</h2><hr><blockquote><p>04/05赛季，那个在小罗背上欢快庆祝进球的少年，</p><p>05/06赛季，对铁血蓝军马踏连营，助球队再夺欧冠， </p><p>06/07赛季，国家德比帽子戏法震惊世界，</p><p>从此之后，受任于败军之际，奉命于危难之间，疾风知 劲草，逆境见英雄！ 08/09赛季，决战罗马，终于登顶欧陆之巅。 </p><p>大鹏一日因风起，抟摇直上九万里， 六冠王，“梦三队之剑”，</p><p>年度91进球，突破人类历史极限， </p><p>金球奖四连冠， </p><p>MSN组合，三剑客大杀四方，第五座金球奖， </p><p>挽狂澜于即倒，扶大厦之将倾，第六座金球奖，足坛首次劳伦斯大奖……</p><p>出场778次，打进672球，贡献305次助攻。 4届欧冠冠军，10次西甲冠军，7次国王杯，8次西班牙超级杯，3次国际足联俱乐部世界杯。 6座金球奖，6次世界足球先生，6次欧冠金靴，6次欧洲金靴，8次西甲金靴，3届欧足联最佳球员…… </p><p>十余年光阴如白驹过隙转瞬即逝，从容颜青涩的少年，如今冠盖满京华，早已一身荣冕， 无数次被国际足坛无数权威人士认可、多家权威媒体论证，赞誉为GOAT（历史最佳）球员，超越 无数殿堂级前辈传奇巨星，进入和贝利、马拉多纳并肩的足坛最伟大巨星之列。 不止是独步天下的球技，一直谦逊低调，虚怀若谷，忠实家庭，关爱队友，热爱国家，从未个人品 行方面的不端行为，虽然论年收入，早已经铸就了一个足坛第一体坛前三的商业帝国，一家五口过 的却是最寻常普通不过的中产生活。 因此，从来不止是巴萨球迷，不止是阿根廷球迷，而是在世界各国各地，都有无数拥趸。不知多少 人从来并不喜欢巴萨，也对阿根廷国家队完全无感，他们仅仅是梅西的喜爱者。</p></blockquote><p>今年夏天，年轻化的阿根廷国家队用美洲杯冠军证明，如今34岁的梅西，虽然早已不再是09~16年 极盛时期，足球史上GOAT级别的个人技艺，但只要阵容搭配得当，众志成城、三军用命，只为全 力争取冠军，梅西依然能呈现出当世第一的技战术水准。而这，恰恰是今天的巴萨队，无论如何也难以匹配的。 一如18/19赛季，当巴萨队长梅西对着诺坎普几万球迷宣誓，要率队重回欧冠之巅，那些“六冠王”时代的老队友们，甚至完全不当回事：对他们来说，冠军早拿得足够多了，何必再拼？打卡下班等退役当名宿就完事了。——如此斗志涣散，全指望着梅西一人发挥神威的球队，当然必然会有 安菲尔德的惨败。</p><h2 id="安菲尔德！我不想了解"><a href="#安菲尔德！我不想了解" class="headerlink" title="安菲尔德！我不想了解"></a>安菲尔德！我不想了解</h2><p>安菲尔德……我不想多说这一件事，😭😭😭，这应该是为数不多梅西向世人，向球迷发表讲话表示要拿冠军的场面了。</p><p>我也多么希望梅西可以获得那一年的三冠王啊，那是梅西个人能力最逆天的一年，也是巴萨气运最能逆转的一年了。唉，这是本人的博客、我想怎么骂就怎么骂：登畜我永远不会原谅你，哪怕你以后会带领巴萨取得怎样的成就（似乎也没啥成就），我永远不会原谅你的那一年对利物浦的绵软无力的一射，不会原谅梅西离队发布会的刚结束你刚到巴塞罗那，不会原谅你辱骂亚洲黄种人。他真的不配我花这么长篇幅写。</p><p><a href="https://imgtu.com/i/fGwEdg" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fGwEdg.png" alt="无法想象"></a></p><p>我也想看到梅西在加冕世界杯，或是没有加冕（这不重要），之后在巴萨的红蓝飘带中，在巨大画像的GOAT中发表感言，泪流满面，巴萨最伟大的球员，缓缓离场。而不是：</p><p><a href="https://imgtu.com/i/fGw6FH" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fGw6FH.jpg" alt></a></p><h2 id="MSN全都离开了，甚至马儿走的是最体面的"><a href="#MSN全都离开了，甚至马儿走的是最体面的" class="headerlink" title="MSN全都离开了，甚至马儿走的是最体面的"></a>MSN全都离开了，甚至马儿走的是最体面的</h2><hr><p>内马尔是一条汉子，是真的喜爱足球，也是梅西真的兄弟。美洲杯最后阶段夺冠之后，我当时头皮发麻，真是想不到有多快乐了，但是看到内马尔的神情，看到内马尔和梅西脱衣服坐在一起，暂时找不到那一张图了，一种说不出来的感情。赛后马儿发表恭喜梅西夺冠，“足球一直等待这一刻”，真是感觉内马尔真是桑巴足球的代表，也是真服气老大哥梅西。</p><p><a href="https://imgtu.com/i/fG09k4" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fG09k4.jpg" alt="谁能想到他们会在巴黎又相见"></a></p><h2 id="拉狗，反正现在就是想这么叫你，真有你的成全！！！"><a href="#拉狗，反正现在就是想这么叫你，真有你的成全！！！" class="headerlink" title="拉狗，反正现在就是想这么叫你，真有你的成全！！！"></a>拉狗，反正现在就是想这么叫你，真有你的成全！！！</h2><hr><blockquote><p>这次巴萨这位小天才主席主要犯了以下这几个错误 我必须得说出来 不然心里太难受了</p><p>1、不能签请早说！为什么非要拖到转会窗口还剩不到一个月才说？而且5号还让梅西飞回来签合同 6号就说签不了？</p><p>2、用梅西为借口 无转会费签了三个球员 包括最惨的阿kun 本来人家在曼城好好的拿个高薪老将合同等退役了 看梅西面子被你忽悠来了 降薪1000万 然后梅西走了</p><p>阿kun：？</p><p>3、我知道现在是疫情 俱乐部经济困难 但是总不至于一个像样的告别仪式都办不起了吧？真就一点面子不给？办个新闻发布会 来的人还没有老板的奖杯多？</p><p>4、官宣之后火速放出视频 下架照片 召开甩锅发布会 但是还在卖新球衣 按照西班牙人的工作效率 你跟我说这不是提前准备好的？鬼都不信 早就开始提前准备了 然而一直瞒着当事人梅西？</p><p>5、选举的时候口号就是留住梅西 又拍视频又开发布会的 然后梅西被清洗走了？你的承诺呢？你的担架呢？</p><p>6、到现在巴萨还在欠梅西工资……拜托 人都被你赶走了！工资能不能结清了？！！！</p><p>不是不能接受老板的离开 而是不能接受老板这样的离开！这tm可是你现役的队史第一人！第一人！！！</p><p>啊啊啊啊啊啊啊啊啊啊啊啊啊！！！气死我了！！！</p><p>自从消息爆出来开始我就天天刷消息 各种新闻 各种论坛 昨天还看了全程的新闻发布会直播 太气人了！</p><p>真的 老板真就是脾气好 重情义 你就能逮着老实人欺负 这要是换成奉先？直接把你人都拆了！！！</p><p>我对你付出的青春这么多年</p><p>换来了一句谢谢你的成全</p><p>成全了你的潇洒与冒险</p><p>成全了我的碧海蓝天</p><p>她许你的海誓山盟蜜语甜言</p><p>我只有一句不后悔的成全</p><p>成全了你的今天与明天</p><p>成全了我的下个夏天</p><p><a href="https://imgtu.com/i/fG0A6x" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fG0A6x.jpg" alt="最巅峰的那几年"></a></p><hr><p>即使俱乐部对他再无情</p><p>无情到全世界的球迷都在看在眼里 记在心上 无尽的指责 无尽的咒骂</p><p>无情到借助他的名声上位</p><p>借助他的名声招揽球员</p><p>借助他的名声让队员降薪</p><p>一直拖到转会窗口即将关闭的时刻</p><p>让他飞回来签合同</p><p>当他回来的时候 却让他离开</p><p>差一点让他无法再继续自己的职业生涯</p><p>即使这样</p><p>他对俱乐部没有半点怨言</p><p>没有对任何人有半点怨言</p><p>这曾经是他的家</p><p>现在这个家不要他了</p><p>他哭得像一个孩子</p><p><a href="https://imgtu.com/i/fG009s" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fG009s.jpg" alt="孩童时到来，年迈时离开"></a></p><p>留下了对这个家最美好的祝福</p><p>然后转身离开</p><p>没有诺坎普十万球迷的山呼海啸</p><p>没有巴塞罗那漫山遍野的红蓝战衣</p><p>甚至没有一个体面的告别仪式</p><p>一个简单到不能再简单的新闻发布会</p><p>简单的舞台 聊聊数十人落座</p><p>在座的人数还不及他所获得的奖杯数量</p><p>这就是巴萨</p><p>这不仅仅是一家俱乐部</p><p>它对自己的队史第一功勋</p><p>如此的冷酷无情</p><p>最后我想说句我的心里话</p><p>梅西</p><p>拉着内马尔 拉莫斯 姆巴佩 迪玛利亚 以及巴黎的所有球员</p><p>血洗诺坎普吧！</p></blockquote><h1 id="莫愁前路无知己，天下谁人不识君！"><a href="#莫愁前路无知己，天下谁人不识君！" class="headerlink" title="莫愁前路无知己，天下谁人不识君！"></a>莫愁前路无知己，天下谁人不识君！</h1><hr><p><a href="https://imgtu.com/i/fG0W4J" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fG0W4J.jpg" alt></a></p>]]></content>
      
      
      <categories>
          
          <category> 人物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 梅西 </tag>
            
            <tag> 运动 </tag>
            
            <tag> 别离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Tensor操作</title>
      <link href="/2021/08/07/chang-yong-tensor-cao-zuo/"/>
      <url>/2021/08/07/chang-yong-tensor-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>当然这里基本上都是本人的代码，还没来得及很具体的整理，所以比较乱……</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> torch <span class="token keyword">as</span> tt<span class="token punctuation">.</span>__version__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;1.8.1+cpu&#39;</code></pre><h2 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h2><p>Tensor，又名张量，读者可能对这个名词似曾相识，因它不仅在PyTorch中出现过，它也是Theano、TensorFlow、<br>Torch和MxNet中重要的数据结构。关于张量的本质不乏深度的剖析，但从工程角度来讲，可简单地认为它就是一个数组，且支持高效的科学计算。它可以是一个数（标量）、一维数组（向量）、二维数组（矩阵）和更高维的数组（高阶数据）。Tensor和Numpy的ndarrays类似，但PyTorch的tensor支持GPU加速。</p><p><del>本节将系统讲解tensor的使用，力求面面俱到，但不会涉及每个函数</del>。对于更多函数及其用法，我们可通过在IPython/Notebook中使用函数名加<code>?</code>查看帮助文档，或查阅PyTorch官方文档<a href="http://docs.pytorch.org" target="_blank" rel="noopener">^1</a>。</p><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>学习过Numpy会感到非常熟悉，因tensor的接口有意设计成与Numpy类似，以方便用户使用。</p><p>从接口的角度来讲，对tensor的操作可分为两类：</p><ol><li><code>torch.function</code>，如<code>torch.save</code>等。</li><li>另一类是<code>tensor.function</code>，如<code>tensor.view</code>等。</li></ol><p>为方便使用，对tensor的大部分操作同时支持这两类接口，在本书中不做具体区分，如<code>torch.sum (torch.sum(a, b))</code>与<code>tensor.sum (a.sum(b))</code>功能等价。</p><p>而从存储的角度来讲，对tensor的操作又可分为两类：</p><ol><li>不会修改自身的数据，如 <code>a.add(b)</code>， 加法的结果会返回一个新的tensor。</li><li>会修改自身的数据，如 <code>a.add_(b)</code>， 加法的结果仍存储在a中，a被修改了。</li></ol><p>函数名以<code>_</code>结尾的都是inplace方式, 即会修改调用者自己的数据，在实际应用中需加以区分。</p><h4 id="创建Tensor"><a href="#创建Tensor" class="headerlink" title="创建Tensor"></a>创建Tensor</h4><p>在PyTorch中新建tensor的方法有很多，具体如表3-1所示。</p><p>表3-1: 常见新建tensor的方法</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Tensor(*sizes)</td><td align="center">基础构造函数</td></tr><tr><td align="center">tensor(data,)</td><td align="center">类似np.array的构造函数</td></tr><tr><td align="center">ones(*sizes)</td><td align="center">全1Tensor</td></tr><tr><td align="center">zeros(*sizes)</td><td align="center">全0Tensor</td></tr><tr><td align="center">eye(*sizes)</td><td align="center">对角线为1，其他为0</td></tr><tr><td align="center">arange(s,e,step</td><td align="center">从s到e，步长为step</td></tr><tr><td align="center">linspace(s,e,steps)</td><td align="center">从s到e，均匀切分成steps份</td></tr><tr><td align="center">rand/randn(*sizes)</td><td align="center">均匀/标准分布</td></tr><tr><td align="center">normal(mean,std)/uniform(from,to)</td><td align="center">正态分布/均匀分布</td></tr><tr><td align="center">randperm(m)</td><td align="center">随机排列</td></tr></tbody></table><p>这些创建方法都可以在创建的时候指定数据类型dtype和存放device(cpu/gpu).</p><p>其中使用<code>Tensor</code>函数新建tensor是最复杂多变的方式，它既可以接收一个list，并根据list的数据新建tensor，也能根据指定的形状新建tensor，还能传入其他的tensor，下面举几个例子。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 指定tensor形状</span>a <span class="token operator">=</span> t<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 提前分配好空间</span>a   <span class="token comment" spellcheck="true"># 数值取决于内存空间的状态，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[0., 0., 0.],        [0., 0., 0.]])</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用list数据创建tensor</span>b <span class="token operator">=</span> t<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[1., 2., 3.],        [4., 5., 6.]])</code></pre><pre class="line-numbers language-python"><code class="language-python">b<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 和numpy的转化何其相似</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]</code></pre><p><code>tensor.size()</code>返回<code>torch.Size</code>对象，它是tuple的子类，但其使用方式与tuple略有区别</p><pre class="line-numbers language-python"><code class="language-python">b_size <span class="token operator">=</span> b<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>b_size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>torch.Size([2, 3])</code></pre><pre class="line-numbers language-python"><code class="language-python">b<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#  b中元素总个数，2*3，等价于b.nelement()</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>6</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建一个与b形状一样的tensor</span>c <span class="token operator">=</span> t<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>b<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个元素为2和3的tensor</span>d <span class="token operator">=</span> t<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 注意和t.Tensor(2, 3)完全不一样！</span>c<span class="token punctuation">,</span> d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([[0., 0., 0.],         [0., 0., 0.]]), tensor([2., 3.]))</code></pre><pre class="line-numbers language-python"><code class="language-python">c<span class="token punctuation">.</span>shape   <span class="token comment" spellcheck="true"># equal to c.size()</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>torch.Size([2, 3])</code></pre><p>需要注意的是，<code>t.Tensor(*sizes)</code>创建tensor时，系统不会马上分配空间，只是会计算剩余的内存是否足够使用，使用到tensor时才会分配，而其它操作都是在创建完tensor之后马上进行空间分配。其它常用的创建tensor的方法举例如下。</p><pre class="line-numbers language-python"><code class="language-python">t<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[1., 1., 1.],        [1., 1., 1.]])</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[0., 0., 0.],        [0., 0., 0.]])tensor([ 1,  5,  9, 13, 17])tensor([ 1.0000,  5.5000, 10.0000])  tensor([ 1.0000,  2.1250,  3.2500,  4.3750,  5.5000,  6.6250,  7.7500,  8.8750,        10.0000])</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> device<span class="token operator">=</span>t<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[ 0.6485,  0.8807,  0.5077],        [-1.1991, -0.9738, -0.8757]])</code></pre><pre class="line-numbers language-python"><code class="language-python">t<span class="token punctuation">.</span>randperm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 长度为5的随机排列</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([1, 3, 2, 0, 4])</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>t<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>t<span class="token punctuation">.</span>int<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对角线为1， 不要求行列数一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[1, 0],        [0, 1],        [0, 0],        [0, 0]], dtype=torch.int32)tensor([[1, 0, 0],        [0, 1, 0]], dtype=torch.int32)</code></pre><p><code>torch.tensor</code>是在0.4版本新增加的一个新版本的创建tensor方法，使用的方法，和参数几乎和<code>np.array</code>完全一致</p><pre class="line-numbers language-python"><code class="language-python">scalar <span class="token operator">=</span> t<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">3.14159</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scalar: %s, shape of scalar: %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>scalar<span class="token punctuation">,</span> scalar<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 零维标量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>scalar: tensor(3.1416), shape of scalar: torch.Size([])</code></pre><pre class="line-numbers language-python"><code class="language-python">vector <span class="token operator">=</span> t<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'vector: %s, shape of vector: %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>vector<span class="token punctuation">,</span> vector<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 向量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>vector: tensor([1, 2]), shape of vector: torch.Size([2])</code></pre><pre class="line-numbers language-python"><code class="language-python">tensor <span class="token operator">=</span> t<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 注意与t.tensor([1, 2])区别</span>tensor<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>torch.Size([1, 2])</code></pre><pre class="line-numbers language-python"><code class="language-python">matrix <span class="token operator">=</span> t<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4.9</span><span class="token punctuation">,</span> <span class="token number">5.2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>matrix<span class="token punctuation">,</span> matrix<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([[0.1000, 1.2000],         [2.2000, 3.1000],         [4.9000, 5.2000]]), torch.Size([3, 2]))</code></pre><pre class="line-numbers language-python"><code class="language-python">empty_tensor <span class="token operator">=</span> t<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>empty_tensor<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>torch.Size([0])</code></pre><p>通过<code>tensor.view</code>方法可以调整tensor的形状，但必须保证调整前后元素总数一致。<code>view</code>不会修改自身的数据，返回的新tensor与源tensor共享内存，也即更改其中的一个，另外一个也会跟着改变。在实际应用中可能经常需要添加或减少某一维度，这时候<code>squeeze</code>和<code>unsqueeze</code>两个函数就派上用场了。</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> t<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[0, 1, 2],        [3, 4, 5]])</code></pre><pre class="line-numbers language-python"><code class="language-python">b <span class="token operator">=</span> a<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>torch.Size([2, 3])</code></pre><pre class="line-numbers language-python"><code class="language-python">b<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 注意形状，在第1维（下标从0开始）上增加“1”</span><span class="token comment" spellcheck="true"># 等价于b[, None]</span>b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>torch.Size([2, 1, 3])</code></pre><pre class="line-numbers language-python"><code class="language-python">b<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -2表示倒数第二个维度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[[0, 1, 2]],        [[3, 4, 5]]])</code></pre><pre class="line-numbers language-python"><code class="language-python">c <span class="token operator">=</span> b<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 压缩第0维的“1”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[[[0, 1, 2],          [3, 4, 5]]]])</code></pre><pre class="line-numbers language-python"><code class="language-python">c<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把所有维度为“1”的压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[0, 1, 2],        [3, 4, 5]])</code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>b  <span class="token comment" spellcheck="true"># a修改， b作为view之后的，也会跟着修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[  0, 100,   2],        [  3,   4,   5]])</code></pre><pre class="line-numbers language-python"><code class="language-python">help<span class="token punctuation">(</span>t<span class="token punctuation">.</span>squeeze<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Help on built-in function squeeze:squeeze(...)    squeeze(input, dim=None, *, out=None) -&gt; Tensor    Returns a tensor with all the dimensions of :attr:`input` of size `1` removed.    For example, if `input` is of shape:    :math:`(A \times 1 \times B \times C \times 1 \times D)` then the `out` tensor    will be of shape: :math:`(A \times B \times C \times D)`.    When :attr:`dim` is given, a squeeze operation is done only in the given    dimension. If `input` is of shape: :math:`(A \times 1 \times B)`,    ``squeeze(input, 0)`` leaves the tensor unchanged, but ``squeeze(input, 1)``    will squeeze the tensor to the shape :math:`(A \times B)`.    .. note:: The returned tensor shares the storage with the input tensor,              so changing the contents of one will change the contents of the other.    .. warning:: If the tensor has a batch dimension of size 1, then `squeeze(input)`              will also remove the batch dimension, which can lead to unexpected              errors.    Args:        input (Tensor): the input tensor.        dim (int, optional): if given, the input will be squeezed only in               this dimension    Keyword args:        out (Tensor, optional): the output tensor.    Example::        &gt;&gt;&gt; x = torch.zeros(2, 1, 2, 1, 2)        &gt;&gt;&gt; x.size()        torch.Size([2, 1, 2, 1, 2])        &gt;&gt;&gt; y = torch.squeeze(x)        &gt;&gt;&gt; y.size()        torch.Size([2, 2, 2])        &gt;&gt;&gt; y = torch.squeeze(x, 0)        &gt;&gt;&gt; y.size()        torch.Size([2, 1, 2, 1, 2])        &gt;&gt;&gt; y = torch.squeeze(x, 1)        &gt;&gt;&gt; y.size()        torch.Size([2, 2, 1, 2])</code></pre><p>​    </p><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 指令集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> Tensor </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeNet实现CIFAR10分类</title>
      <link href="/2021/08/07/lenet-shi-xian-cifar10-fen-lei/"/>
      <url>/2021/08/07/lenet-shi-xian-cifar10-fen-lei/</url>
      
        <content type="html"><![CDATA[<p>学了那么长时间的神经网络以及各个机器学习算法的手动numpy底层实现， 也掉了好多头发，终于也算是对这些算法有了算是比较本质的理解。接下来终于可以接触真正的深度学习库了。还是很高兴的， <del>终于可以当调参侠了😎</del>！</p><p>LeNet是CNN的开山之作，我们本次利用LeNet来实现CIFAR10数据集的分类，当然这个只是供练习使用pytorch使用，实际上技术含量上并不高，我也只是简单记录一下学习有关过程与内容。<del>真的是非常简单随意的记录</del></p><h2 id="导入有关库"><a href="#导入有关库" class="headerlink" title="导入有关库"></a>导入有关库</h2><p>我们主要运用的就是torch/torchvision库, 就是大致配一下变量名罢了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch <span class="token keyword">as</span> t<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn      <span class="token comment" spellcheck="true"># nn库，有着许多我们需要的函数如卷积conv1d\conv2d</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim   <span class="token comment" spellcheck="true"># 优化器</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F  <span class="token comment" spellcheck="true"># 主要有激活函数</span><span class="token keyword">import</span> torchvision <span class="token keyword">as</span> tv   <span class="token comment" spellcheck="true"># torchvision库，机器视觉库</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms  <span class="token comment" spellcheck="true"># 数据预处理方式</span><span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> ToPILImage  <span class="token comment" spellcheck="true"># 用来显示我们的图像</span>show <span class="token operator">=</span> ToPILImage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1.8.1+cpu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p>这方面本人在上一篇博客<a href="https://lry89757.github.io/2021/08/06/cifar10-shu-ju-ji-ji-du-qu/">Blog</a>中已经介绍过了。最后得到的是一个dataloader的迭代器。我们每次迭代都可以获取一个小批量，一个小批量有4个样本。我们这里就不再讲解数据预处理环节了。直接看代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 数据预处理，相当于提前定义了怎么处理数据：</span><span class="token comment" spellcheck="true"># 因为读入的数据为numpy格式，所以我们要先将其转换为tensor格式，</span><span class="token comment" spellcheck="true"># 然后对其进行归一化，有三个通道需要归一化，而第一个为均值，第二个为标准差</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 转为Tensor</span>    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 训练集</span>trainset <span class="token operator">=</span> tv<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>    root<span class="token operator">=</span><span class="token string">'/pytorch/Data/'</span><span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transform<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 迭代器</span>trainloader <span class="token operator">=</span> t<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    trainset<span class="token punctuation">,</span>    batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 测试集</span>testset <span class="token operator">=</span> tv<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>    root<span class="token operator">=</span><span class="token string">'/pytorch/Data/'</span><span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transform<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 迭代器</span>testloader <span class="token operator">=</span> t<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    trainset<span class="token punctuation">,</span>    batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="神经网络预备知识"><a href="#神经网络预备知识" class="headerlink" title="神经网络预备知识"></a>神经网络预备知识</h2><p>Autograd实现了反向传播功能，但是直接用来写深度学习的代码在很多情况下还是稍显复杂，torch.nn是专门为神经网络设计的模块化接口。nn构建于 Autograd之上，可用来定义和运行神经网络。nn.Module是nn中最重要的类，可把它看成是一个网络的封装，包含网络各层定义以及forward方法，调用forward(input)方法，可返回前向传播的结果。下面就以最早的卷积神经网络：LeNet为例，来看看如何用<code>nn.Module</code>实现。LeNet的网络结构如图所示。</p><p><a href="https://imgtu.com/i/fK1XqS" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/07/fK1XqS.png" alt="LeNet网络结构"></a></p><p>这是一个基础的前向传播(feed-forward)网络: 接收输入，经过层层传递运算，得到输出。</p><h4 id="定义网络"><a href="#定义网络" class="headerlink" title="定义网络"></a>定义网络</h4><p>定义网络时，需要继承<code>nn.Module</code>，并实现它的forward方法，把网络中具有可学习参数的层放在构造函数<code>__init__</code>中。如果某一层(如ReLU)不具有可学习的参数，则既可以放在构造函数中，也可以不放，但建议不放在其中，而在forward中使用<code>nn.functional</code>代替。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># nn.Module子类的函数必须在构造函数中执行父类的构造函数</span>        <span class="token comment" spellcheck="true"># 下式等价于nn.Module.__init__(self)</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 卷积层 '1'表示输入图片为单通道, '6'表示输出通道数，'5'表示卷积核为5*5</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 卷积层</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 仿射层/全连接层，y = Wx + b</span>        self<span class="token punctuation">.</span>fc1   <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>fc2   <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3   <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 卷积 -> 激活 -> 池化 </span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># reshape，‘-1’表示自适应</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>         x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token keyword">return</span> xnet <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以得到结果：</p><pre><code>Net(  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))  (fc1): Linear(in_features=400, out_features=120, bias=True)  (fc2): Linear(in_features=120, out_features=84, bias=True)  (fc3): Linear(in_features=84, out_features=10, bias=True))</code></pre><p>只要在nn.Module的子类中定义了forward函数，backward函数就会自动被实现(利用<code>autograd</code>)。在<code>forward</code> 函数中可使用任何tensor支持的函数，还可以使用if、for循环、print、log等Python语法，写法和标准的Python写法一致。</p><p>网络的可学习参数通过<code>net.parameters()</code>返回，<code>net.named_parameters</code>可同时返回可学习的参数及名称。</p><pre class="line-numbers language-python"><code class="language-python">params <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>parameters <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>parameters<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>forward函数的输入和输出都是Tensor。input <span class="token operator">=</span> t<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>out <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>net<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 所有参数的梯度清零</span>out<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>t<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 反向传播</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，torch.nn只支持mini-batches，不支持一次只输入一个样本，即一次必须是一个batch。但如果只想输入一个样本，则用 <code>input.unsqueeze(0)</code>将batch_size设为１。例如 <code>nn.Conv2d</code> 输入必须是4维的，形如$nSamples \times nChannels \times Height \times Width$。可将nSample设为1，即$1 \times nChannels \times Height \times Width$。</p><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p>nn实现了神经网络中大多数的损失函数，例如nn.MSELoss用来计算均方误差，nn.CrossEntropyLoss用来计算交叉熵损失。</p><pre class="line-numbers language-python"><code class="language-python">output <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>target <span class="token operator">=</span> t<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span> criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>loss <span class="token comment" spellcheck="true"># loss是个scalar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果对loss进行反向传播溯源(使用<code>gradfn</code>属性)，可看到它的计算图如下：</p><pre><code>input -&gt; conv2d -&gt; relu -&gt; maxpool2d -&gt; conv2d -&gt; relu -&gt; maxpool2d        -&gt; view -&gt; linear -&gt; relu -&gt; linear -&gt; relu -&gt; linear       -&gt; MSELoss      -&gt; loss</code></pre><p>当调用<code>loss.backward()</code>时，该图会动态生成并自动微分，也即会自动计算图中参数(Parameter)的导数。</p><h4 id="运行-backward，观察调用之前和调用之后的grad"><a href="#运行-backward，观察调用之前和调用之后的grad" class="headerlink" title="运行.backward，观察调用之前和调用之后的grad"></a>运行.backward，观察调用之前和调用之后的grad</h4><pre class="line-numbers language-python"><code class="language-python">net<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 把net中所有可学习参数的梯度清零</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'反向传播之前 conv1.bias的梯度'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'反向传播之后 conv1.bias的梯度'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre><code>反向传播之前 conv1.bias的梯度tensor([0., 0., 0., 0., 0., 0.])反向传播之后 conv1.bias的梯度tensor([ 0.1366,  0.0885, -0.0036,  0.1410,  0.0144,  0.0562])</code></pre><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>在反向传播计算完所有参数的梯度后，还需要使用优化方法来更新网络的权重和参数，例如随机梯度下降法(SGD)的更新策略如下：</p><pre><code>weight = weight - learning_rate * gradient</code></pre><p>手动实现如下：</p><pre class="line-numbers language-python"><code class="language-python">learning_rate <span class="token operator">=</span> <span class="token number">0.01</span><span class="token keyword">for</span> f <span class="token keyword">in</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sub_<span class="token punctuation">(</span>f<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data <span class="token operator">*</span> learning_rate<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># inplace 减法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>torch.optim</code>中实现了深度学习中绝大多数的优化方法，例如RMSProp、Adam、SGD等，更便于使用，因此大多数时候并不需要手动写上述代码。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token comment" spellcheck="true">#新建一个优化器，指定要调整的参数和学习率</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="梯度清零-与net-zero-grad-效果一样"><a href="#梯度清零-与net-zero-grad-效果一样" class="headerlink" title="梯度清零(与net.zero_grad()效果一样)"></a>梯度清零(与net.zero_grad()效果一样)</h4><pre class="line-numbers language-python"><code class="language-python">optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="计算损失"><a href="#计算损失" class="headerlink" title="计算损失"></a>计算损失</h4><pre class="line-numbers language-python"><code class="language-python">output <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#反向传播</span>loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#更新参数</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义网络-1"><a href="#定义网络-1" class="headerlink" title="定义网络"></a>定义网络</h2><p>拷贝上面的LeNet网络，修改self.conv1第一个参数为3通道，因CIFAR-10是3通道彩图。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xnet <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="误差损失与优化器"><a href="#误差损失与优化器" class="headerlink" title="误差损失与优化器"></a>误差损失与优化器</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 误差</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 采用交叉熵</span><span class="token comment" spellcheck="true"># 优化器</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># SGD优化算法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 训练网络</span>epoches <span class="token operator">=</span> <span class="token number">3</span>t<span class="token punctuation">.</span>set_num_threads<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 设置pytorch多线程运算时占用的cpu线程数</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>epoches<span class="token punctuation">)</span><span class="token punctuation">:</span>    running_loss <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>trainloader<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        images<span class="token punctuation">,</span> labels <span class="token operator">=</span> data        target <span class="token operator">=</span> net<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>target<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">1999</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'epoch: {epoch+1}   samples: {i/1999 * 2000} loss: {running_loss / 20000}'</span><span class="token punctuation">)</span>            running_loss <span class="token operator">=</span> <span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><a href="https://imgtu.com/i/fKcNk9" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/07/fKcNk9.png" alt></a></p><h2 id="识别正确率"><a href="#识别正确率" class="headerlink" title="识别正确率"></a>识别正确率</h2><p>最终识别正确率嘛……也不是很高，58%，没有很高,<del>不过比随便猜得到的10%还是好很多的</del>。</p><pre class="line-numbers language-python"><code class="language-python">correct <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 预测正确的图片数</span>total <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 总共的图片数</span><span class="token comment" spellcheck="true"># 由于测试的时候不需要求导，可以暂时关闭autograd，提高速度，节约内存</span><span class="token keyword">with</span> t<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> testloader<span class="token punctuation">:</span>        images<span class="token punctuation">,</span> labels <span class="token operator">=</span> data        outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        _<span class="token punctuation">,</span> predicted <span class="token operator">=</span> t<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        total <span class="token operator">+=</span> labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        correct <span class="token operator">+=</span> <span class="token punctuation">(</span>predicted <span class="token operator">==</span> labels<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10000张测试集中的准确率为: %d %%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> correct <span class="token operator">/</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fKc46f" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/07/fKc46f.png" alt></a></p><p>完结撒花❀❀❀❀❀❀❀❀❀❀❀！</p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> CNN </tag>
            
            <tag> CIFAR10 </tag>
            
            <tag> LeNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CIFAR10 dataset and reading</title>
      <link href="/2021/08/06/cifar10-shu-ju-ji-ji-du-qu/"/>
      <url>/2021/08/06/cifar10-shu-ju-ji-ji-du-qu/</url>
      
        <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><hr><p><em>I used the MNIST data set to practice before, and the most common python operation was used to read. This time I learned CNN and started to contact the DIFAR-10 data set and tried to use the framework pytorch to read data for classification.</em></p><p><em>由于大多数论文都是英文，所以本文尽量使用英文描述</em></p><p><em>Since most papers are in English, this article tries to use English descriptions as much as possible</em></p><h2 id="CIFAR-10Dataset"><a href="#CIFAR-10Dataset" class="headerlink" title="CIFAR-10Dataset"></a>CIFAR-10Dataset</h2><hr><p><a href="https://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="noopener">CIFAR-10</a>The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images.</p><p>The dataset is divided into five training batches and one test batch, each with 10000 images. The test batch contains exactly 1000 randomly-selected images from each class. The training batches contain the remaining images in random order, but some training batches may contain more images from one class than another. Between them, the training batches contain exactly 5000 images from each class.</p><p>Here are the classes in the dataset, as well as 10 random images from each:</p><table><thead><tr><th>airplane</th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane1.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane2.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane3.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane4.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane5.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane6.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane7.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane8.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane9.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane10.png" alt="img"></th></tr></thead><tbody><tr><td>automobile</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile10.png" alt="img"></td></tr><tr><td>bird</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird10.png" alt="img"></td></tr><tr><td>cat</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat10.png" alt="img"></td></tr><tr><td>deer</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer10.png" alt="img"></td></tr><tr><td>dog</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog10.png" alt="img"></td></tr><tr><td>frog</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog10.png" alt="img"></td></tr><tr><td>horse</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse10.png" alt="img"></td></tr><tr><td>ship</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship10.png" alt="img"></td></tr><tr><td>truck</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck10.png" alt="img"></td></tr></tbody></table><p>The classes are completely mutually exclusive(完全互斥的）. There is no overlap（重叠） between automobiles and trucks. “Automobile” includes sedans, SUVs, things of that sort. “Truck” includes only big trucks. Neither includes pickup trucks.</p><p>There are three versions of this dataset for python, matlab and binary.</p><p>If you have downloaded the version for python,  you unzip the .zip file look like this:</p><p><a href="https://imgtu.com/i/fnvqf0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/06/fnvqf0.png" alt></a></p><p>The archive contains the files data_batch_1, data_batch_2, …, data_batch_5, as well as test_batch. Each of these files is a Python “pickled” object produced with <a href="http://www.python.org/doc/2.5/lib/module-cPickle.html" target="_blank" rel="noopener">cPickle</a>. Here is a python3 routine which will open such a file and return a dictionary:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">unpickle</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> pickle    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fo<span class="token punctuation">:</span>        dict <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fo<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'bytes'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Loaded in this way, each of the batch files contains a dictionary with the following elements:</p><ul><li><strong>data</strong> – a 10000x3072 <a href="http://numpy.scipy.org/" target="_blank" rel="noopener">numpy</a> array of uint8s. Each row of the array stores a 32x32 colour image. The first 1024 entries contain the red channel values, the next 1024 the green, and the final 1024 the blue. The image is stored in row-major order, so that the first 32 entries of the array are the red channel values of the first row of the image.</li><li><strong>labels</strong> – a list of 10000 numbers in the range 0-9. The number at index <em>i</em> indicates the label of the <em>i</em>th image in the array <strong>data</strong>.</li></ul><p>The dataset contains another file, called batches.meta. It too contains a Python dictionary object. It has the following entries:</p><ul><li><strong>label_names</strong> – a 10-element list which gives meaningful names to the numeric labels in the <strong>labels</strong> array described above. For example, label_names[0] == “airplane”, label_names[1] == “automobile”, etc.</li></ul><p>The above is all the introduction of CIFAR-10.</p><h2 id="read-the-dataset-by-Pytorch"><a href="#read-the-dataset-by-Pytorch" class="headerlink" title="read the dataset by Pytorch"></a>read the dataset by Pytorch</h2><hr><h3 id="Preface-1"><a href="#Preface-1" class="headerlink" title="Preface"></a>Preface</h3><p>Before, I often use some simple python codes to read the dataset such as MNIST, sonar and so on. Today, I begin to learning pytorch, finding the torchvision.datasets, and the specific methods of reading datasets of pytorch. It’s amazing and simple. I will explore the use of it with all of you guys as follows.</p><p>All datasets are subclasses of <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset" target="_blank" rel="noopener"><code>torch.utils.data.Dataset</code></a> i.e, they have <code>__getitem__</code> and <code>__len__</code> methods implemented. Hence, they can all be passed to a <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader" target="_blank" rel="noopener"><code>torch.utils.data.DataLoader</code></a> which can load multiple samples in parallel using <code>torch.multiprocessing</code> workers. For example:</p><pre class="line-numbers language-python"><code class="language-python">imagenet_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>ImageNet<span class="token punctuation">(</span><span class="token string">'path/to/imagenet_root/'</span><span class="token punctuation">)</span>data_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>imagenet_data<span class="token punctuation">,</span>                                          batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                                          shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                          num_workers<span class="token operator">=</span>args<span class="token punctuation">.</span>nThreads<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>All the datasets have almost similar API. They all have two common arguments: <code>transform</code> and <code>target_transform</code> to transform the input and target respectively(这两个是图片增强). We can also create our own datasets using the provided <a href="https://pytorch.org/vision/stable/datasets.html#base-classes-datasets" target="_blank" rel="noopener">base classes</a></p><h3 id="Transforms-Compose-about-data-preprocessing"><a href="#Transforms-Compose-about-data-preprocessing" class="headerlink" title="Transforms.Compose()   about data preprocessing"></a>Transforms.Compose()   about data preprocessing</h3><h4 id="In-this-case"><a href="#In-this-case" class="headerlink" title="In this case"></a>In this case</h4><p>Usually we use the torchvision.transforms.Compose() to preprocessing the data we need. There are few parameters about this function. In this case, we use this function like this:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token comment" spellcheck="true"># data preprocessing</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">,</span>    trasforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># the fronter is the mean of normalize, the later is the standard deviation('标准差' in Chinese)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="what’s-more"><a href="#what’s-more" class="headerlink" title="what’s more"></a>what’s more</h4><p>What’s more, the function has many useful parameters, we could find the related examples in this <a href="https://www.programcreek.com/python/example/104832/torchvision.transforms.Compose" target="_blank" rel="noopener">website</a>. And as follows,  I will list some examples in this website:</p><h5 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a>example 1</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> phase<span class="token punctuation">)</span><span class="token punctuation">:</span>    transform_dict <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'src'</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>        <span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>RandomResizedCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                              std<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'tar'</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>        <span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                              std<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>root_path <span class="token operator">+</span> dir<span class="token punctuation">,</span> transform<span class="token operator">=</span>transform_dict<span class="token punctuation">[</span>phase<span class="token punctuation">]</span><span class="token punctuation">)</span>    data_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data_loader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="example-2"><a href="#example-2" class="headerlink" title="example 2"></a>example 2</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_data_loader</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> opt<span class="token punctuation">.</span>dset_name <span class="token operator">==</span> <span class="token string">'moving_mnist'</span><span class="token punctuation">:</span>    transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>vtransforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dset <span class="token operator">=</span> MovingMNIST<span class="token punctuation">(</span>opt<span class="token punctuation">.</span>dset_path<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>is_train<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>n_frames_input<span class="token punctuation">,</span>                       opt<span class="token punctuation">.</span>n_frames_output<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>num_objects<span class="token punctuation">,</span> transform<span class="token punctuation">)</span>  <span class="token keyword">elif</span> opt<span class="token punctuation">.</span>dset_name <span class="token operator">==</span> <span class="token string">'bouncing_balls'</span><span class="token punctuation">:</span>    transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>vtransforms<span class="token punctuation">.</span>Scale<span class="token punctuation">(</span>opt<span class="token punctuation">.</span>image_size<span class="token punctuation">)</span><span class="token punctuation">,</span>                                    vtransforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dset <span class="token operator">=</span> BouncingBalls<span class="token punctuation">(</span>opt<span class="token punctuation">.</span>dset_path<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>is_train<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>n_frames_input<span class="token punctuation">,</span>                         opt<span class="token punctuation">.</span>n_frames_output<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>image_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> transform<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> NotImplementedError  dloader <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>opt<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span>opt<span class="token punctuation">.</span>is_train<span class="token punctuation">,</span>                            num_workers<span class="token operator">=</span>opt<span class="token punctuation">.</span>n_workers<span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> dloader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="example-3"><a href="#example-3" class="headerlink" title="example 3"></a>example 3</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">transform_for_train</span><span class="token punctuation">(</span>fixed_scale <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span> rotate_prob <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Options:    1.RandomCrop    2.CenterCrop    3.RandomHorizontalFlip    4.Normalize    5.ToTensor    6.FixedResize    7.RandomRotate    """</span>    transform_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">#transform_list.append(FixedResize(size = (fixed_scale, fixed_scale)))</span>    transform_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RandomSized<span class="token punctuation">(</span>fixed_scale<span class="token punctuation">)</span><span class="token punctuation">)</span>    transform_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RandomRotate<span class="token punctuation">(</span>rotate_prob<span class="token punctuation">)</span><span class="token punctuation">)</span>    transform_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#transform_list.append(Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5)))</span>    transform_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    transform_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>transform_list<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then let us explore the DataLoader of pytorch.</p><h3 id="Get-the-data"><a href="#Get-the-data" class="headerlink" title="Get the data"></a>Get the data</h3><p>We simply use the torchvision.datasets.CIFAR10() to get the data. The torchvision.datasets contains the dataset of CIFAR10. If we haven’t downloaded the datasets before, we even use this to download the dataset(Simply make the bool truth of <code>download</code> as True).</p><p><em>load data just like this:</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchvision <span class="token keyword">as</span> tv<span class="token keyword">import</span> torch <span class="token keyword">as</span> t<span class="token comment" spellcheck="true"># trainset</span>trainset <span class="token operator">=</span> tv<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>    root<span class="token operator">=</span><span class="token string">'/pytorch/Data/'</span><span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transform<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># testset</span>testset <span class="token operator">=</span> tv<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>    root<span class="token operator">=</span><span class="token string">'/pytorch/Data/'</span><span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It is very simple! don’t it ?</p><h3 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h3><h4 id="official"><a href="#official" class="headerlink" title="official"></a>official</h4><p>The relatively official description: Dataloader is an iterable object that splices each piece of data returned by the dataset into a batch, and provides multi-threaded acceleration optimization(多线程优化加速) and data scrambling operations(数据打乱操作). After the program traverses all the data of the dataset, it also completes an iteration of the Dataloader.</p><h4 id="my-eyes"><a href="#my-eyes" class="headerlink" title="my eyes"></a>my eyes</h4><p>In my opinions, it is just a generator to load the data. Compare to the cycle of <code>for</code>,  the use of generator is more pythonic and advanced. In this case, we use this to load data like this:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch <span class="token keyword">as</span> ttrainloader <span class="token operator">=</span> t<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    trainset<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># the trainset we get before</span>    batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>testloader <span class="token operator">=</span> t<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    trainset<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># as the same</span>    batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Type-of-annotation"><a href="#Type-of-annotation" class="headerlink" title="Type of annotation"></a>Type of annotation</h3><p>For convenience,  the label of each img is numbers, so we should make a tuple of varieties(list is also ok) to get the variety of each img. Actually, it make no effects on the dataset.</p><pre class="line-numbers language-python"><code class="language-python">classes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'plane'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span> <span class="token string">'bird'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'deer'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'horse'</span><span class="token punctuation">,</span> <span class="token string">'ship'</span><span class="token punctuation">,</span> <span class="token string">'truck'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Try-to-show-a-picture"><a href="#Try-to-show-a-picture" class="headerlink" title="Try to show a picture"></a>Try to show a picture</h3><p>We could get one data to watch the image.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> ToPILImageshow <span class="token operator">=</span> ToPILImage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token operator">=</span> trainset<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># get the 100th data</span><span class="token keyword">print</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># get the variety of this data</span><span class="token comment" spellcheck="true"># (data + 1) / 2 : Restore the normalized data</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># height:100, width:100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>we can get the output:</p><p>ship<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/06/fusmEn.png" alt></p><p>Just like this, we get the batch of data like this:</p><pre class="line-numbers language-python"><code class="language-python">dataiter <span class="token operator">=</span> iter<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span>images<span class="token punctuation">,</span> labels <span class="token operator">=</span> dataiter<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># each batch has 4 images</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'       '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>classes<span class="token punctuation">[</span>labels<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>tv<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span><span class="token punctuation">(</span>images <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>the output as follows:</p><p>ship                  bird                  bird               truck</p><p><a href="https://imgtu.com/i/fuckjO" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/06/fuckjO.png" alt></a></p><p>OK, that’s all! Thank you for reading!</p>]]></content>
      
      
      <categories>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 数据集 </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> CNN </tag>
            
            <tag> python </tag>
            
            <tag> CIFAR10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P5788 单调栈</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p5788-dan-diao-zhan/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p5788-dan-diao-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://www.luogu.com.cn/problem/P5788" target="_blank" rel="noopener">题目</a>描述</h2><hr><p>给出项数为 n的整数数列 $a_{1 … n}$。</p><p>定义函数 <em>f</em>(<em>i</em>) 代表数列中第 i<em>i</em> 个元素之后第一个大于 <em>a**i</em> 的元素的<strong>下标</strong>，若不存在，则 f(i)=0。</p><p>试求出 f<em>(1…</em>n)。</p><p><a href="https://imgtu.com/i/fV9nYV" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/05/fV9nYV.png" alt></a></p><h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><hr><p>实际上这一道题和前面那一道<a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1165-ri-zhi-fen-xi/">日志分析</a>是非常像的，不过这里这个需要我们先将所有的数字都读进a[3000005]，读进来之后从后往前开始，定义一个辅助数组b[3000005]用来存储相同位置的数比他大的第一个数的索引值，从最后一个数开始，最后一个数为0，然后往前，随意一个数a[i]先判断是否它比后面第一个数a[i+1]大，如果比后面第一个数a[i+1]小，那么那个辅助数组只需在该位置存储该位置的索引 i+1 就行；如果它比它后面第一个数a[i+1]大或是相等，那么就找比它后面那个数a[i+1]还大的数a[b[i+1]],由于是从后往前进行的，这个b[i+1]已经求出来了，如果我们的a[b[i+1]]，仍然不比a[i]大，那么就继续找a[b[b[i+1]]], 哈哈哈，有点套娃的感觉了，实际上就是找比a[b[i+1]]还大的第一个数，这么依次找下去，直到找到一个比a[i]大的数，将其索引存储到b[i]上， 或者直到找到一个b[j]为0，那么说明a[i]是目前最大数，没有比它更大的数，那么对应的b[i]就为0。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3000002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 用来存储数据</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">3000002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 用来存储我们的答案</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 总共的个数</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读取数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 如果后面的第一个数正好比他大</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> next <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// // 如果后面第一个数没有比他更大的数，那么直接赋值为0,否则就一直找接下来的索引直到找到0或者找到合适的数为止</span>                next <span class="token operator">=</span> b<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1165-日志分析</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1165-ri-zhi-fen-xi/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1165-ri-zhi-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a><a href="https://www.luogu.com.cn/problem/P1165" target="_blank" rel="noopener">题目</a>描述:</h2><p><em>M</em> 海运公司最近要对旗下仓库的货物进出情况进行统计。目前他们所拥有的唯一记录就是一个记录集装箱进出情况的日志。该日志记录了两类操作：第一类操作为集装箱入库操作，以及该次入库的集装箱重量；第二类操作为集装箱的出库操作。这些记录都严格按时间顺序排列。集装箱入库和出库的规则为先进后出，即每次出库操作出库的集装箱为当前在仓库里所有集装箱中最晚入库的集装箱。</p><p>出于分析目的，分析人员在日志中随机插入了若干第三类操作――查询操作。分析日志时，每遇到一次查询操作，都要报告出当前仓库中最大集装箱的重量。</p><p><a href="https://imgtu.com/i/fEvvCD" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEvvCD.png" alt></a></p><h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><hr><p>首先我们知道要使用一个栈来存储输入的重量，但是由于这里有着一个所谓的最大值的限制，我们要能随时查询最大值，所以同时还需要有着一个辅助栈来<strong>同步</strong>存储我们的当前元素作为栈顶时的最大值，这个是建立栈的同时建立的辅助栈，最后我们只需要查询时输出栈顶，出库时把两个栈顶都弹出来就行。</p><p>另外就是注意一下这里的空栈时查询输出0就行了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">// 一共需要两个栈，一个栈用来记录依次进入的货品质量，</span><span class="token comment" spellcheck="true">//一个栈在建立前一个栈的时候记录当前栈的最大值</span><span class="token keyword">int</span> stack1<span class="token punctuation">[</span><span class="token number">200006</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录依次进入的货品质量</span><span class="token keyword">int</span> stack2<span class="token punctuation">[</span><span class="token number">200006</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录建立栈的同时当前栈的最大值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所含操作总数</span>    <span class="token keyword">int</span> opera<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录每次的操作</span>    <span class="token keyword">int</span> weigh<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录每次的物品质量</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录栈顶位置</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//读取数据</span>    <span class="token comment" spellcheck="true">//scanf("%d%d", &amp;opera, &amp;weigh);  // 先读取一次，使栈中有数</span>    <span class="token comment" spellcheck="true">//stack1[top++] = weigh;</span>    <span class="token comment" spellcheck="true">//stack2[top++] = weigh;  // 由于栈中只有一个元素，所以我们的当前栈最大值为weigh</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 循环n次</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opera<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opera<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">// 读取入栈</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>weigh<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> weigh<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 入栈</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//栈中只有一个元素</span>                stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> weigh<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>weigh <span class="token operator">></span> stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 如果我们的读入数据比之前的最大值还大</span>                stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> weigh<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 就更改最大值</span>            <span class="token keyword">else</span>                stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 否则延续上次的最大值</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">//出库</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果栈不空</span>                top<span class="token operator">--</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出栈</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 如果栈</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 栈空时输出0</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1981 表达式求值</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1981-biao-da-shi-qiu-zhi/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1981-biao-da-shi-qiu-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p><a href="https://www.luogu.com.cn/problem/P1981" target="_blank" rel="noopener">题目</a>描述：给定一个只包含加法和乘法的算术表达式，请你编程计算表达式的值。</p><p><a href="https://imgtu.com/i/fEXFET" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEXFET.png" alt></a></p><h2 id="解析思路"><a href="#解析思路" class="headerlink" title="解析思路"></a>解析思路</h2><hr><p>实际上本题和栈的关系不是特别大，因为只有乘和加两种运算，我们基本思路为把乘的乘出来后，加上之前的和就OK，没有必要使用栈运算。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><hr><p>代码如下：</p><pre class="line-numbers language-c++"><code class="language-c++">#include <cstdio>const int mod = 10000;int x,s,t; //x是当前的数，s是和，t是当前段的乘积char c;int main(){    scanf("%d",&t);//先读入第一个数，之后每次读入一个符号一个数    while(scanf("%c",&c) && c != '\n'){ //最后会读到换行符        scanf("%d",&x);        if(c == '*') t = t * x % mod; //是乘号就相乘        else s = (s + t) % mod,t = x;        //加号就加上上一段的积，t变为下一段的第一个数    }    printf("%d\n",(s + t) % mod); //加上最后一段的积    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python实现（eval函数）"><a href="#Python实现（eval函数）" class="headerlink" title="Python实现（eval函数）"></a>Python实现（eval函数）</h2><hr><p>当然，这里面我们的运算式就是这样，我们平时计算的时候往计算器上敲的格式一模一样，所以我们完全能想到python中的eval函数，它可以将我们的输入的字符串作为python的代码编译出来，所以很理所应当的，<del>一行代码优雅解决</del></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然而现实很残酷……</p><p><a href="https://imgtu.com/i/fEjTTf" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEjTTf.png" alt></a></p><p>有两个运行超时了</p><p>后来换成了Pyhon2，python2才是可以直接运算不借助任何函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><del>直接AC！</del></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> C </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1449 后缀表达式</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1449-hou-zhui-biao-da-shi/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1449-hou-zhui-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://www.luogu.com.cn/problem/P1449" target="_blank" rel="noopener">题目</a>描述</h2><hr><p>所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。</p><p>如：3<em>(5–2)+7对应的后缀表达式为：3．5．2．-</em>7．+@。’@’为表达式的结束符号。‘.’为操作数的结束符号。</p><p><a href="https://imgtu.com/i/fELUWd" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fELUWd.png" alt></a></p><p>##解析思路</p><hr><p>本题也是对于栈的较为直接的考察，我们可以直接选择建立一个栈来存储我们的每次输入的数字，然后遇到一个符号就弹出两个数来进行运算，运算的结果再入栈，最后运算结束之后，栈中只会剩下最后一个数，就是我们的结果。</p><p><strong>注意这里面我们读取数字的时候是以字符串读取的，有可能会读取多位数比如13、122这种，所以需要注意读取问题，不过这一题还算简单，没有让我们读取负数</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><p>代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用来放置相关数字的栈</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 读入字符</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录栈目前的栈顶位置</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'@'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">>=</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用来做读取的每一个数字</span>            num <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\.'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 如果是数字的话</span>            <span class="token punctuation">{</span>                num <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                num <span class="token operator">+</span><span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 入栈</span>            <span class="token comment" spellcheck="true">// printf("%d", num);</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">// 如果是运算符就出栈运算然后入栈</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">,</span> left <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 得到左右操作数</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            <span class="token keyword">case</span><span class="token string">'*'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">*</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token string">'/'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">/</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token string">'+'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token string">'-'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">-</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// printf("top : %d\n", stack[top - 1]);</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上格式化之后，发现本题难度并不大。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题全记录</title>
      <link href="/2021/08/04/suan-fa-shua-ti-quan-ji-lu/"/>
      <url>/2021/08/04/suan-fa-shua-ti-quan-ji-lu/</url>
      
        <content type="html"><![CDATA[<p><em>学校要求暑假刷算法题，上个寒假刷的题（<del>有好多好多都是不会抄的</del>）几乎上都快忘完了，正逢上我创建个人博客，算是把刷过的题都做一个记录，也算是个记录整理一下思路，以后忘了还可以看看当时的思路</em></p><p>就以这一个系列作为开篇作，以后我会每次刷一个系列的题，顺便来进行一个大的每道题的总结。</p><h2 id="栈系列"><a href="#栈系列" class="headerlink" title="栈系列"></a>栈系列</h2><hr><p>第一个系列的是关于栈的五道题。</p><p><a href="https://imgtu.com/i/fEHUWn" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEHUWn.png" alt></a></p><p>难度不是很大，不过也花了一定的时间</p><p>五道题地址与解答博客地址在这里：</p><p>第一道：<a href="https://www.luogu.com.cn/problem/P1044" target="_blank" rel="noopener">P1044单调栈</a>       <a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1044-zhan/">算法刷题之栈系列P1044栈</a></p><p>第二道：<a href="https://www.luogu.com.cn/problem/P1449" target="_blank" rel="noopener">P1449后缀表达式</a>  <a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1449-hou-zhui-biao-da-shi/">算法刷题之栈系列P1449后缀表达式</a></p><p>第三道：<a href="https://www.luogu.com.cn/problem/P1981" target="_blank" rel="noopener">P1981表达式求值</a>   <a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1981-biao-da-shi-qiu-zhi/">算法刷题之栈系列P1981 表达式求值</a></p><p>第四道：<a href="https://www.luogu.com.cn/problem/P1165" target="_blank" rel="noopener">P1165日志分析</a>    <a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1165-ri-zhi-fen-xi/">算法刷题之栈系列P1165-日志分析</a></p><p>第五道：<a href="https://www.luogu.com.cn/problem/P5788" target="_blank" rel="noopener">P5788单调栈</a>   <a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p5788-dan-diao-zhan/">算法刷题之栈系列P5788 单调栈</a></p><h2 id="队列系列"><a href="#队列系列" class="headerlink" title="队列系列"></a>队列系列</h2><hr><p>第二个系列是有关于队列系列的3道题：</p><p><a href="https://imgtu.com/i/fVnrn0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/05/fVnrn0.png" alt></a></p><p>第一道：<a href="https://www.luogu.com.cn/problem/UVA540" target="_blank" rel="noopener">团体队列</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1044 栈</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1044-zhan/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1044-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://www.luogu.com.cn/problem/P1044" target="_blank" rel="noopener">题目</a>描述</h2><hr><p>一个序列1、2、3、4、5、……、n，按照如此顺序入栈，可能的出栈顺序有多少种？</p><p><a href="https://imgtu.com/i/fEbQh9" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEbQh9.png" alt></a></p><h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><hr><p>这一道题实际上使用了卡特兰数的公式，</p><p>建立数组f。f[i]表示i个数的全部可能性。</p><p>f[0] = 1, f[1] = 1; //当然只有一个</p><p>设 x 为当前出栈序列的最后一个，则x有n种取值</p><p>由于x是最后一个出栈的，所以可以将已经出栈的数分成两部分</p><ol><li>比x小</li><li>比x大</li></ol><p>比x小的数有x-1个，所以这些数的全部出栈可能为f[x-1]</p><p>比x大的数有n-x个，所以这些数的全部出栈可能为f[n-x]</p><p>这两部分互相影响，所以一个x的取值能够得到的所有可能性为f[x-1] * f[n-x]</p><p>另外，由于x有n个取值，所以</p><p>ans = f[0]<em>f[n-1] + f[1]</em>f[n-2] + … + f[n-1]*f[0];</p><p>当然可以这样使用递归处理，但是我们已经有结论了：h(n)=c(2n,n)-c(2n,n-1) (n=0,1,2,…)</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><p>所以我的答案就很“简洁”了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> factorialn <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>factorial<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>factorial<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然如果你想要较为”正常“的完成这一道题(抄某位大佬的)：</p><pre class="line-numbers language-c++"><code class="language-c++">#include<cstdio>#define siz 20using namespace std;int n;int c[siz*2][siz];int main(){    scanf("%d",&n);    for(int i=1;i<=2*n;i++) c[i][1]=c[i][i]=1;    for(int i=3;i<=2*n;i++)     for(int j=2;j<i;j++)      c[i][j]=c[i-1][j]+c[i-1][j-1];    printf("%d",c[2*n][n]-c[2*n][n-1]);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>愉快AC</del></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回到那片球场8.3 2021</title>
      <link href="/2021/08/04/hui-dao-na-pian-qiu-chang-8-3-2021/"/>
      <url>/2021/08/04/hui-dao-na-pian-qiu-chang-8-3-2021/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7cd66ceb702686a6e61e8fab002ebc58dc5b166530e0f6c2e820bc7a6d3ec9e3">5de89d89894dfc04df6c90fd52cc9dd07e5c4f0d52ff815f234f57e60c9b48a7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu ! enter some words to prove</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 体育运动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 写给自己的散文诗 </tag>
            
            <tag> 羽毛球 </tag>
            
            <tag> 体育运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lier and Accuser for 林俊杰</title>
      <link href="/2021/08/03/lier-and-accuser-for-lin-jun-jie/"/>
      <url>/2021/08/03/lier-and-accuser-for-lin-jun-jie/</url>
      
        <content type="html"><![CDATA[<p>网上最近流言飞起，说到林俊杰****，我实际上是比较气愤的，至少现在还没有真相大白，网上的键盘侠、水军们已经开始拼命黑了，我想起了JJ Lin的一首歌，Lier and Accuser, 里面几句歌词：They don’t even know me，With their tongues（闲言碎语） they crucify（折磨） me，Won’t you vindicate（证明……无辜的） me，Fend（防御） me from those false accusations（指责）。他们都不认识我，就各处造谣，你能证明我是无辜的对吧，快带我逃离这不实的指责。</p><p>的确，网上好早前就有过好多关于他的yp传闻，似乎是正确的，就算是正确的我也不奇怪，的确啊40多的老男人了，他也没有所谓的纯情人设，我只是在听他的歌、欣赏他的作曲才华、演唱能力而已。也可能只是谣言而已。但是最令我气愤的是，关于他的吸毒？？？？我想知道，这还是互联网吗？为什么都在全网黑他？粉丝真的稍微维护一下都会被骂，稍微维护下就会被骂和吴亦凡粉丝有什么区别。林俊杰这件事情之前是为数不多的娱乐圈道德模范了吧，这件事情之后可能继续会是。出道这么多年，几乎没有什么黑料，有不应该早就挖出来了吗？有的黑料那算是那一两个被整天宣传，事实上是这样吗？你们看后续报道了吗？有什么石锤的证据吗？似乎没有吧？现在很多人真是纯属为了骂而骂。奉劝一句：看看林俊杰律师函吧。发完函微博贴吧知乎那群造谣的，删帖的删帖，道歉的道歉，注销的注销。林俊杰老粉知道这人啥情况，有黑料，出道这么多年一点绯闻都没有，你突然跟我说这人艹粉吸毒。</p><p>律师函来了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-cc49665bac3a39ceb04c30bcd79f9c41_1440w.jpg?source=1940ef5c" alt></p><p>看看各位造谣者的怂样子：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-21a93e919c35cb5d49b67c382d78833f_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-11cce240e88834da7b37a7bcb064187c_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-7499d91ae7f4f149d0e0d08dc42861fd_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-87cf0d5ed18c9625e6e12cd7887544ca_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-4297ecbe4661de46d55b0143fb2d8a26_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-415d13b25181adb82092e46bd92debc7_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-7631e35a42a27f00ed22ca814abc286f_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-a966b19464203807eb23acfa51c7ed33_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-cf3cad0c0c3c295143a10cadc9bc0e33_1440w.jpg?source=1940ef5c" alt></p><p>作为林俊杰多年粉丝了，当然，如果他真的吸毒了，我也不会维护他。但吸毒全网歌曲下架了我仍然会听他的歌，反正之前下载过了，我对于艺人的私德容忍程度没有那么高，同时我同样认为，如果最终出来林俊杰没有罪，请把那些出来造谣的全部送进监狱，无证据造谣者必须收到相应的处罚。</p><p>我只说他这个圈子这个条件的人yp可以理解，没有说我接受甚至赞同他yp。</p><p>而且说作品说我是歌迷不是粉丝是什么意思？作品本就不代表人品，更不代表有了作品就可以降低道德标准可以犯错。</p><p>而是哪怕他违法被抓了，我也能一边听着他的歌一边在网上刷他落网的热点一边还能在评论区嘴他几句。</p><p>出了歌我买有钱买演唱会抢得到就去。林俊杰微博超话我不关注，入驻抖音我从来不看(我甚至没抖音)，粉丝最近和谁谁谁撕了我不清楚，生日我记不清。</p><p>私生活传这么久，一张石锤都没有，一个当事人都没有。从没有那个女生跳出来说：“没错！林俊杰就是跟我睡的！”</p><p><strong>但我始终是他的粉丝</strong></p><p><strong>从来没有。</strong></p><p>十几年了诶，不管是捏造还是空穴来风，连一张能支撑这个谣言的依据都没有。</p><p><strong>吴亦凡粉丝可以有十几个嫂子，而林俊杰粉丝，一个嫂子都没见着。</strong></p><p>另外点名两个地方：一个是贴吧狗吧那个ID叫雷军的，第一时间发帖造谣黑林俊杰，发完律师函后又立刻删帖销号跑路，如果调查完毕后林俊杰没有罪，我坚信这个人必须收到相应的惩罚。第二个就是微博臭名昭著的蹭热度的谢明皓。</p><p>其余的以后在更新，暂时不说了，心烦透顶。</p><p>本人也静待事情继续发展。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 人物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 林俊杰 </tag>
            
            <tag> 生活随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些感想2021.8.02</title>
      <link href="/2021/08/02/yi-xie-gan-xiang/"/>
      <url>/2021/08/02/yi-xie-gan-xiang/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3f3e9958eca594c5b0bfb787fea65ac080eaf55c71312ad0761f75214afcbdc8">5de89d89894dfc04df6c90fd52cc9dd00610d1ea9fce7ba2cb06c84a46851c8bd1510e1fa7f1d7bf06374730a2c0ca7fda58b2ca76c6313e397a28e53312809b61a88d126d1c7d96f0df028d7bf6b0b0aca6aa9281ece6cecaced19d31fe13a8fea504f2cfdd125ee49808fc407e0890abed58ba82abedc61469ba80e61ca00d7772a1095afd76050d0c91b44b9fca054b195a7fa2b1ed816a987b79b140093ecea834524fadc97ea7fae67ce7765c5812d3bedff067b56e801167949fb853f8335e9808ff95b1f6d52eb3e5e93948cea70ca7d18cce67d35035c65a897bf0ea19d82224b0e97f72feab034520ef3d35ed5c02127d3c41591c5e00c21d016f34060ac7d554f73f8b40d5390b20fd9d60f7ee0fb4a08a127f0811535d89a57a441f85b58310c323e5c2b170f5da3114423b847cd75036b7df6fb352d220a3aca5bb6baf5a5ca42d8c6c5abae0c4b741d9412d75f25d8b9d76f9a24dae2587d183740e44b9d8761f8913103d04e9f7c98ef6640176c7b8534747d6a674e3eee90e0a577feca7d4e9fef8fd4059ef436b07f9b5eb53b161c956457b84537096ab51b588114aa9bca87c4b86253ffe86cd427cac1d64c306be1aad1a28908b2a86e4986d609a02fe90587c916c74a9c4ffff97653d26d12fd8a89904637f82604f8b76a902ac68672ccbbcd8669b3e851862b21fca69210b4e06fffa8b7f18d68d0ca9a26f3e7e08d8bb6381cca4c100fd076005de8ee67d03a0d5d059aea90a6a7b987d2539d5b5264b4b32b16c8c8fd41f6e46a5d50b018d80076ceee952b9aa8d52bf195a51e2b6a17a36172276c81b249c4a26e4ac9209f4aeb2547c2ff7408ccd03d90d9b93b8ea8ead2b2794eace769723d5bb8703e5a8b079f9b209ac8275c5f9a0f2a53b82b0398c02f267511d4d44ddf9c76593925d6cee8aa5b4a46b673530495bf1ed2b0ecf58782158fbe7927cdde161d61e10ddb3b2df9d646bdee5fc14ab02c9dc59921a13ec222a11af3880868ed54a6c95a1018cb55e2c981e702e3d0749646e192cf81ece2d6fe60422e4f66e9b6b41544574aa4ea0aa1672441782e20cecec6ed7077cef9a0d98a2fca18cc0f5bd58fc85dc8c8baa16d548dc8cc91e84fb0b6b6bb909c69aae62e286a26f20753e053a0532faa2698781c3a58a32dc71e0d15642da6c56dfcaff755f10316fa4c14835a73a6ed3067927485fef68d462aa45203fe3388d653cdfbe4a2c06f2025630c720eb33b339f42d2487a57191a02d72bdadb13556f4c0bec2964e8afd05c414ff65a4996335fc186f455debb37e1dc7351e4350ba11a7c2b055bf73b82ab817710309e2a8202a515debe2ae4232a9332c5793cf7e9271714aa221a7cc6dde098ee4357ad0cd27fccc9316675e982a86b82d7c925fe37e4e8085078a96ccf2ea8b38b92a833d54715567148966e1eb9dd5c198d6aa8271f7773141c2c0c41897758b11dba980ec487b355b4c1e8a40f253fd9e64a8eaea16717180bf6259b0822ea998584e35c93c489d03b34373213f6f4e18bade2ae30e014d8c8dfaf02ff449c318ab47095aa23a86f5a2dcf076be50320b3800165e84867c3a7272a96088c266d1ecfbfb54e0be9bc3cb4eee06a78745760874c65e9cf44dc4353ec392fce959751adbd53420f631e2341d6332d7378edba7373d291b7c4c6f8473d93ccdd5d436adfe1f4d32824b092dfb19670f146e84b9cc4cc4f01014d5f8814ce6b3bcdfc72bfe78084c85c384fca75d7df158ad321dd9fbfa28373b8409929d647bfed4d14c88d083d5ca566b362a2d76d3fd94bd7c5e3256c93d5970c47e23189623b9411690997b503753c93bc4ea1875fc309ce041584de714fbbf46066301a0c9dfc5278486a674c38769676fb8e38a3b179eff160bee9cd8aeef3080a733cec29e3de23a7c821b70e0aec26149c11c05ab3c1e354e56140381bb438f1d22db5b061654b4018bf4b31c78fab01b5ef66876190faa683ff7851e65b94527b665c2703fc6d309e9431944210a85f07fa39affb93753ee07b6cc3c0ba1241298fa4f1fd64feb5b2905c31e769dd499dca717c0e9162cb409df4aa02a5d75b059bc588b016fb3588945a512e5be74979188e4c3de5b87c9962ca352411adda54e1c2b2bc49760128bc1c3f06780689681743973d5267e4c66c39b547720e4694600b23678bd11ed685771c2bca636f82080bb234a3ee9977ae289a32453fa6bd9412abcc9894a607963b77b6ff59c612ff8ab551a44967f3fdee0b99f373086077025072c3490e2b8484c0680744254b31005db4ec3e9bb4db4e341ca828b5e8b6b59eeea429e8ce863ce26ca7bd5caaa077fc502736e738da2e3dc99a97ab0ec1ebca3d44c905c40b9828f53e059ca998de0e45297b51cfa166618e52f75c1653faa5e8c1dd7891dc1333d62a6ae562be0d4f6434047ac771f714c794aaa8df38f204cc7aa66deb2109a0d3066b381841d755a08166278cf51e145596c6daa6539071aaf168bf236598e671902e5b9d5677180fb1a2c8f188c9ff84d1ec67d0f953d224b13688b5ea5cebcc04b26f82f0b616ee7d28f2fd1ce9771391584334981eb2541a0f8dc00dbb9147db6860290149d021c29e3b5d546b19f27f73d1107e860127309b3dbc60aeffe5e556b2f2f0107ada6dd27453013f07b23d8b6cc067b342c2c2b14efe1bfe8b6deb584bd4108fb44cc7e88e86f95b4424825c8e6b76d122115ac408675848cfceca0b31e4385fe42ba048a5bd2d46765d4faa6b09d7afcde15d1479ec3ec2098fbaa7635a848c26a41a26b2bdb95c705b732082a5593a23d1287a7f39469ea368e471929ae6519698665d34931a98ac47adccf980a14cab9abc3d1294f0ca50eb71d9c9838bce786af112f19923cf326c57ab7d3721cfcfc6dadf410a2e129a410d45e285ca56437e01ab0f57079fb613e596cb8692834dc35147af0008d4f3271d98d44b4a9ebce3bc69d89344fe5029d567ab7a3535bcaf359d43960debb51fdfc4f5b35de6e67953b55afb12808d7df46a1d16bc94c72b64ced910ffe480078bd89b6b8584506ec4320418c680ee7c26ca10d0d13bf6340005248ee82cc24b55c176eb4bac716b264c85883cf57ae311df4af066e97b1a3b866d7921bccf9232c50237f94e04b1ec684da5870f0af8799c723ab42355471dbc17be5fd50a4ba1cc836e784be0e1f5db19bfcead3dac304f733c17598771f29d7c7f78c13102a781cf10fb6e34a7c0fec385d0ec73714460dbbf4bac101694b3d384a0741dd7e279920900fcb6d7f6df1ce3cf544488d80eff40005c4153870473345682ffbea8d7dd3942560306ca04706880c1e83e39313fdaa078de90748d9beb409b8ace91f693576f840e891087dcca5a7ec4a57439b56f1151d63247fd4e384b4992bd8d7796a9c9135632d0b3095910545bb99894143660a4a9969c7de2b339c031011299e2eecc81037dc65059ef591dd0bfb10c9b9cc0a0e882996c87a503c4202</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu!  enter your password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 写给自己的散文诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 写给自己的散文诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《在路上》</title>
      <link href="/2021/08/02/du-zai-lu-shang/"/>
      <url>/2021/08/02/du-zai-lu-shang/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="6e8b7a38404d04abc36db8a353f2ce3062b204855862f3875e7f25c76c2dac71">5de89d89894dfc04df6c90fd52cc9dd0b3f8746dd64ae95603cc2a764f54fbe79b5ad1609005c87f89d9cba430f0bed7522647b431d7f6971bae8dd0b3b65b36ffff4d2c659870d5cab23a7244545c6cb656286921f2a5b316e3fa719c8987717869e456c3001f717180cc13df6abfa4711f2a29a88074f13ec9af5f275a33312b97ed55ec387dbcddb1dbfd560dedcf42ab8f8e68fef1204bb268741afde0cd0abab25819c684cce7fa797d2264f3b785221519160fda79f8ced9eb626215826c08177f3680319729dbe0f59cb7f85c5bf3d3085c514b29fa7337f9ad5d2818f794f43eb336b28216fd9295f820189cdbb76934fffcaccb1ccee3e731588993ba483bb7d2c6cdc0870ea39cc0849c356a98304e0172878beb23c68ed11c4ea8268494a31372585ed81a9dc4676f33dbe7b6825edcf290abc46fb291200f4f8e52b615726abf5b38f10a48fd6e943e9a26e9cb91e10cf07b1d03064d4386e270f182593deb36b88a864a5d5825be03ef4e2e96a75b50c4d61875ebf161aae8725082e9532a65e0f940f7b3e3b5cc4aee5d497ddb99e6d583135ec3b57c330a8695275db8112567bac5bf575c4f3c5d59ddaedd803d9c88061b9031a09dfe6d3b6394676517d5b136231bf9d29080556ab82494eccffb5f67a7fe6b4c9a3d1a856db64a7d26d818004835ea96a35b0524f5272bfa59f41a054bdc6716de1dbc139cd019451ff000f928c23531323b549d35b3d340c584a08ac694dd82eade23e82ea234d75020ed3fa1240abdd713a7fe39de8de05035ca65b19610010ef42ce023f7a042d4c4791db0c6f78b9022043241c943dba3382c12838357327350601b312ba07b05837991f1f8042fa52436d58cad078bfcccf80789bb8258d355e5a4f09285efc0ee4cb8b66ae1b858c39a142b9b8292511db6c7b701784ef9d99da55b1a736a12a5562474de1c23add7a0a89e8112bdf9cfa22901823d3d2c5ae4b9da49f1d42194e0c14c13a52aeed9f669772613a1095d95a19eeef24bd4c72a1a39d6c4b216dcea878e59f8e89d2ffd848bedfe5fc506b8fad576a2b496bad7087d216a7240adc6ca1f545372e9b710572d2945cf02a34fad0be48b18d6404e06a25d7d95f5d42e17f9fb7026d5df6a2daa2676e954cd059ccf14867c9b1a1d8d76025236c1acf8afd4dc4e3feb06b42078c9d4bd7d30ac95cb984a9f6bf5421159baff3914a18716760c4f94a170435eaaf10517c5b19ce6ae9efb948a3663a277dbd5b1b92df39751d871176c3f8f977ea79b9e7a7b573b86cd177440a9ec0f454eb63f3b0141aafb16c80f0b3e0b5b393fda4ac89dc77c1a65e655a0f2740dd609955796f987f284ad9f3cc3bb67454205432ba22966e31efed29dc87c656431650b6c3bb6939b1c5ef547199ea96c1b26373b9c94f843169628873b47e8406d02dd4f0a996564ef74d5193024e41abe6fc85c68e4e7aa75e513a27bd887ea967997f273a233ff8211d8bdfea58c647383b64a0a5435e5a8ca46b38a1a5ff79f259b1ef91de0b80bef9bb25e127f81bc299ac0fcf9358b8736547b98c69613157680fb2b3c2db5a9f2a75403660b9dccac18752c44abf4022466af4d1a982506b94425d8715e71b5a40690b4623503a4d896713188bd635d40adc76bef17d9f6d7afd8eecbeeb911df770605b4be1c242ab39529348fce4b248c8411b1006f38c4702bd60b6f8de59830739ce4b74569472fff8ebb3692a5fb0c6e053b0e08e446295f11a4a8c1b137c03c7a1b32eb68442dfffc9b87191d5a2ea7589737b7a80ce99c356a75a3250851b7bc822c6969b044ef75b3b755cbcba52d8cba3f0f8445a7c26780e11dcbf536bfaa8f9009fbfbb24e8e4a8a3cb039eb85e0e8a0a56f684a60b80409a1dcc976b7e66d0f497fb23264a72690a07a21109dd618c6589e0d2316069fed3462b7e4801612ce59883b03b96ad84285a522f43454b5e6e851908f3505d6dcf1aba123e23cbee53934e47beb1cf788b2b45f23afac4f2ae62d4e030ad6126d63f848a1dafcfad123d9c170ca52cb45b8f196dde72458fc79c7c2682c27aad666b698990c9f176f487be3343e7d2b7d40d3437b3fbae3214731fd040137d9ab22b2b8773e6060c440864c79b9890f1e71f45b54370d9101dc308d6529e14646c6970d2bdfa8ed7e7ee161a16f751555bb785c74c7a481b2a6612009249ec45c0907efb0169d312bea0bbdceaf9ed0c3866ab999d6847cce2c19e320355d673e81b24c524ed20f8a090664ef82b133fce1768148132af8623ba053e197560eecc88c2f395e361cd44e034116133afbd9be07ad9df57b1f0ae92b9d9944b0d2c7eda249807637de3b76be362138b9a8a82c28509cc9997843ea7a67e030b648b809e1b5d5857d8be863c220c287c4058eac6a007342fe8820d76c1ce32084141a82e7f675af2225bbfbcef0bf15d6da00d93f9cc5c2baf08927165be21c614f86ec9bd02072d4c86867e68b55a0121726543d7745085f01ae16b4e92252c46d38ab18312cd42366d215a2820e402a2f929d906896bb155f8e6b7b87f6f4093be6a8be23a0e1e78f60888d69eaf338cf2ca9ebe25986c8977fab0a3d21cca6ce86950cd0f523864f2ce5d9c6aa1c1e0d9c63ce214632fbaabf999c7c41ede5e540817dd1a7cac7a38e1c2ae3aed5eb686a4ae4b2d5ac8cdc9b3e4d18e82404cc23fe035733fef06319e814a9093d35f60c11ee70b9205d12fd4467cb996021c1bd5016826ab7c610eef0a34826ad7af2b22e12e4c0938326a79ade8ae8a88352e60b62d21b7a7362f659f600651af7f2ef1c1b8a26fe9527f413e6852d80f2721347dc66335941d2833de4bf3f9b79b94e7184c68b0a04c2dc89808c94a3e4246631d7fadb7e6e69d3cdb567d86c1c0f0f356cefbac0886feb0d1d022631134f6ad11433dff6609266daf1fde250bf7a8057142d72fdfe7d1f0bc250742d8dd2e6a8c5c2d4af99019a3485748809e9eb0f899f084bcbb2b412f6fa1a6df6085b357f3d9f234eb8db87b867d8c6cf1bc77a93a46721d290162662c7473ccdc7b9327546f90be28604cf47bac755b8fa5a7dab871bf7e755a6ee08322dada97037d21144bcc543fe4a95cfcedbcf8cff1e50239ebe7bca33f3f20908608bb5c86888551d84c5bf5a457232e85ba101644704fb3a52874189ba889e00d1ad83ffe6bada129670d587043244e09d5a72f8eba4504dfad939cf1938e2667cc004a1f290eb0f95c9be1e9c03682fbd8c17fd978d38d1280dbdd9846620172f5440ca587e75e0c6b6390189aab7c6b63bff0f601d42f7e13e119baef8d3c0c91fa2eb2fc91b215dd61ca33a514f89d87a74af4025df7e6c5d8db1e575da7698ce5b8cc513c9f72b87c8648c5a5f81a5b26242896b0ebe84f7dc66f2b57ad5de5404f0ab90b4b49a6374413094d880be39410a52968a382804b5b225bf61d44ab692f5a1d2d42f1117f52604735e43adc97003afea64d377d678a2ff9bf729daa001512bfec916c1703e94ba3779d8ba311f45826ffa86caa248760df2ce4ddb51896da89bbbb9af9d790eb10b2ff24d04e64940ede44ffa93ad612588c777273d09b10be48aa9433956ab3e2b96ab14c04be6e67f465b31a0e7eebac5ae01c39fd3d2fcaa2243ab4ab3ef632f0d2e5c0c99620341d4b3cb435a5e6c39bdf05d04f73c866568aa331707273a73593663a1541895a766f39ddbd7f375d98b1b47fd8ec6f51072b94c5586fce1fb43e7892d21c3b84eb76b446b77f57cdfca5400d1178fe3b7f5c93c2035e3eeae3b303fb7a5da2625eaa3609dabf898f410fdf4fd71f6524d20d57247cde5609815b5e13165d9b58a963588ac53885852a0dba95f91a07264cb73d79e7fef5f347385738f1389684cac06a5b2615e1e88dba0deedc3530a53730058cb152710f2d83c9485421328df205ab6b5a4a2c71e04d486acd8b676d1f9ccff3dffd0741f9c46df83e1cc135b44583702032d7cadea96052d96d14cf20e8bc35410533cf02d8a478a4c9911affb345dff3a7502756c33a013fbea0fe11c561e1d2be7f8d1678decf6a3c2d99f1a422cc86cf2b700c6c25bce6419f08f4a19f6bfa50e9fecee71f86cbe8a0396703d36e8eb314dcec13adbe0c5e77560a34f40ba5329671f723921cfedf6079b11cb6722d4e1bc7af7d7c53b712fd8521cd7d1c23e197c83930675d016cc39c55d94329d4e1723648c30a1924986a5e43c2db66d17f4c7a7b4c07ae39bb043ab99888a3c6b776f946182b28afc58327bef6560e73ab5e7cfa18fbf8ddf83d8600c43507586ef4b99a8d795254990d213e1d4b79c05c395f31d9279ef891f19136ddbcd2c891af42f0a5dc54054cbcc18ccaadf92eadb575c93773eb3a122915ba1d5debc226f670f5d41423012d3fccfab80cfc44a1e65bb55d43c80d2321062bf19791bd45671defa63ab1902a0d6531d460201434bb9e255f7aab5d3228deb6635df79ba6f992006625efcf704c348a7178ab593b1dd5fc4f444d76089a88da9310f62bc24ba9cfa08b0c7f4ac0f0afa7ef077f2ed6778aa808d01e575705b8479a4a2d869ee429888ccb609a4a7aa6648856071623be092e0d87b764d70d44ace9bef7452fed40c23e7bc7e719d9db9fc0a120b92904f3f86ae7ba78d2ae5997ab680f8e5d57065cbde6da7762c3ec58902c010941517905567b9cecaf86cc5f9052695ef9db5200cea10175507b5e22338c8118bfbf7b9d2fa00a3b89c425af168c37ead141f236684a73796de4a2d164db4e83d09e4643ec550072ae1f0aa11223083b178a7b56710d004b90989fedf871c656a16a0791fc0853372b390f40e7cc1368ece7df6ef35f08a52188f4e308045793e6bbf25c7ae6b0c9d1b188082f1ea6d7bf5d1b7db937489814a16c51e70bcd946dd3625320a9932e3523c3ceb4b39e51c49b59ca431bcb78b90a6a043890caefe845f9d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu ! enter some words to prove</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 书评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 写给自己的散文诗 </tag>
            
            <tag> 书评 </tag>
            
            <tag> 在路上 </tag>
            
            <tag> Jack Kerouac </tag>
            
            <tag> 舒国治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git|nvm|npm|命令行|linux|jupyter notebook等各种乱七八糟的指令大 全（持续持续缓缓更新中）</title>
      <link href="/2021/08/02/git-nvm-npm-ming-ling-xing-linux-deng-ge-chong-luan-qi-ba-zao-de-zhi-ling-da-quan-chi-xu-chi-xu-huan-huan-geng-xin-zhong/"/>
      <url>/2021/08/02/git-nvm-npm-ming-ling-xing-linux-deng-ge-chong-luan-qi-ba-zao-de-zhi-ling-da-quan-chi-xu-chi-xu-huan-huan-geng-xin-zhong/</url>
      
        <content type="html"><![CDATA[<p>本博客更新不定期，基本上是想到哪里就写什么，就是一些各种常见的脚本命令。</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><hr><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><pre class="line-numbers language-sh"><code class="language-sh">git clone ssh地址   # 项目克隆到本地git add .    # 提交到暂存区？好像是git commit -m""   # 提交到仓库git push origin main(master)# 提交到远程仓库git clone ssh or http  # 克隆到本地<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>暂时就这么多</p><h3 id="本地代码上传到github仓库"><a href="#本地代码上传到github仓库" class="headerlink" title="本地代码上传到github仓库"></a>本地代码上传到github仓库</h3><pre class="line-numbers language-shell"><code class="language-shell">git init  # 建立git仓库，cd到本地项目根目录git add .  # 将项目所有文件添加到仓库中git commit -m"说明语句"  # 将文件commit到仓库# 去github创建自己的Repository<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-a4e249c5e85f6f5ca6c56fc916c150ac_1440w.jpg" alt></p><p>点击<strong>Clone or download</strong>按钮，复制弹出的地址<strong><a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:\</strong>*/test.git**，记得要用SSH的地址，尽量不要用HTTPS的地址，如上图所示</p><p><strong>将本地的仓库关联到github上—把上一步复制的地址放到下面</strong></p><pre class="line-numbers language-shell"><code class="language-shell">git remote add origin git@github.com:***/***.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传到github之前，先pull一下：</p><pre class="line-numbers language-shell"><code class="language-shell">git pull origin main(or master)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传到github远程仓库</p><pre class="line-numbers language-shell"><code class="language-shell">git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><hr><h3 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h3><pre class="line-numbers language-shell"><code class="language-shell">nvm lsnvm list  # 列出当前node包nvm -v  # 列出nvm版本nvm use 版本号  # 使用哪个版本nvm install 版本号  # 下载哪个版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加速源"><a href="#加速源" class="headerlink" title="加速源"></a>加速源</h3><p>在settings.txt后面加上我们的这么几行代码：</p><pre class="line-numbers language-shell"><code class="language-shell">proxy:node_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以加速我们的下载</p><h3 id="记得有时候要更改环境变量"><a href="#记得有时候要更改环境变量" class="headerlink" title="记得有时候要更改环境变量"></a>记得有时候要更改环境变量</h3><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><hr><h3 id="指令-2"><a href="#指令-2" class="headerlink" title="指令"></a>指令</h3><pre class="line-numbers language-shell"><code class="language-shell">npm inpm install # 都是安装对应包，但是前者会找到最新的包给你安装（似乎是这样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h2><hr><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><hr><pre class="line-numbers language-shell"><code class="language-shell">hexo clean && hexo g && hexo dhexo clean && hexo g && hexo shexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="传统建立文章方式"><a href="#传统建立文章方式" class="headerlink" title="传统建立文章方式"></a>传统建立文章方式</h3><p>一般我们都会使用 <code>hexo new &lt;title&gt;</code> 来建立文章，这种建立方法会将新文章建立在 <code>source/_posts</code> 目录下，当使用 <code>hexo generate</code> 编译 markdown 文件时，会将其 HTML 结果编译在 <code>public</code> 目录下，之后 <code>hexo deploy</code> 将会把 <code>public</code> 目录下所有文章部署到 GitHub，这是我们熟悉的 Hexo 流程。</p><p>这种建立文章方式的缺点是：若我们同时编辑多篇文章，只要其中一篇文章尚未编辑完成，也会随着 <code>hexo deploy</code> 一起部署到 GitHub，也就是 GitHub 可能会看到我们尚未完成的文章。</p><h3 id="建立文章草稿"><a href="#建立文章草稿" class="headerlink" title="建立文章草稿"></a>建立文章草稿</h3><pre><code>$ hexo new draft &lt;title&gt;</code></pre><p>Hexo 另外提供 <code>draft</code> 机制，它的原理是新文章将建立在 <code>source/_drafts</code> 目录下，因此 <code>hexo generate</code> 并不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署到 GitHub。</p><h3 id="本机预览草稿"><a href="#本机预览草稿" class="headerlink" title="本机预览草稿"></a>本机预览草稿</h3><pre><code>$ hexo S --draft</code></pre><p>虽然 <code>hexo generate</code> 不会编译 <code>source/_drafts</code> 目录下的文章，但 Hexo 的 <code>Hexo server</code> 另外提供 <code>--draft</code> 参数，这让我们只要搭配 <code>hexo-browsersync</code> plugins，就可以达到一边编辑 <code>markdown</code> 文章，一边使用浏览器预览的目的。</p><h3 id="将草稿发布为正式文章"><a href="#将草稿发布为正式文章" class="headerlink" title="将草稿发布为正式文章"></a>将草稿发布为正式文章</h3><pre><code>$ hexo P &lt;filename&gt;</code></pre><p>其中 <code>&lt;filename&gt;</code> 为不包含 <code>md</code> 后缀的文章名称。它的原理只是将文章从 <code>source/_drafts</code> 移动到 <code>source/_posts</code> 而已。</p><p>之后的 <code>hexo generate</code> 与 <code>hexo deploy</code> 的用法就完全一样了。</p><p>若日后想将正式文章转为为草稿，只需手动将文章从 <code>source/_posts</code> 目录移动到 <code>source/_drafts</code> 目录即可。</p><h2 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h2><hr><p>.ipynb转换为.md、.pdf、.tex等格式：<a href="https://blog.csdn.net/red_stone1/article/details/73380517" target="_blank" rel="noopener">https://blog.csdn.net/red_stone1/article/details/73380517</a></p><p><a href="https://blog.csdn.net/qq_35423500/article/details/79565146" target="_blank" rel="noopener">cell的markdown与code指令快速更换</a>:在vscode中可以选择tab+y or tab+m自由切换，还有一篇<a href="https://blog.csdn.net/wield_jjz/article/details/105607301?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.control&spm=1001.2101.3001.4242" target="_blank" rel="noopener">博客</a>讲的也挺好</p><h2 id="改环境变量"><a href="#改环境变量" class="headerlink" title="改环境变量"></a>改环境变量</h2><hr><p><code>Win + R</code> ，输入：<code>SystemPropertiesAdvanced.exe</code> ，回车。</p><p>然后点击 <code>环境变量</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C1.png" alt="0"></p><p>找到 <code>用户变量</code> 中的 <code>Path</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C2.png" alt></p><p>然后在里面修改一下 <code>npm</code> 的路径，我的是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C4.png" alt></p><p>点击确认之后，再进入 <code>系统变量</code> ，找到 <code>PATH</code> ，点击编辑：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C5.png" alt></p><p>然后修改 <code>nodejs</code> 的路径，我的是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C6.png" alt></p><p>然后就可以正常运行了。</p>]]></content>
      
      
      <categories>
          
          <category> 指令集 </category>
          
          <category> shell命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> nvm </tag>
            
            <tag> npm </tag>
            
            <tag> linux </tag>
            
            <tag> 命令行 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些小知识</title>
      <link href="/2021/08/02/yi-xie-xiao-zhi-shi/"/>
      <url>/2021/08/02/yi-xie-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="34cee35cb45aed522f9a889a2555c305fdfd781220ad239a0e38f2f27406735d">10d79030e8222445804370796b90fca19546fd7454b6ce835c19dd35fdfc5eb70066be35ece83facf975a45633f6c77bafee90d5af3d8e3ef70fff06e05766dfabce520ef766a86d4db753a1af8bb54108d1866d040fab1f020558624c5752905e36b020cf2d893ea43c3c7b65288e669b2179adb1b5b7854e7dd43029a0ce3db791988e0e00f669785575b4cc880c4a4285afe76b8ce751fa1665c75def274362966550914b6c8a03e456c777f5924925d8c3c787eb4c1b339b22d34eff8e3a0836cd46f1d9bc1b8aed1c0054a5efaa0e73bf6bb94bbc3acf0defd321f6ba48067512ac62cc6e472bd498185916a2a96de5b7d5e6d9f652531d7f26ea36d959d35729c5f94165c41c681427c5d445c47c62bbcbe1003b77f0c71c5fbd553aa66cbfb79b3104e1ec9827a0215835946e514632b2d1bf92a13f515c6eb1783b2d81dd91885d0c7cbcc52f2969ba4652d4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu ! enter some words to prove</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数码知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
            <tag> 数码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>readme</title>
      <link href="/2021/08/02/readme/"/>
      <url>/2021/08/02/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="逯润雨的博客"><a href="#逯润雨的博客" class="headerlink" title="逯润雨的博客"></a>逯润雨的博客</h1><p>这是我本人的博客平台，欢迎大家前来访问🥳<a href="https://lry89757.github.io/">https://lry89757.github.io/</a><br>刚建成没多久，有许多功能都不是很完善，我以后会在readme文档中记录更新功能与修改BUG与新的相关文章的。  </p><h2 id="8-26-11-22第十七次更新"><a href="#8-26-11-22第十七次更新" class="headerlink" title="8.26 11:22第十七次更新"></a>8.26 11:22第十七次更新</h2><hr><ol><li>更新了readme文档</li><li>稍微优化了一些东西，使界面更加美观了</li><li>待完成：评论部分</li></ol><h2 id="8-25-15-30第十六次更新"><a href="#8-25-15-30第十六次更新" class="headerlink" title="8.25 15:30第十六次更新"></a>8.25 15:30第十六次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了几篇博客</li><li>尝试了一下英文版</li><li>增加了留言板，但是还没开放评论</li><li>待完成：评论</li></ol><h2 id="8-19-18-09第十五次更新"><a href="#8-19-18-09第十五次更新" class="headerlink" title="8.19 18:09第十五次更新"></a>8.19 18:09第十五次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了几篇博客</li><li>添加了张大佬的博客友链</li><li>重新更改完善了简历</li><li>待完成：依然是评论</li></ol><h2 id="8-12-12-11第十四次更新"><a href="#8-12-12-11第十四次更新" class="headerlink" title="8.12 12:11第十四次更新"></a>8.12 12:11第十四次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了一篇爬虫爬来的博客，完善了一些文章</li><li>待完成：评论</li></ol><h2 id="8-10-12-03第十三次更新"><a href="#8-10-12-03第十三次更新" class="headerlink" title="8.10 12:03第十三次更新"></a>8.10 12:03第十三次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了3篇关于以太坊、反挖矿病毒的博客（转）</li><li>待完成：评论</li></ol><h2 id="8-10-0-00第十二次更新"><a href="#8-10-0-00第十二次更新" class="headerlink" title="8.10 0:00第十二次更新"></a>8.10 0:00第十二次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了一篇博客，关于梅西</li><li>加了个友链</li><li>待完成：评论</li></ol><h2 id="8-7-14-13第十一次更新"><a href="#8-7-14-13第十一次更新" class="headerlink" title="8.7 14:13第十一次更新"></a>8.7 14:13第十一次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了两篇博客，关于LeNet分类CIFAR10和常用tensor操作</li><li>解决了首页图片加载不出来的问题 <del>（换个小点儿的图片就行了）</del></li><li>待完成：评论+外链</li></ol><h2 id="8-6-22-44第十次更新"><a href="#8-6-22-44第十次更新" class="headerlink" title="8.6 22:44第十次更新"></a>8.6 22:44第十次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了一个全英文的CIFAR-10数据集的详解<del>（英文水平太低，写了好长时间🤐）</del></li><li>待完成：评论+音乐外链</li></ol><h2 id="8-6-12-33第九次更新"><a href="#8-6-12-33第九次更新" class="headerlink" title="8.6 12:33第九次更新"></a>8.6 12:33第九次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了一个项目</li><li>更新了shell指令的博客</li><li>解决了代码高亮</li><li>待完成：音乐部分、评论模块</li></ol><h2 id="8-5-23-48第八次更新"><a href="#8-5-23-48第八次更新" class="headerlink" title="8.5 23:48第八次更新"></a>8.5 23:48第八次更新</h2><hr><ol><li>更新了readme文档</li><li>把算法刷题的栈系列解析肝完了， 一共六篇博客</li><li>待完成：见第三次更新，不过最要紧的是代码高亮和音乐部分。</li></ol><h2 id="8-4-15-28第七次紧急更新！"><a href="#8-4-15-28第七次紧急更新！" class="headerlink" title="8.4 15:28第七次紧急更新！"></a>8.4 15:28第七次紧急更新！</h2><hr><p><strong>感谢帮忙测试朋友提出相关意见，我关停了网站对一些隐私做了紧急修改，感谢各位的帮助！</strong></p><h2 id="8-4-11-40第六次更新"><a href="#8-4-11-40第六次更新" class="headerlink" title="8.4 11:40第六次更新"></a>8.4 11:40第六次更新</h2><hr><ol><li>更新了readme文档</li><li>添加了转载限定规则模块采用知识共享署名 4.0 国际许可协议<del>（虽然我的文章不值得被转载）</del></li><li>取消了轮播图自动轮播，去掉了没用的音乐外链</li><li>增加了IP检测（excuse me ?)🤣😅</li><li>待完成：见第三次更新</li></ol><h2 id="8-3-15-39第五次更新"><a href="#8-3-15-39第五次更新" class="headerlink" title="8.3 15:39第五次更新"></a>8.3 15:39第五次更新</h2><hr><ol><li>更新了readme文档</li><li>博客：对于林俊杰最近事情的看法</li><li>加入了音乐播放功能哈哈哈哈！！😎😎当然目前的音乐都是我知道能够外链播放的，后期会继续整修的（没发现的朋友可以看页面左下角哦）</li><li>待完成：见第三次更新😬</li></ol><h2 id="8-2-22-25第四次更新"><a href="#8-2-22-25第四次更新" class="headerlink" title="8.2 22:25第四次更新"></a>8.2 22:25第四次更新</h2><hr><ol><li>更新了readme文档</li><li>友链增加了flylee，同班学霸</li><li>博客：写了一些对生活感想</li><li>进一步修改了markdown数学公式无法显示问题。</li><li>待完成：见第3次更新😁(我不催我自己！！！)</li></ol><h2 id="8-2-18-39第三次更新"><a href="#8-2-18-39第三次更新" class="headerlink" title="8.2 18:39第三次更新"></a>8.2 18:39第三次更新</h2><hr><p><del><em>看来刚建好博客更新的就是快啊……哈哈哈</em></del></p><ol><li>更新了readme文档😅</li><li>发布了2篇博客，一篇是读《在路上》后对生活的感想思考（有兴趣阅读的可以和我联系索要密码，破译出密码的大佬记得和我联系🤩），另一篇是常用的shell命令（git/nodejs/nvm/npm）集</li><li>实现了推荐置顶功能</li><li>待完成：<ul><li>二级目录</li><li>相册</li><li>代码高亮</li><li>评论</li></ul></li></ol><h2 id="8-2-14-28第二次更新"><a href="#8-2-14-28第二次更新" class="headerlink" title="8.2 14:28第二次更新"></a>8.2 14:28第二次更新</h2><hr><ol><li><p>更新了密码功能，对于一些文章实现了加密， <em>如果有小伙伴们对加密文章感兴趣，欢迎发邮件或是通过各种渠道联系我获取密码，顺便交个朋友👀</em>， 或者有关大佬可以选择直接尝试破译哦~那就更得交个朋友了😅</p></li><li><p>更新了readme文档</p></li><li><p>发布了一篇博客，关于一些数码小知识，并测试了密码功能。</p></li><li><p>待完成：</p><ul><li>代码高亮功能</li><li>二级目录</li><li>记录nvm、nodejs、npm踩坑历史的博客。</li><li>评论功能</li></ul></li></ol><h2 id="8-2-11-00-第一次更新"><a href="#8-2-11-00-第一次更新" class="headerlink" title="8.2  11:00 第一次更新"></a>8.2  11:00 第一次更新</h2><hr><ol><li>友链：修正了部分无法显示问题， 加进去了更多友链</li><li>发布了3篇新文章，全部都是关于numpy的小知识</li><li>增加mathjax已解决无法显示markdown数学公式问题</li><li>更新了readme文档</li><li>预计会进一步：  <ul><li>二级目录</li><li>一个博客记录nvm、nodejs、npm踩坑历史😖</li><li>评论模块</li><li>文章密码问题</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy中对于tile的理解</title>
      <link href="/2021/08/02/numpy-zhong-dui-yu-tile-de-li-jie/"/>
      <url>/2021/08/02/numpy-zhong-dui-yu-tile-de-li-jie/</url>
      
        <content type="html"><![CDATA[<p>近些天使用numpy的时候发现了这么一个函数tile，感觉这个函数比较有用，可以将减少循环，直接矩阵运算优化运算速度。博主认为很有必要认真讨论一下这个函数的功能。</p><h1 id="官网解释"><a href="#官网解释" class="headerlink" title="官网解释"></a>官网解释</h1><p>老传统，我们先看一下官网是怎么说的：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210708233501849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="np.tile"><br>相当于是一个复制函数，扩充矩阵的规模值直至到我们满意的一个形状。”tile”在英文中作动词会有“铺”的意思，与extend是同义词。<br>通过提供的次数reps来决定重复A的次数来构造一个array。<br>如果reps的长度为d，那么给出结果的维度就是max(d, A.ndim).</p><p>如果 A.ndim &lt; d，则通过添加新轴将 A 提升为 d 维。 因此，将形状 (3,) 数组提升为 (1, 3) 以进行 2-D 复制，或将形状 (1, 1, 3) 提升为 (1, 1, 3) 以进行 3-D 复制。 如果这不是所需的行为，请在调用此函数之前手动将 A 提升到 d 维度。</p><p>如果 A.ndim &gt; d，代表通过在它前面添加 1 被提升为 A.ndim。 因此，对于形状为 (2, 3, 4, 5) 的 A，(2, 2) 的重复次数被视为 (1, 1, 2, 2)。</p><p>最后注意一下：这里特意提到了<strong>虽然 tile 可以用于广播，但强烈建议使用 numpy 的广播操作和功能。</strong></p><h1 id="详细解析"><a href="#详细解析" class="headerlink" title="详细解析"></a>详细解析</h1><p>我们首先来看几个简单例子：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如代码所示，如果reps只是一个标量的话，我们仅需将其在矩阵内部加上赋值reps倍即可，而如果是矢量矩阵例如reps是（a, b, c）的话，我们需要在内部扩充c倍之后，将这一个整体矩阵看作是一个A然后他是形状为（a,b)里面的一个元素，这样的话我们就能够成功理解有关操作了。按照这个思路，我们看一下更加复杂的一些操作：</p><pre class="line-numbers language-python"><code class="language-python">b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上最后一个便是我们所谓的广播操作，但是numpy官方并不希望我们利用这个函数来进行广播操作。<br>最后仍然放一些实例吧：</p><pre class="line-numbers language-python"><code class="language-python">c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">b <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">28</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">27</span>  <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">4</span> <span class="token number">22</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">23</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.tile.html" target="_blank" rel="noopener">https://numpy.org/doc/stable/reference/generated/numpy.tile.html</a></p>]]></content>
      
      
      <categories>
          
          <category> numpy的小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 矩阵运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy中对于axis的理解</title>
      <link href="/2021/08/02/numpy-zhong-dui-yu-axis-de-li-jie/"/>
      <url>/2021/08/02/numpy-zhong-dui-yu-axis-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我们知道axis这个东西经常出现在numpy的sum、argsort等一系列有关于数组的操作中，numpy中的轴axis是很重要的，许多numpy的操作根据axis的取值不同，作出的操作也不相同。可以说，axis让numpy的多维数组变的更加灵活，但也让numpy变得越发难以理解。因此，弄清楚axis的作用显得尤为重要。作为一个很基本同时很重要的概念，博主觉得很有必要详细深入了解一下这一名词。<br><em>下面把博主的一些发现分享给大家。</em></p><h1 id="简单了解axis"><a href="#简单了解axis" class="headerlink" title="简单了解axis"></a>简单了解axis</h1><hr><p>axis 中文翻译指“轴”、“枢轴”。我们可以看一下<a href="https://numpy.org/doc/stable/user/quickstart.html#the-basics" target="_blank" rel="noopener">英文官网</a>的解释:</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210708104217716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="关于axis"></p><p>NumPy 的主要对象是同构多维数组。 它是一个元素表（通常是数字），所有类型都相同，由非负整数元组索引。 在 NumPy 中，维度称为轴。</p><p>例如，3D 空间 [1, 2, 1] 中一个点的坐标有一个轴。 该轴有 3 个元素，因此我们说它的长度为 3。在下图中的示例中，该数组有 2 个轴。 第一个轴的长度为 2，第二个轴的长度为 3。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实际上这个维度称为轴并不是很好理解，必须<strong>说明这里的轴维度和我们数学物理上面的是有很大区别的</strong>。</p><h1 id="与数学物理方面的区别"><a href="#与数学物理方面的区别" class="headerlink" title="与数学物理方面的区别"></a>与数学物理方面的区别</h1><hr><p>我们现随机建立一个3×3的数组。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.14828241</span><span class="token punctuation">,</span> <span class="token number">0.67698515</span><span class="token punctuation">,</span> <span class="token number">0.22729984</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.78760285</span><span class="token punctuation">,</span> <span class="token number">0.71820171</span><span class="token punctuation">,</span> <span class="token number">0.43459394</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.85447318</span><span class="token punctuation">,</span> <span class="token number">0.72708047</span><span class="token punctuation">,</span> <span class="token number">0.56316259</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该矩阵由于形状是3×3的，所以我们在线性代数里面认为这个矩阵维度是三（秩为三），但是在numpy的数组中，这个array的维数只有2，分别有axis=0,axis=1这两个轴，而axis=0的轴长度为3，axis=1的轴长度也为3.所以这里我们格外注意一下。</p><h1 id="进一步理解"><a href="#进一步理解" class="headerlink" title="进一步理解"></a>进一步理解</h1><hr><p>我们进行一下有关axis的操作，例如求和：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> carray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以看出，如果我们<strong>令axis=0,它会按照列求和得到一个和矩阵，令axis=1会得到一个按照行求和的矩阵</strong>。那么如果我们就这么记的话是不是就万事大吉了？当然不是！因为通常操作中，我们会操作维数更高的数组，这么的话，就无法使用0列1行的方法去操作了。</p><p>实际上，我们有着以下的规律：</p><p><strong>设axis=i，则Numpy沿着第i个下标变化的方向进行操作</strong></p><p><em>当然这里稍微补充一下如果是axis=-1的情况，那么就是沿着倒数第一个下标变化的方向开始操作</em></p><p>这里可以多举几个例子来帮助我们理解一下：</p><p>以以下三维数组为例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> darray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>这是一个三维数组，若axis=0,那么我们就应该把d[0][i][j]+d[1][i][j]+d[2][i][j]加起来，最终得到一个形状为2×4的矩阵</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> darray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图所示，确实得到了一个2×4的矩阵。</p><ol start="2"><li>接着我们尝试axis=1,那么应该得到了一个3×4的矩阵</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> darray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果便是如此。</p><p>实际上除了sum函数，还有着许许多多需要用到这方面知识的函数，例如max、min、average、argsort、sort这些函数。</p><p>举几个我们看一下：</p><ul><li>sort</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> e <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> earray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> earray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> earray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>argsort</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> farray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort <span class="token operator">=</span> f<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sortarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort0<span class="token operator">=</span>f<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort0array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort1<span class="token operator">=</span>f<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort1array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接：</p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/31275071" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31275071</a></p></li><li><p><a href="https://blog.csdn.net/m0_37673307/article/details/82118030" target="_blank" rel="noopener">https://blog.csdn.net/m0_37673307/article/details/82118030</a></p></li><li><p><a href="https://stackoverflow.com/questions/19389910/in-python-numpy-what-is-a-dimension-and-axis#:~:text=In%20Numpy%20dimensions%20are%20called,has%20a%20length%20of%203" target="_blank" rel="noopener">https://stackoverflow.com/questions/19389910/in-python-numpy-what-is-a-dimension-and-axis#:~:text=In%20Numpy%20dimensions%20are%20called,has%20a%20length%20of%203</a>.</p></li><li><p><a href="https://numpy.org/doc/stable/user/quickstart.html#the-basics" target="_blank" rel="noopener">https://numpy.org/doc/stable/user/quickstart.html#the-basics</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> numpy的小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 矩阵计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>argsort函数的详解</title>
      <link href="/2021/08/02/argsort-han-shu-de-xiang-jie/"/>
      <url>/2021/08/02/argsort-han-shu-de-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>argsort函数经常用于矩阵的一些不破坏原有数组的情况下得到原数组的有序序列的情况。</p><h1 id="官网解释"><a href="#官网解释" class="headerlink" title="官网解释"></a>官网解释</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210708101432523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="官网介绍"><br>使用 kind 关键字指定的算法沿给定轴执行间接排序。它以排序的顺序返回与给定轴上的索引数据具有相同形状的索引数组。<br>axisint 或 None，可选<br>排序的轴。默认值为 -1（最后一个轴）。如果没有，则使用扁平数组。</p><p>kind:{‘快速排序’、‘合并排序’、‘堆排序’、‘稳定’}，排序算法。默认值为“快速排序”。请注意，“stable”与“mergesort”都在幕后使用 timsort，通常，实际实现会因数据类型而异。保留“合并排序”选项是为了向后兼容。</p><p>在 1.15.0 版更改。：添加了“稳定”选项。</p><p>orderstr 或 str 列表，可选<br>当 a 是一个定义了字段的数组时，这个参数指定要比较哪些字段，第一个，第二个等等。 单个字段可以指定为字符串，不是所有的字段都需要指定，但仍然会使用未指定的字段，在它们出现在 dtype 中的顺序，以打破联系。</p><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><p>实际上就是返回了一个升序的序列，里面每一个元素都是排序好后的元素在原序列中的索引。这样方便我们在原序列中找到每一个元素。这一句话可能不是很好理解我们结合一定的例子来看一下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如以上来看，原序列为[8, 1, 5, 6], 我们其使用argsort函数之后得到序列[1, 2, 3, 0],  那么我们直接使用a[1]就是a中最小的元素，a[0]就是a中最大的元素。<br>我们可以多看几个类似的例子, 这里可以看一下二维数组:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上可以看出，实际上如果是二维数组的话，不仅仅有这这么一种排序的方法，不仅可以按照行来排，也可以按照列来排序。这里仍然是通过axis轴来确定的排序方式，函数默认axis=-1，这里我在之前博客有提到过，读者如果对于axis函数比较陌生的话可以看一下<a href="https://blog.csdn.net/LRY89757/article/details/118570303?spm=1001.2014.3001.5501" target="_blank" rel="noopener">我之前的一篇博客</a>这里详细解释了axis的有关理解。<br>以下再给出官网几个例子：</p><pre class="line-numbers language-python"><code class="language-python">ind <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># sorts along first axis (down)</span>indarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>take_along_axis<span class="token punctuation">(</span>x<span class="token punctuation">,</span> ind<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># same as np.sort(x, axis=0)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以及不常用的根据关键字：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>xarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      dtype<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>大家如果有兴趣可以去<a href="https://numpy.org/doc/stable/reference/generated/numpy.argsort.html" target="_blank" rel="noopener">官网</a>看一下。</em></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.argsort.html" target="_blank" rel="noopener">https://numpy.org/doc/stable/reference/generated/numpy.argsort.html</a></p><p><a href="https://blog.csdn.net/LRY89757/article/details/118570303?spm=1001.2014.3001.5501" target="_blank" rel="noopener">https://blog.csdn.net/LRY89757/article/details/118570303?spm=1001.2014.3001.5501</a></p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> numpy的小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 矩阵计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构各类排序算法详解+代码分析</title>
      <link href="/2021/08/01/shu-ju-jie-gou-ge-lei-pai-xu-suan-fa-xiang-jie-dai-ma-fen-xi/"/>
      <url>/2021/08/01/shu-ju-jie-gou-ge-lei-pai-xu-suan-fa-xiang-jie-dai-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知不觉，数据结构已经学完了，博主也马上大二了😭时间过得太快了😱，但是数据结构学得确实不太好，楼主花了将近一天的时间整理了一下排序的有关算法。希望对大家也有所帮助。<br>@<a href="目录">TOC</a></p><hr><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><hr><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>每步将一个待排序记录，按其关键码大小，插入到前面已经排好序的一组记录的适当位置上，直到记录全部插入为止。</p><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertSort</span> <span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//对顺序表L作直接插入排序</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span> i <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//直接在原始无序表L中排序</span><span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若L.r[i]较小则插入有序子表内</span><span class="token punctuation">{</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先将待插入的元素放入“哨兵”位置</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子表元素开始后移</span><span class="token keyword">for</span> <span class="token punctuation">(</span> j<span class="token operator">=</span>i<span class="token number">-2</span><span class="token punctuation">;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span> <span class="token operator">--</span>j <span class="token punctuation">)</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只要子表元素比哨兵大就不断后移</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直到子表元素小于哨兵，将哨兵值送入</span>        <span class="token comment" spellcheck="true">//当前要插入的位置（包括插入到表首）</span>     <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//if</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// InsertSort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p><em>从第二个记录开始逐趟开始插入</em></p><h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><hr><p>这个相对于直接插入排序，减少了比较的次数，但是没有减少移动的次数：$$n^2$$ / 4次</p><p>只是我们查找插入的位置时，使用了折半查找的方法。</p><h3 id="二路排序"><a href="#二路排序" class="headerlink" title="二路排序"></a>二路排序</h3><hr><p>相比之下，减少了移动的次数，约为$$n^2$$ / 8次</p><p><a href="http://data.biancheng.net/view/67.html" target="_blank" rel="noopener">二路排序</a></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>first<span class="token punctuation">,</span>final<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    first <span class="token operator">=</span> final <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分别记录temp数组中最大值和最小值的位置</span>    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 待插入元素比最小的元素小</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            first <span class="token operator">=</span> <span class="token punctuation">(</span>first <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 待插入元素比最大元素大</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">[</span>final<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            final <span class="token operator">=</span> <span class="token punctuation">(</span>final <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>final<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 插入元素比最小大，比最大小</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token punctuation">(</span>final <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当插入值比当前值小时，需要移动当前值的位置</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//插入该值</span>            temp<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//因为最大值的位置改变，所以需要实时更新final的位置</span>            final <span class="token operator">=</span> <span class="token punctuation">(</span>final <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将排序记录复制到原来的顺序表里</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token punctuation">(</span>first <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><hr><p><em>希尔排序就是指取固定的一些增量序列来分别进行直接插入排序，比如去dk = 5， 3， 1这种，到最后对基本有序的全体序列进行一次直接插入排序注意增量序列的之中没有除1之外的公因子，且最后一个值必定为1.</em></p><p>算法思想：</p><p>先将整个待排记录序列分割成若干子序列分别进行直接插入排序，待整个序列中的记录基本有序时，再对全体记录进行一次直接插入排序。分为多个子序列的方法:设置一系列增量值（dk值），将相隔某个增量的记录组成一个子序列，如第一趟dk=5,则r1，r6.为一组，r2，r7为一组，然后每一组进行直接插入排序。以此类推。不断减小dk的值，直到为1，再进行直接插入排序就能实现对整体记录的插入排序了。</p><p>dk值较大，子序列中对象较少，速度较快；</p><p>dk值逐渐减小，子序列中对象变多，但大多数对象已基本有序，所以排序速度仍然很快。</p><p>输入：增量的数目k，各个增量dk，  顺序表的长度，顺序表中各个元素。</p><p>输出：排好序的顺序表中各个元素。</p><p>算法图解（这是从网上看到的图，侵删）：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630151121305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="希尔排序"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> dlta<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//按增量序列dlta[0..t-1]对顺序表L做希尔排序。</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>t<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>        <span class="token function">ShellInsert</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> dlta<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//一趟增量为dlta[k]的插入排序</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShellInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> dk<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对顺序表进行一趟增量为dk的Shell排序，dk为步长因子</span>    <span class="token comment" spellcheck="true">//相对于一趟插入排序相比，做了如下修改：</span>    <span class="token comment" spellcheck="true">//  1. 前后记录位置的增量是dk，而不是1</span>    <span class="token comment" spellcheck="true">//  2. r[0]只是暂存单元，不是哨兵。当j&lt;=0时，插入位置已找到。</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>dk<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//开始将r[i]插入有序增量子表</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token operator">-</span>dk<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token function">RedCopy</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//暂存在r[0]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span>dk<span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>j<span class="token operator">-</span><span class="token operator">=</span>dk<span class="token punctuation">)</span>                <span class="token function">RedCopy</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span>dk<span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键字较大的记录在字表中后移</span>        <span class="token function">RedCopy</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span>dk<span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在本趟结束时将r[i]插入到正确位置</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><hr><p><em>就是先选用一个数（可以随机选也可以直接用第一个），以他为基准然后比它大的放后面，比他小的放前面，这样形成一个大致左边必定比右边小的序列后，再次对于两边的这些数分段进行递归相同的操作，不稳定</em></p><p>优点：平均性能好，O(nlog2n)，2为下标</p><p>缺点：不稳定，初始序列有序或基本有序时，时间复杂度降为O(n^2)。</p><p>算法图解：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630150456865.gif#pic_center" alt="快速排序"></p><p>快排的算法详解：</p><p>一趟快速排序我们最初实现的思想就是设置两个指针low、high,一个指向基准的元素，一个指向末尾，然后我们从末尾开始往前遍历，如果我们的high小于基准了开始，那么就和low指向的基准交换。然后开始从low开始往后遍历，直到找到一个low比基准大的元素和此时的high（指向的还是基准）交换，然后再从high开始……如此重复直到我们的low=high.</p><p>但是这么算的话每次交换一对记录需要进行3次移动赋值操作。实际上我们对于基准的移动是多余的，基准就在我们最后循环结束的low=high位置。所以我们可以选择将基准提前放好，然后我们选择该交换的时候直接赋值high小于基准后直接赋值给low……直到我们low = high的时候再将放好的基准放到low(high)的位置。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//用子表的第一个记录作基准记录</span>    pivotkey <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//记录关键字</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//从表的两端交替地向中间扫描</span>    <span class="token punctuation">{</span>                                        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">>=</span> pivotkey<span class="token punctuation">)</span><span class="token operator">--</span>high<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//将比基准小的记录移到低端</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> pivotkey<span class="token punctuation">)</span><span class="token operator">++</span>low<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将比基准大的记录移到高端</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//返回基准位置</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">QSort</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对顺序表L中的子序列L.r[low..high]做快速排序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">>=</span> high<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    pivotkey <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QSort</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivotkey<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QSort</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> pivotkey<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间效率：O(nlog2n) —因为每趟确定的元素呈指数增加<br>空间效率：O（log2n）—递归栈(存每层low，high和pivot)<br>稳 定 性： 不 稳 定 —因为跳跃式交换。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><hr><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>每一趟(第 i 趟)在后面 n-i+1 个待排记录中选取关键字最小的记录作为有序序列中的第 i 个记录。</p><p><em>也就是先从所有中选出最小的作为第一个，再从剩下的选出最小的作为第二个，…….</em></p><p>分类主要有简单选择排序，锦标赛排序，堆排序。</p><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><hr><p>基本思想：每经过一趟比较就找出一个最小值，与待排序列<br>最前面的位置互换即可。<br>——首先，在n个记录中选择最小者放到r[1]位置；然后，从剩余的n-1个<br>记录中选择最小者放到r[2]位置；…如此进行下去，直到全部有序为止。<br>优点：实现简单<br>缺点：每趟只能确定一个元素，表长为n时需要n-1趟<br>前提：顺序存储结构</p><pre class="line-numbers language-c"><code class="language-c">Void <span class="token function">SelectSort</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> <span class="token function">SelectMinKey</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> i<span class="token operator">!=</span>j <span class="token punctuation">)</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> «r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//for</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//SelectSort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>显然简单选择排序的缺点是非常明显的，第一次比较n-1次，第二次比较n-2次，以此类推，如果我们要优化的时候，我们要考虑<strong>是否第一趟比较n-1次后第二趟还需要比较n-2次</strong>，这个是很重要的。所以我们应该从减少比较个数这个地方开始着手优化</em></p><p>我们可以参考我们体育比赛中的锦标赛排序，在8个运动员中选择前3名最多只需要11场比赛，而不是7+6+5场比赛。</p><p>而这就是我们的锦标赛排序：</p><h3 id="锦标赛排序"><a href="#锦标赛排序" class="headerlink" title="锦标赛排序"></a>锦标赛排序</h3><hr><p>基本思想：与体育比赛时的淘汰赛类似。<br>首先对 n 个记录的关键字进行两两比较，得到 [n/2] 个 优胜者(关键字小者)，作为第一步比较的结果保留下来。然后在这 [n/2] 个较小者之间再进行两两比较，…，如此重复，直到选出最小关键字的记录为止。<br>优点：减少比较次数，加快排序速度<br>缺点：空间效率低</p><p>算法图解：</p><p>以关键字序列T= （21，25，49，25*，16，08，63）为例</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164415761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164647564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164813897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164859899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164954897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630165030443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630165047263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p> 锦标赛排序构成的树是完全(满）二叉树，其深度[$log_{2}{n}$] +1，其中 n 为待排序元素(叶子结点)个数。<br>• 时间复杂度：O($nlog_{2}{n}$) —n个记录各自比较约$log_{2}{n}$次<br>• 空间效率： O(n） —胜者树的附加内结点共有n0-1个！<br>• 稳定性：稳定 —可事先约定左结点“小”</p><p>这种排序方法的劣势就是消耗空间较大，“最大值”进行多余的比较等问题。为了弥补，J.willioms在1964年提出了另一种形式的选择排序——堆排序。</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><hr><p><a href="https://www.luogu.com.cn/blog/BlueHedgehog/solution-p2676" target="_blank" rel="noopener">这里有一个有关堆排序讲的很好的博客</a></p><hr><p>我们需要解决这几个问题：什么是堆？怎么建堆？怎么堆排序？</p><h4 id="堆定义"><a href="#堆定义" class="headerlink" title="堆定义"></a>堆定义</h4><ol><li>完全二叉树</li><li>树中所有结点的值必须大于（或小于）其左右孩子，树的根结点必定为最大值（或最小值）。</li></ol><p>分为大根堆和小根堆，这个其实如果根节点是最大值，那就是大根堆，反之就是小根堆。例子如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630172615692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆"></p><p>那如何建堆呢?</p><h4 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h4><p>基本方式：从最后一个非终端结点开始往前逐步调整，让每个双亲大于（或小于）子女，直到根结点为止。</p><p><strong>完全二叉树的第一个非终端结点编号必为[n/2].</strong></p><p><em>终端结点：叶子结点（所以不需要我们单独调整）</em></p><p>这里给出图解例子：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021063020371080.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="建堆"></p><p>注意以上建堆的过程中是从最后一个非叶子结点开始每次比较的都是结点的左右孩子，不必和父节点比较，然后我们比完后不符合的就交换(<strong>这里如果两个子女都比父节点大那么就选大的上浮</strong>)，注意交换过之后要再比一次左右节点（<strong>即将父母结点下移之后如果还有子节点还要继续下移判断！</strong>）。然后再往前找到倒数第二个非叶子结点….以此类推直到根结点。</p><h4 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h4><p><em>我们知道，建成一个堆后，堆的根节点就是最大值（最小值），所以我们可以直接输出根节点，问题在于，我们输出根节点后还需要将剩余的缺乏根节点的堆再次维护成一个完整的堆然后再次输出根节点以达到堆排序的目的。</em></p><p>方法：将当前顶点与堆尾记录交换，然后仿建堆动作重新调整，如此反复直至排序结束。将任务转化为—&gt;<br>H.r[i…m]中除r[i]外，其他都具有堆特征。现调整r[i]的值 ，使H.r[i…m]为堆。</p><p>这就相当于我们把根节点和最末尾的那个结点交换了一下位置然后数组长度length–直接删除了原来根节点，然后目前就是一个根节点不满足堆其他点都满足堆的一个“堆”，我们接下来<strong>只需要维护这一个点</strong>就可以了。以此类推，达到堆排序目的。即：</p><p>基于初始堆进行堆排序的算法步骤：<br>堆的第一个对象r[1]具有最大的关键码，将r[1]与r[n]对调，把具有最大关键码的对象交换到最后;<br>再对前面的n-1个对象，使用堆的调整算法，重新建立堆。<br>结果具有次最大关键码的对象又上浮到堆顶，即r[1] 位置;<br>再对调r[1]和r[n-1]，然后对前n-2个对象重新调整，…<br>如此反复，最后得到全部排序好的对象序列。</p><p>图解：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210532115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210554583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021063021061067.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210627725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210644962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"></p><h4 id="算法代码解析"><a href="#算法代码解析" class="headerlink" title="算法代码解析"></a>算法代码解析</h4><p>首先我们直到由于我们建堆过程中需要比较调整，所以需要用到堆调整函数HeapAdjust。  </p><ol><li>HeapAdjust是针对结点 i 的堆调整函数，其含义是：从结点i开始到堆尾为止，自上向下比较，如果子女<br>的值大于双亲结点的值，则互相交换，即把局部调整为大根堆。这一过程称之为筛选。</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token function">HeapAdjust</span><span class="token punctuation">(</span>HeapType <span class="token operator">&amp;</span>H <span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> m <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*从结点i开始到当前堆尾m为止，自上向下比较，如果子女的    值大于双亲结点的值，则互相交换，即把局部调整为大根堆。*/</span>    current<span class="token operator">=</span>i<span class="token punctuation">;</span> temp<span class="token operator">=</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> child<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//temp暂存 r[i]值，child是其左孩子</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>child<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//检查是否到达当前堆尾，未到尾则整理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> child<span class="token operator">&lt;</span>m <span class="token operator">&amp;&amp;</span> H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>        child<span class="token operator">=</span> child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//让child指向两子女中的大者位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> temp<span class="token punctuation">.</span>key<span class="token operator">>=</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span> breack<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根大则不必调整，函数结束</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>         H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token operator">=</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//否则子女中的大者上移</span>        current<span class="token operator">=</span> child<span class="token punctuation">;</span> child<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span> child<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//将根下移到孩子位置并继续向下整理！(这一点很关键)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// while</span>    H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直到自下而上都满足堆定义，再安置入口结点</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// HeapAdjust</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>建堆</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HeapSort</span> <span class="token punctuation">(</span>HeapType <span class="token operator">&amp;</span>H <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//H是顺序表，含有H.r[ ]和H.length两个分量</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> H<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token operator">-</span> i <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//把r[1…length]建成大根堆</span>    <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i<span class="token punctuation">,</span> H<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使r[i…length]成为大根堆</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// HeapSort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>堆排序</p><p>重建时，2至i-1号结点已符合堆的要求，故只需从 1号结点开始调整。因每次从堆顶开始调整，故每次调用耗时<br>O(log2n).</p><p>• 时间效率： T(n) = O($nlog_{2}{n}$）。因为整个排序过程中需要调<br>用n-1次HeapAdjust( )算法，而此算法耗时为O($log_{2}{n}$)；<br>• 注意：初始建堆的关键字比较次数≤4n,T(n)=Θ(n)。<br>• 空间效率：O(1)。在for循环中交换记录时用到临时变量temp。<br>• 稳定性： 不稳定。<br>• 优点：对小文件效果不明显，但对大文件有效。</p></li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HeapSort</span> <span class="token punctuation">(</span>HeapType <span class="token operator">&amp;</span>H <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//对顺序表H进行堆排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> H<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token operator">-</span> i <span class="token punctuation">)</span>    <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span>i<span class="token punctuation">,</span> H<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//for,建立初始堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> H<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    H<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> ←→ H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//交换，要借用temp</span>    <span class="token function">HeapAdjust</span><span class="token punctuation">(</span> H<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>i<span class="token number">-1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重建最大堆, m=i-1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><hr><p>基本思想：归并含义就是将两个或两个以上的有序表合成一个新的有序表。利用该思想可以假设刚开始的无序表是一个有n个长度为1的有序表，然后两两归并，得到[n/2]个长度为2的有序表，再次归并得到[n/4]个长度为4的有序表……以此类推最终得到长度为n的有序表。</p><p>算法图解：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630190556841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="归并排序"></p><p>归并排序的算法还是很简单的：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Merge</span> <span class="token punctuation">(</span>RcdType SR<span class="token punctuation">[</span> <span class="token punctuation">]</span>， RcdType <span class="token operator">&amp;</span>TR<span class="token punctuation">[</span> <span class="token punctuation">]</span>，<span class="token keyword">int</span> i<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 将有序的SR[i…m]和SR[m+1…n]归并为有序的TR[i…n]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>i <span class="token punctuation">,</span> j<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> SR<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;=</span> SR<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>TR<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> TR<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将两个SR记录由小到大并入TR</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// for</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span> TR<span class="token punctuation">[</span>k…n<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>i…m<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将剩余的SR[i…m]复制到TR</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span> TR<span class="token punctuation">[</span>k…n<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>j…n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将剩余的SR[j…n]复制到TR</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Merge</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">MSort</span> <span class="token punctuation">(</span>RcdType SR<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> RcdType <span class="token operator">&amp;</span>TR1<span class="token punctuation">[</span> <span class="token punctuation">]</span>，<span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 将无序的SR[s…t]归并排序为TR1[s…t]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> s<span class="token operator">==</span>t <span class="token punctuation">)</span>TR1<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当len=1时返回</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        m<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将SR [s…t]平分为SR [s…m]和SR [m+1…t]</span>        <span class="token function">MSort</span> <span class="token punctuation">(</span>SR，<span class="token operator">&amp;</span>TR2，s<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将SR 一分为二, 2分为4…</span>        <span class="token comment" spellcheck="true">// 递归地将SR [s…m]归并为有序的TR2[s…m]</span>        <span class="token function">MSort</span> <span class="token punctuation">(</span>SR，<span class="token operator">&amp;</span>TR2，m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归地将SR [m+1…t]归并为有序的TR2[m+1…t]</span>        <span class="token function">Merge</span><span class="token punctuation">(</span>TR2， TR1， s<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将TR2 [s…m]和TR2 [m+1…t]归并到TR1 [s…t]</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//if</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// MSort</span><span class="token comment" spellcheck="true">//TR2只是一个辅助数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个函数用来合并有序的两个序列，而第二个函数用来递归进行归并，这里用到了TR2这个辅助数组。首先不断递归至n个长度为1的有序数组到TR2中，然后将他们两两Merge归并起来到TR2中（<strong>注意除了第一层递归外其余的所有递归过程中虽然Merge调用的看着好像是TR1，但那是形参，实际上那是TR2！！也就是那个Merge函数实际上是在调用归并TR2的s..m and m+1..t项到自己的数组中！！</strong>），接着直到我们递归回溯至最后一层时，也就是开始的函数，我们调用Merge把就差一步就有序的TR2归并排好放到TR1中。</p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><hr><p>基数排序是与前面的排序完全不同，前面的排序主要是通过关键字间的比较和移动记录这两种操作，而实现基数排序不需要记录关键字之间的比较。它是一种<strong>借助多关键字排序的思想对单逻辑关键字进行排序</strong>的方法。</p><p> 多关键字排序：n个元素的序列{R1,R2,…, Rn}，每个元素Ri有d个关键字(K0i, K1i,…, Kd-1i)，则序列对关键字(K0i, K1i,…, Kd-1i)有序是指：<br>对于序列中任意两个记录Ri和Rj(i&lt;j)记都满足下列有序关系：(K0i, K1i,…, Kd-1i) &lt; (K0j, K1j,…, Kd-1j)<br>其中K0称为最主位关键字，Kd-1称为最次位关键字。</p><p>主要分为两类：</p><p>最高位优先(MSD):<br>先对最主位关键字K0进行排序,将序列分成若干个子序列，每个子序列中的元素具有相同的K0值，然后分别就每个子序列对关键字K1进行排序，按K1值的不同再分成更小的子序列，依次重复，直至对Kd-2进行排序之后得到的每个子序列中的元素都具有相同的(K0, K1,…, Kd-2)，而后分别为每个子序列对Kd-1 进行排序，最后将所有子序列依次联接成为一个有序序列。</p><p>最低位优先(LSD) ：                                                                                                                                                                 先对最次位关键字Kd-1进行排序,然后对Kd-2进行排序，依次重复，直至对K0进行排序后便成为一个有序序列</p><p>链式基数排序：</p><p>对于整型或字符型的单关键字，可以看成是由多个数位或多个字符<br>构成的多关键字。仅分析关键字自身每位的值，通过分配、收集进行处理。</p><ol><li>待排序记录以指针相链，构成一个链表（静态链表）；</li><li>“分配”时，按当前“关键字位”所取值，将记录分配到不同的<br>“链队列”中，每个队列中记录的 “关键字位”相同；</li><li>“收集”时，按当前关键字位取值从小到大将各队列首尾相链成<br>一个链表;</li><li>对每个关键字位均重复 2) 和 3) 两步。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221322610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="基数排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221343492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="基数排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221450530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="基数排序"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><h3 id="排序方法比较"><a href="#排序方法比较" class="headerlink" title="排序方法比较"></a>排序方法比较</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221719469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="总结"></p><h3 id="方法选择"><a href="#方法选择" class="headerlink" title="方法选择"></a>方法选择</h3><p>基本有序时可选用直接插入、简单选择、堆排序、锦标赛排序、冒泡排序、归并排序、(希尔排序)等方法，其中插入排序和冒泡应该是最快的。因主要是比较操作，移动元素很少。此时平均时间复杂度为O(n)。<br>无序的情况下最好选用快速排序、希尔排序、简单选择排序等，这些算法的共同特点是，通过“振荡”让数值相差不大但位置差异很大的元素尽快到位。</p><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>终于写完了QAQ，真是累死我了。感谢大家看到这里，看到这里的是真🦏，也欢迎大家一键三连哦~</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
            <tag> 排序 </tag>
            
            <tag> 图解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态查找表之二叉排序树和平衡二叉树（图解+代码详解）</title>
      <link href="/2021/08/01/dong-tai-cha-zhao-biao-zhi-er-cha-pai-xu-shu-he-ping-heng-er-cha-shu-tu-jie-dai-ma-xiang-jie/"/>
      <url>/2021/08/01/dong-tai-cha-zhao-biao-zhi-er-cha-pai-xu-shu-he-ping-heng-er-cha-shu-tu-jie-dai-ma-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><strong>动态查找表</strong>：与静态查找表不同的是，动态查找表是在查找过程中动态生成的，即对于给定值key, 若表中存在其关键字等于key的记录，则查找成功返回，否则插入关键字等于key的记录。</p><p>主要分为：二叉排序树、平衡二叉树、B-和B+树。</p><p>我们这里主要分析讨论前两种。</p><p>@<a href="目录">TOC</a></p><h1 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h1><hr><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>定义</strong>：二叉排序树，又称二叉查找树。或者是一颗空树，或者是满足以下性质的二叉树：</p><p>1)  若其左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>2)  若其右子树不空，则右子树上所有结点的值均大于它的根结点的值<br>3)  其左、右子树也分别为二叉排序树</p><p><strong><em>特点： 二叉排序树的中序遍历序列一定是递增有序的</em></strong></p><p><strong>注意二叉排序树和二叉判定树不要搞混了，这两个区别还是比较大的，二叉判定树是静态查找的折半查找时用到的，遍历了搜索的可能性，而且结点放置的是序号。</strong></p><h2 id="构造二叉排序树"><a href="#构造二叉排序树" class="headerlink" title="构造二叉排序树"></a>构造二叉排序树</h2><p>我们对于给定序列，取其第一个点为根结点，然后依次选择后续节点边比较边插入。如果比当前结点小，往该节点左子树移动比较，如果比当前结点大，则往该节点右子树移动比较。直到到一个待比较位置为空的位置，就是该节点的最终位置。</p><p>文字过于生硬，图解说明一下：</p><p><em>设输入序列为：（30,11,18,4,55,19,15,70,58）</em></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210703234753819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="二叉排序树构造"></p><p>如此便构造成功了一个二叉排序树。</p><p>这样一来我们也可以很方便的计算出其平均查找长度，每一层的高度就是查找所花费的次数，例如：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210703235103726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="二叉排序树"></p><h2 id="基本操作代码解析"><a href="#基本操作代码解析" class="headerlink" title="基本操作代码解析"></a>基本操作代码解析</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>首先我们选择使用二叉链表作为其存储结构：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiTNode <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 结点结构</span>    TElemType data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 包含key</span>    <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左右孩子指针</span><span class="token punctuation">}</span> BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><h4 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h4><p>思路很简单，仅需要从根节点开始比较就可以，比当前结点大就找左子树，小就找右子树直到找到为止</p><pre class="line-numbers language-c"><code class="language-c">BiTree <span class="token function">SearchBST</span> <span class="token punctuation">(</span>BiTree T，KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//在根指针T所指二叉排序树中递归地查找某关键字等于key的数据元素</span>    <span class="token comment" spellcheck="true">//若查找成功，则返回指向该数据元素结点的指针，否则返回空指针</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">EQ</span><span class="token punctuation">(</span>key，T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>； <span class="token comment" spellcheck="true">//查找结束</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">LT</span><span class="token punctuation">(</span>key，T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild，key<span class="token punctuation">)</span><span class="token punctuation">)</span>；    <span class="token comment" spellcheck="true">//在左子树中继续查找</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild，key<span class="token punctuation">)</span><span class="token punctuation">)</span>；    <span class="token comment" spellcheck="true">// 在右子树中继续查找</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//SearchBST</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h4><p>由于我们这个不需要回溯，实际上也就是使用一个while循环代替递归的工作栈，思路和递归算法差不多。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> BiTNode <span class="token operator">*</span><span class="token function">search_tree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>T<span class="token punctuation">,</span> keytype key<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回值</span>失败：<span class="token constant">NULL</span> 成功：非<span class="token constant">NULL</span>，结点指针<span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span>T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> T；        <span class="token comment" spellcheck="true">//查找成功</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">&lt;</span>T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        T<span class="token operator">=</span>T<span class="token operator">-></span>lchild； <span class="token comment" spellcheck="true">//查左子树</span>    <span class="token keyword">else</span>        T<span class="token operator">=</span>T<span class="token operator">-></span>rchild； <span class="token comment" spellcheck="true">//查右子树</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> T；    <span class="token comment" spellcheck="true">//查找失败</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入的思路相对而言也比较简单，主要借助查找，把新节点作为叶子插入。代码如下：</p><pre class="line-numbers language-c"><code class="language-c">Status <span class="token function">InsertBST</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当二叉排序树中不存在关键字等于e.key的数据元素时，</span><span class="token comment" spellcheck="true">//插入元素e并返回true，否则返回false</span>    p <span class="token operator">=</span> T<span class="token punctuation">;</span> father <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token operator">!=</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        father <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token operator">></span>p<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token keyword">else</span> p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//while</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//键值为e.key的结点已经存在</span>    s <span class="token operator">=</span> new BiTnode<span class="token punctuation">;</span> s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span> s<span class="token operator">-></span>lchild <span class="token operator">=</span> s<span class="token operator">-></span>rchild <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>father<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> T <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//空树插入</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token operator">></span>father<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span> father<span class="token operator">-></span>rchild <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">else</span> father<span class="token operator">-></span>lchild <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//InsertBST</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除操作相对于前面的查找与插入就复杂一些了。删除某元素需要维护二叉排序树的形状。这里假设<em>p表示待删除结点的指针，$$P_L$$ 和$$P_R$$代表p的左右孩子指针，f是p的父节点，并假设*</em>p是f的左孩子**。那么有三种情况需要我们考虑，一种情况是p没有左右孩子，那只需我们更改一下f的左孩子指针指向，指向空指针即可；第二种情况便是p只有一个孩子，那么这样也只需将f的左孩子指针指向$$P_L$$ 或$$P_R$$；第三种情况就是p有两个孩子，这样就需要我们分析一下了：</p><p>设删除前的中序遍历序列为：     …. $$P_L$$  s p $$P_R$$  f ….<br>//p的直接前驱是s<br>//s是<em>p左子树最右下方的结点<br>删除p后，使其它元素的相对位置不变。有两种解决方法：<br>法1：令</em>p的左子树为 <em>f的左子树，</em>p的右子树接为<em>s的右子树；即 $$f_L$$ =$$P_L$$  ; $$S_R$$ =$$P_R$$  ;<br>法2：直接令</em>s代替<em>p即   *s为</em>p左子树最右下方的结点</p><p>图解如下：</p><p>假设删除P点。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210704001638163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="删除结点"></p><p>删除各个结点：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210704001839117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="删除结点"></p><p>代码按以上思想编写：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete_BST</span> <span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>T <span class="token punctuation">,</span> KeyType key <span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 在以T为根结点的BST树中删除关键字为key的结点 */</span><span class="token punctuation">{</span> BSTNode <span class="token operator">*</span>p<span class="token operator">=</span>T <span class="token punctuation">,</span> <span class="token operator">*</span>f<span class="token operator">=</span><span class="token constant">NULL</span> <span class="token punctuation">,</span> <span class="token operator">*</span>q <span class="token punctuation">,</span> <span class="token operator">*</span>s <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//q指向删除结点的孩子</span><span class="token keyword">while</span> <span class="token punctuation">(</span> p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">EQ</span><span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查找删除结点</span><span class="token punctuation">{</span> f<span class="token operator">=</span>p <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LT</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> p<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 搜索左子树</span><span class="token keyword">else</span> p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//搜索右子树</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有要删除的结点</span> s<span class="token operator">=</span>p <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到了要删除的结点为p ，先找其替代结点s</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 左、右子树都不空</span><span class="token punctuation">{</span> f<span class="token operator">=</span>p <span class="token punctuation">;</span> s<span class="token operator">=</span>p<span class="token operator">-></span>Lchild <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从左子树开始找</span><span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span> f<span class="token operator">=</span>s <span class="token punctuation">;</span> s<span class="token operator">=</span>s<span class="token operator">-></span>Rchild <span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 找左子树中最右边的结点</span>p<span class="token operator">-></span>key<span class="token operator">=</span>s<span class="token operator">-></span>key <span class="token punctuation">;</span> p<span class="token operator">-></span>otherinfo<span class="token operator">=</span>s<span class="token operator">-></span>otherinfo <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用s替换p</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//第3种情况用方案2处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> q<span class="token operator">=</span>s<span class="token operator">-></span>Lchild <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//若s,即p只有左子树</span><span class="token keyword">else</span> q<span class="token operator">=</span>s<span class="token operator">-></span>Rchild <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第2,3种情况归一处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> T<span class="token operator">=</span>q <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为根结点</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>Lchild<span class="token operator">==</span>s<span class="token punctuation">)</span> f<span class="token operator">-></span>Lchild<span class="token operator">=</span>q <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为左孩子</span><span class="token keyword">else</span> f<span class="token operator">-></span>Rchild<span class="token operator">=</span>q <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p为右孩子</span><span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除p</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时空复杂度分析"><a href="#时空复杂度分析" class="headerlink" title="时空复杂度分析"></a>时空复杂度分析</h2><p>若查找成功，则走了一条从根结点到某结点的路径，若查找失败，则走到一棵空的子树时为止。</p><p>最坏情况下，其平均查找长度不会超过树的高度。</p><p>具有n个结点的二叉树的高度取决于其形态。<br>由关键字序列 1，2，3，4，5构造而得的二叉排序树，ASL =（1+2+3+4+5）/ 5 = 3<br>由关键字序列 3，1，2，5，4构造而得的二叉排序树，ASL =（1+2+3+2+3）/ 5 = 2.2</p><p>最好情况(为满二叉树）<br>n+1<br>ASL=—log2(n+1)-1 = O(log2 n)<br>n<br>最坏情况(为单枝树):<br>ASL=(1+2+…+n)/n=(n+1)/2<br>平均值:<br>ASL≈O(log2 n)</p><h1 id="平衡二叉排序树"><a href="#平衡二叉排序树" class="headerlink" title="平衡二叉排序树"></a>平衡二叉排序树</h1><hr><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p><strong>平衡二叉树</strong>：平衡二叉树，又称AVL树。 它或者是一颗空树，或者是具有以下性质的二叉树：它的左子树和右子树都是平衡树，且左子树和右子树的深度之差的绝对值不超过1.</p><p><strong>平衡因子</strong>:又称BF，定义为该节点的左子树的深度减去它的右子树深度。则平衡二叉树的所有节点的平衡因子只可能是-1、0、1.</p><p><em>只要二叉树上有一个结点的平衡因子BF绝对值大于1，那么二叉树就是不平衡的</em></p><p>如下便是几个二叉树中各结点的平衡因子：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705202047841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="平衡二叉树"></p><p>我们希望由任何初始序列构成的二叉排序树都是AVL树。因为AVL树上任何结点的左右子树的深度之差都不超过1.则可以证明如此的话他的平均查找长度和$$log{n}$$同数量级。</p><p>以下再放一张图对比一下平衡二叉树、二叉排序树、平衡二叉排序树的区别：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705210414803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="三种树区别"></p><h2 id="构造平衡二叉排序树"><a href="#构造平衡二叉排序树" class="headerlink" title="构造平衡二叉排序树"></a>构造平衡二叉排序树</h2><p>基本原理就是按照二叉排序树的思路进行排序构造，遇到某个结点的平衡因子绝对值大于1的情况的时候，就进行一定的操作将二叉树变为平衡的，一步一步按照这样的方法最后构造成功。</p><p>构造过程中调整二叉树的操作可以归纳为以下4种情况：</p><p><em>我们先假设整个二叉树在插入新结点之后所得到的不平衡的最小子树的根节点指针为a，a平衡因子绝对值此时大于1.此时a是离结点最近的平衡因子绝对值大于1的祖先节点</em></p><h3 id="LL型（单向右旋平衡处理）"><a href="#LL型（单向右旋平衡处理）" class="headerlink" title="LL型（单向右旋平衡处理）"></a>LL型（单向右旋平衡处理）</h3><p>此时向a结点的左子树根节点的左子树上插入结点，使得左子树的高度过高，这样一来我们需要将a左子树的根节点替代a的位置，原a左子树根节点的右子树变为a结点的左子树。这样一来就有重新回到平衡相当于向右做了一次顺时针旋转操作。图例如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705213931705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="LL型"></p><h3 id="LR型（双向旋转先右后左）"><a href="#LR型（双向旋转先右后左）" class="headerlink" title="LR型（双向旋转先右后左）"></a>LR型（双向旋转先右后左）</h3><p>此时由于a结点的左子树根节点（这里暂称b)的右子树（假设根节点为c）插入了新节点，使得整体出现了不平衡，我们此时需要用c取代a的位置，然后c的原左子树作为b的右子树，c的现左子树变为b为根的树，c的原右子树变为a的左子树，c的现右子树变为a为根的树。相当于先左旋处理一次然后右旋处理了一次。图解如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705220039996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="LR型"></p><h3 id="RR型（单向左旋平衡处理）"><a href="#RR型（单向左旋平衡处理）" class="headerlink" title="RR型（单向左旋平衡处理）"></a>RR型（单向左旋平衡处理）</h3><p>与LL型比较类似，这次是a结点的右子树的的根节点的右子树上插入了新节点后发生了不平衡的情况。此时解决方法是使用a的右子树根节点移到a的位置，并且将a的原右子树的左子树变为a的右子树。相当于进行了一次向左的逆时针旋转操作。图解如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705214711828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="RR型"></p><h3 id="RL型（双向先左旋后右旋）"><a href="#RL型（双向先左旋后右旋）" class="headerlink" title="RL型（双向先左旋后右旋）"></a>RL型（双向先左旋后右旋）</h3><p>这个和LR型比较类似，实际上这四种类型是两两对称的。这个指的是a的右子树根节点（设为b）的左子树（设其根节点为c）插入了新节点导致了不平衡现象。此时我们需要将c代替a的位置，c的原左子树作为a的现右子树，c的现左子树为a为根节点的树，c的原右子树为b的现左子树，c的现右子树为b为根节点的树。图解同样如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705220908967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="RL型"></p><p>以下举例子说明一下：</p><p>以序列（13，24，37，90，53）为例，首先空树是一个平衡的，然后把13加进去，同样平衡，再将24加进去同样平衡。接下来加进去37，此时就变为RR型，我们需要左旋，由于24没有左子树，所以只需让13为根的树作为24的左子树，不需要往13右孩子加东西。接下来90，保持平衡。直到53，变为RR型，此时37的平衡因子绝对值为-2，左旋后得到最终的平衡二叉排序树。如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705222106842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="平衡二叉排序树最终构造"></p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 查找表 </tag>
            
            <tag> C </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉排序树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy实现一个简单的机器学习模型</title>
      <link href="/2021/08/01/numpy-shi-xian-yi-ge-jian-dan-de-ji-qi-xue-xi-mo-xing/"/>
      <url>/2021/08/01/numpy-shi-xian-yi-ge-jian-dan-de-ji-qi-xue-xi-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Numpy实现一个简单的机器学习模型"><a href="#Numpy实现一个简单的机器学习模型" class="headerlink" title="Numpy实现一个简单的机器学习模型"></a>Numpy实现一个简单的机器学习模型</h1><p>mes que un codesfarmer 足球、音乐与代码😏</p><h3 id="本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理"><a href="#本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理" class="headerlink" title="本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理."></a>本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理.</h3><h4 id="首先我们应该明确基本步骤："><a href="#首先我们应该明确基本步骤：" class="headerlink" title="首先我们应该明确基本步骤："></a>首先我们应该明确基本步骤：</h4><ol><li>基于函数式y = 3x ^ 2 + 2 得到一些数据，另外加上一些噪音数据到达另一组数据y。</li><li>构建一个机器学习模型来学习表达式y =  wx^2 + b 的两个参数w 、b .利用数组x, y的数据为训练数据。</li><li>采用梯度下降法来通过多次迭代学习到w、b的值。</li></ol><p>@[TOC]</p><h3 id="导入必要库"><a href="#导入必要库" class="headerlink" title="导入必要库"></a>导入必要库</h3><pre><code>import numpy as np%matplotlib inline from matplotlib import pyplot as plt</code></pre><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>%matplotlib inline是一个魔法函数（Magic Functions）。使用%matplotlib命令可以将matplotlib的图表直接嵌入到Notebook之中，或者使用指定的界面库显示图表，它有一个参数指定matplotlib图表的显示方式。 inline表示将图表嵌入到Notebook中。</p><h3 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h3><pre><code>np.random.seed(100)x = np.linspace(-1, 1, 100).reshape(100, 1)y = 3 * np.power(x, 2) + 2 + 0.2 * np.random.rand(x.size).reshape(100, 1)</code></pre><h4 id="代码分析：-1"><a href="#代码分析：-1" class="headerlink" title="代码分析："></a>代码分析：</h4><p>生成输入数据x及目标数据y，np.random.seed(100)时设置随机数种子。reshape函数将矩阵形状改为合适的形状方便操作。而后np.random.rand是为了加一些噪点。</p><h3 id="查看x、y数据分布情况"><a href="#查看x、y数据分布情况" class="headerlink" title="查看x、y数据分布情况"></a>查看x、y数据分布情况</h3><pre><code>plt.scatter(x, y, s=20, c=&#39;red&#39;)plt.show()</code></pre><p>运行结果： <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210531214950572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="函数图片"></p><h3 id="随机初始化参数"><a href="#随机初始化参数" class="headerlink" title="随机初始化参数"></a>随机初始化参数</h3><pre><code>w1 = np.random.rand(1, 1)b1 = np.random.rand(1, 1)</code></pre><h4 id="代码分析：-2"><a href="#代码分析：-2" class="headerlink" title="代码分析："></a>代码分析：</h4><p>随机初始化参数w1、b1，后面会计算梯度逐渐接近最优解。</p><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><pre><code>lr = 0.001  # 学习率for i in range(800):    # 前向传播    y_pred = np.power(x, 2) * w1 + b1    # 定义损失函数    loss = 0.5*(y_pred - y) ** 2    loss = loss.sum()    # 计算梯度    grad_w = np.sum((y_pred - y) * np.power(x, 2))    grad_b = np.sum((y_pred - y))    # 使用梯度下降法，使loss最小    w1 -= lr * grad_w    b1 -= lr * grad_b</code></pre><h4 id="代码分析：-3"><a href="#代码分析：-3" class="headerlink" title="代码分析："></a>代码分析：</h4><p><strong>这是我们代码最核心的一部分了。</strong> 一个简单的前向传播，y_pred是预测值，y是实际值。loss是均方损失函数，这里均方损失函数乘以0.5是为了求导的时候平方项正好消去，方便后续整理，实际上也可以不乘，梯度下降算法最重要的是方向，大小是次要的。sum函数对损失进行求和同时把loss函数变为标量，实际上这里面由于我们直接后续计算梯度直接求出了loss函数的导数，所以这里loss函数实际上没有在代码上没有很大的作用，写出来是为了方便我们去观看🤣😋。而这里我们接下来就是计算的grad_w、grad_b就是来进行梯度的计算，然后更新权重w1和参数b1。</p><h3 id="可视化结果"><a href="#可视化结果" class="headerlink" title="可视化结果"></a>可视化结果</h3><p><em>我们训练结果如何呢？其实际拟合程度如何呢？我们画图来验证一下拟合的效果。</em></p><pre><code>plt.plot(x, y_pred, &quot;r-&quot;, label=&#39;predict&#39;)plt.scatter(x, y, color=&#39;blue&#39;, marker=&#39;o&#39;, label=&#39;true&#39;)    # true dataplt.xlim(-1, 1)plt.ylim(2, 6)plt.legend()plt.show()print(w1, b1)</code></pre><p>训练结果： <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021053123433278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="图像拟合效果"> [[2.98941611]] [[2.09813123]]</p><h4 id="代码分析：-4"><a href="#代码分析：-4" class="headerlink" title="代码分析："></a>代码分析：</h4><p>事实证明，经过800次训练之后，我们训练出的模型的拟合效果还是相当不错的，w是2.9894左右，b是2.0981左右。和我们初始时设定的3、2相差很小。</p><pre><code>BiTree GetSibling(BiTree T, KeyType e){    if (T == NULL)        return NULL;    if (T-&gt;lchild)    {        if (T-&gt;lchild-&gt;data.key == e)            return T-&gt;rchild; //左孩子符合条件就返回右孩子    }    else if (T-&gt;rchild)    {        if (T-&gt;rchild-&gt;data.key == e)            return T-&gt;lchild; //右孩子符合条件就返回左孩子    }    //否则递归查找，如果左子树里有就返回左子树里的，否则返回右子树    return GetSibling(T-&gt;lchild, e) != NULL ? GetSibling(T-&gt;lchild, e) : GetSibling(T-&gt;rchild, e);}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> matplotlib </tag>
            
            <tag> numpy </tag>
            
            <tag> math </tag>
            
            <tag> 梯度下降 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上海交大概率论数理统计大作业代码实现解析</title>
      <link href="/2021/08/01/shang-hai-jiao-da-gai-lu-lun-shu-li-tong-ji-da-zuo-ye-dai-ma-shi-xian-jie-xi/"/>
      <url>/2021/08/01/shang-hai-jiao-da-gai-lu-lun-shu-li-tong-ji-da-zuo-ye-dai-ma-shi-xian-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前些日子有上交小姐姐概率论与数理统计课程结课了，有一个大作业要做，题目要求使用matlab或者python画图分析并统计有关数据。上海交大不亏是我们这种民办三本比不了的，真人上人，小姐姐根本就没学过编程大作业就要求开始写代码画图。别看博主现在觉得这门作业挺有意思，如果这是博主的概率论大作业，博主估计就呵呵了。于是——小姐姐就想起了我这个高中为数不多的程序猿同学（😅老工具人了）。华科真人下人，博主概率论才刚开课，也不怎么会用代码画图。但是想起我在小姐姐心目中的伟岸形象🙄。无所畏惧！满口答应下来。</p><p><em>不过这次作业的完成博主还是感触颇丰的，学到了许多道理，不会的东西不要等别人教，正如我们华科的那句被吐槽好多的那句“你能做的，起止如此”，博主感觉很有必要把这个学习过程记下来，于是有了这篇博客。</em></p><hr><p>[TOC]</p><h1 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603151333206.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="交大概率作业"></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>初始时就是有两个独立的满足高斯分布的随机变量， 使用bernoulli分布把这两个随机分布组合起来，通俗说就是高斯分布+伯努利分布。</p><h2 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h2><hr><h3 id="参数生成随机数"><a href="#参数生成随机数" class="headerlink" title="参数生成随机数"></a>参数生成随机数</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603152402661.png" alt="生成随机数"></p><h4 id="高斯函数随机数"><a href="#高斯函数随机数" class="headerlink" title="高斯函数随机数"></a>高斯函数随机数</h4><p>博主刚开始写的时候，看到生成随机数，以为需要博主自己实现代码的编写，于是博主自己就开始写高斯分布的代码，写着写着吐槽了一句后，室友提醒是不是有可以现成的函数。于是我查了一下，果然有别人写好的轮子（吐血）。还好还好，及时止损。numpy中的normal函数就是用来生成高斯分布随机数的。<br>高斯分布函数如下:<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603153849217.png" alt="高斯函数"><br>而我们的高斯随机数函数normal参数如下:<br>random.normal(loc=0.0, scale=1.0, size=None)<br>官网解释如下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603154153716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="官网解释normal"><br>参数loc就是我们的“中位数”（mean），就是我们公式里的$\mu$,这个也是我们高斯分布的数学期望。<br>参数scale就是我们的标准差，也就是我们的$sigma$(markdown好像显示不出来这个符号）。<br>参数size就是我们要生成的随机数矩阵的size，比如1000、（3， 4）这种。<br>而函数返回值就是我们生成的随机数矩阵。矩阵类型是numpy的ndarray格式，如果只生成一个随机数就生成一个数。</p><h4 id="Bernoulli函数随机数"><a href="#Bernoulli函数随机数" class="headerlink" title="Bernoulli函数随机数"></a>Bernoulli函数随机数</h4><p>Bernoulli函数生成随机数嘛，博主就自己写函数啦，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bernoulli</span><span class="token punctuation">(</span>possi<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    ans1 <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        ans1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> possi <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ans1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码本身是很简单的，最后生成返回的是一个列表。</p><h4 id="混合高斯分布随机数"><a href="#混合高斯分布随机数" class="headerlink" title="混合高斯分布随机数"></a>混合高斯分布随机数</h4><p>有了前两步的步骤后这个混合高斯分布代码就很简单了，只需要我们调用生成随机数后把几项简单加和一下就可以了。代码如下：</p><pre class="line-numbers language-python"><code class="language-python">pict <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>bernoulli<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数的选取"><a href="#参数的选取" class="headerlink" title="参数的选取"></a>参数的选取</h3><p>这里面要求有$\mu1$ 、$\mu2$、$sigma1$、$siama2$、p这五个参数。我们应该合理的选择范围。为了更加正规的写这一道题，博主这里选择了一下这几组数据：</p><pre class="line-numbers language-python"><code class="language-python">u1 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>u2 <span class="token operator">=</span> u1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span>sigma1 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sigma2 <span class="token operator">=</span> sigma1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里最后应该会生成7$\times$ 7 $\times$ 9 $\times$ 9 $\times$ 6 = 23814组数据，每组数据有1000个随机数。<br>当然，按照题目来说我们完全可以缩小数据集，降低数据规模。当时我给小姐姐时就是提交了50组数据的图片。也顺利的完成了作业。</p><h3 id="生成随机数并画图保存文件"><a href="#生成随机数并画图保存文件" class="headerlink" title="生成随机数并画图保存文件"></a>生成随机数并画图保存文件</h3><p>接下来就是我们写出有关循环实现我们前文提到的生成混合高斯分布随机数和我们的对应图像的生成并保存。<br>代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> sigma1<span class="token punctuation">,</span> sigma2<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(a, b, c, d, e)</span>    pict <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>bernoulli<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax0<span class="token punctuation">,</span> ax1<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二个参数是柱子宽一些还是窄一些，越大越窄越密</span>    ax0<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>pict<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'yellowgreen'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># pdf: 概率分布图，一千个数落在某个区间内的数有多少个</span>    ax0<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Frequency distribution graph'</span><span class="token punctuation">)</span>    ax1<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>pict<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'pink'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">,</span> cumulative<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rwidth<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># cdf: 累计概率函数，cumulative累计。比如需要统计小于5的数的概率</span>    ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Cumulative probability function"</span><span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>subplots_adjust<span class="token punctuation">(</span>hspace<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>r<span class="token string">"E:\results\test{}(u1 = {}, u2 = {}, sigma1 = {}, sigma2 = {}, p = {}).png"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plt.show()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>循环组合我们有关的参数组合，这里用到了itertools中的product函数，用来生成一个笛卡尔积。然后我们可以使用hist函数来画频率分布直方图，这里注意，除了我们通常意义上的频率分布直方图外，博主额外加了一个Cumulative probability function，累计概率统计函数，这个可以更加直观看出我们累计的概率频次。<br>而后图像使用savefig进行保存，这里我们保存到E盘的results文件夹中。接下来我们只需要直接SHIFT + F10运行一下，然后再“稍等片刻”，图像就生成成功了 ！</p><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p>以下就是我们代码的部分运行结果（图太多不完整放了）<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603182119503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="运行结果"></p><h2 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603182538952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="任务二"></p><h3 id="期望方差数学公式推导"><a href="#期望方差数学公式推导" class="headerlink" title="期望方差数学公式推导"></a>期望方差数学公式推导</h3><p>说到这里我就要吐嘈一下这位小姐姐了😭，俺还没学到这里呢。小姐姐至少先把这些推导结果发给我吧，但是博主害羞，不好意思去问（其实博主知道她也不会😅），就自己找了一下概率统计老师，人美心善的概率老师教会了博主怎么推导的公式，并且一眼看出了任务二最终的频率随n的的变化的那个曲线（不愧我科老师🤗）。<br>不继续废话，来点硬核公式推导：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603183748249.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="公式推导"><br>博主字确实有点丑，大家将就着看吧😋。</p><h3 id="关于n"><a href="#关于n" class="headerlink" title="关于n"></a>关于n</h3><p>这里面与任务一不一样的就是我们任务一的五个参数在这里面是是可以自己确定的，这里唯一的变量就是我们每组的随机数的数目，上文已经推导出了我们的期望与方差，这里面就只剩我们的U需要自己来设定计算。任务一的很多代码完全可以重用。</p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><h4 id="输入参数n"><a href="#输入参数n" class="headerlink" title="输入参数n"></a>输入参数n</h4><pre class="line-numbers language-python"><code class="language-python">nn <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>博主觉得一次一次手输n太麻烦了，干脆一次输完，使用我们列表存储需要的n值。</p><h4 id="各项参数"><a href="#各项参数" class="headerlink" title="各项参数"></a>各项参数</h4><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>u1 <span class="token operator">=</span> <span class="token number">5</span>u2 <span class="token operator">=</span> <span class="token number">5</span>sigma1 <span class="token operator">=</span> <span class="token number">3</span>sigma2 <span class="token operator">=</span> <span class="token number">4</span>p <span class="token operator">=</span> <span class="token number">0.5</span>U <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Ez <span class="token operator">=</span> u1 <span class="token operator">+</span> p <span class="token operator">*</span> u2Dz <span class="token operator">=</span> sigma1<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> sigma2<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>u2<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是我们有关于列到的混合高斯分布的有关各项参数。</p><h3 id="生成随机数画图并保存"><a href="#生成随机数画图并保存" class="headerlink" title="生成随机数画图并保存"></a>生成随机数画图并保存</h3><p>实际上这里除了额外加了一个我们的nn数组循环，用来循环运行我们n的值，其他部分和我们的任务一代码部分都一样。<br>代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> n <span class="token keyword">in</span> nn<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pict <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>u1<span class="token punctuation">,</span> sigma1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>u2<span class="token punctuation">,</span> sigma2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                             np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>bernoulli<span class="token punctuation">(</span>p<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">*</span> Dz<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>pict<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> n <span class="token operator">*</span> Ez<span class="token punctuation">)</span>        U <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>U<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax0<span class="token punctuation">,</span> ax1<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二个参数是柱子宽一些还是窄一些，越大越窄越密</span>    ax0<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>U<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'yellowgreen'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># # pdf概率分布图，n个数落在某个区间内的数有多少个</span>    ax0<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Frequency distribution graph for n={}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    ax1<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>U<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'pink'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">,</span> cumulative<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rwidth<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># cdf累计概率函数，cumulative累计。比如需要统计小于5的数的概率</span>    ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Cumulative probability function n={}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>subplots_adjust<span class="token punctuation">(</span>hspace<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>r<span class="token string">"E:\result\homework2 u1 = 5 u2 = 5 sigma1 = 3 sigma2 = 4 p = 0.5\test n={}.png"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plt.show()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>最终运行结果为：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603203747134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="任务二运行结果"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>写这么长的博客累死了QAQ，代码也写有一段时间了，有许多当初的细节都有些遗忘了，写博客过程本身也收获了许多，把之前学到的知识认真整理一下，把学习过程记录下来放到网上和大家分享本身也是一件很有成就感的事情。<br>希望这也能让各位也有所收获，博主码字不易，也欢迎大家一键三连哦😘。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
            <tag> numpy </tag>
            
            <tag> math </tag>
            
            <tag> 概率论与数理统计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
