<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法刷题之栈系列P5788 单调栈</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p5788-dan-diao-zhan/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p5788-dan-diao-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://www.luogu.com.cn/problem/P5788" target="_blank" rel="noopener">题目</a>描述</h2><hr><p>给出项数为 n的整数数列 a_{1 … n}<em>a</em>1…<em>n</em>。</p><p>定义函数 f(i)<em>f</em>(<em>i</em>) 代表数列中第 i<em>i</em> 个元素之后第一个大于 a_i<em>a**i</em> 的元素的<strong>下标</strong>，若不存在，则 f(i)=0。</p><p>试求出 f<em>(1…</em>n)。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210804234631286.png" alt="image-20210804234631286"></p><h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><hr><p>实际上这一道题和前面那一道<a href>日志分析</a>是非常像的，不过这里这个需要我们先将所有的数字都读进a[3000005]，读进来之后从后往前开始，定义一个辅助数组b[3000005]用来存储相同位置的数比他大的第一个数的索引值，从最后一个数开始，最后一个数为0，然后往前，随意一个数a[i]先判断是否它比后面第一个数a[i+1]大，如果比后面第一个数a[i+1]小，那么那个辅助数组只需在该位置存储该位置的索引 i+1 就行；如果它比它后面第一个数a[i+1]大或是相等，那么就找比它后面那个数a[i+1]还大的数a[b[i+1]],由于是从后往前进行的，这个b[i+1]已经求出来了，如果我们的a[b[i+1]]，仍然不比a[i]大，那么就继续找a[b[b[i+1]]], 哈哈哈，有点套娃的感觉了，实际上就是找比a[b[i+1]]还大的第一个数，这么依次找下去，直到找到一个比a[i]大的数，将其索引存储到b[i]上， 或者直到找到一个b[j]为0，那么说明a[i]是目前最大数，没有比它更大的数，那么对应的b[i]就为0。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3000002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 用来存储数据</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">3000002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 用来存储我们的答案</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 总共的个数</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读取数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 如果后面的第一个数正好比他大</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> next <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// // 如果后面第一个数没有比他更大的数，那么直接赋值为0,否则就一直找接下来的索引直到找到0或者找到合适的数为止</span>                next <span class="token operator">=</span> b<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1165-日志分析</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1165-ri-zhi-fen-xi/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1165-ri-zhi-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a><a href="https://www.luogu.com.cn/problem/P1165" target="_blank" rel="noopener">题目</a>描述:</h2><p><em>M</em> 海运公司最近要对旗下仓库的货物进出情况进行统计。目前他们所拥有的唯一记录就是一个记录集装箱进出情况的日志。该日志记录了两类操作：第一类操作为集装箱入库操作，以及该次入库的集装箱重量；第二类操作为集装箱的出库操作。这些记录都严格按时间顺序排列。集装箱入库和出库的规则为先进后出，即每次出库操作出库的集装箱为当前在仓库里所有集装箱中最晚入库的集装箱。</p><p>出于分析目的，分析人员在日志中随机插入了若干第三类操作――查询操作。分析日志时，每遇到一次查询操作，都要报告出当前仓库中最大集装箱的重量。</p><p><a href="https://imgtu.com/i/fEvvCD" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEvvCD.png" alt></a></p><h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><hr><p>首先我们知道要使用一个栈来存储输入的重量，但是由于这里有着一个所谓的最大值的限制，我们要能随时查询最大值，所以同时还需要有着一个辅助栈来<strong>同步</strong>存储我们的当前元素作为栈顶时的最大值，这个是建立栈的同时建立的辅助栈，最后我们只需要查询时输出栈顶，出库时把两个栈顶都弹出来就行。</p><p>另外就是注意一下这里的空栈时查询输出0就行了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">// 一共需要两个栈，一个栈用来记录依次进入的货品质量，</span><span class="token comment" spellcheck="true">//一个栈在建立前一个栈的时候记录当前栈的最大值</span><span class="token keyword">int</span> stack1<span class="token punctuation">[</span><span class="token number">200006</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录依次进入的货品质量</span><span class="token keyword">int</span> stack2<span class="token punctuation">[</span><span class="token number">200006</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录建立栈的同时当前栈的最大值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所含操作总数</span>    <span class="token keyword">int</span> opera<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录每次的操作</span>    <span class="token keyword">int</span> weigh<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录每次的物品质量</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录栈顶位置</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//读取数据</span>    <span class="token comment" spellcheck="true">//scanf("%d%d", &amp;opera, &amp;weigh);  // 先读取一次，使栈中有数</span>    <span class="token comment" spellcheck="true">//stack1[top++] = weigh;</span>    <span class="token comment" spellcheck="true">//stack2[top++] = weigh;  // 由于栈中只有一个元素，所以我们的当前栈最大值为weigh</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 循环n次</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opera<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opera<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">// 读取入栈</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>weigh<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> weigh<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 入栈</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//栈中只有一个元素</span>                stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> weigh<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>weigh <span class="token operator">></span> stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 如果我们的读入数据比之前的最大值还大</span>                stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> weigh<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 就更改最大值</span>            <span class="token keyword">else</span>                stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 否则延续上次的最大值</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">//出库</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果栈不空</span>                top<span class="token operator">--</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出栈</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 如果栈</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 栈空时输出0</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1981 表达式求值</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1981-biao-da-shi-qiu-zhi/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1981-biao-da-shi-qiu-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p><a href="https://www.luogu.com.cn/problem/P1981" target="_blank" rel="noopener">题目</a>描述：给定一个只包含加法和乘法的算术表达式，请你编程计算表达式的值。</p><p><a href="https://imgtu.com/i/fEXFET" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEXFET.png" alt></a></p><h2 id="解析思路"><a href="#解析思路" class="headerlink" title="解析思路"></a>解析思路</h2><hr><p>实际上本题和栈的关系不是特别大，因为只有乘和加两种运算，我们基本思路为把乘的乘出来后，加上之前的和就OK，没有必要使用栈运算。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><hr><p>代码如下：</p><pre class="line-numbers language-c++"><code class="language-c++">#include <cstdio>const int mod = 10000;int x,s,t; //x是当前的数，s是和，t是当前段的乘积char c;int main(){    scanf("%d",&t);//先读入第一个数，之后每次读入一个符号一个数    while(scanf("%c",&c) && c != '\n'){ //最后会读到换行符        scanf("%d",&x);        if(c == '*') t = t * x % mod; //是乘号就相乘        else s = (s + t) % mod,t = x;        //加号就加上上一段的积，t变为下一段的第一个数    }    printf("%d\n",(s + t) % mod); //加上最后一段的积    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python实现（eval函数）"><a href="#Python实现（eval函数）" class="headerlink" title="Python实现（eval函数）"></a>Python实现（eval函数）</h2><hr><p>当然，这里面我们的运算式就是这样，我们平时计算的时候往计算器上敲的格式一模一样，所以我们完全能想到python中的eval函数，它可以将我们的输入的字符串作为python的代码编译出来，所以很理所应当的，<del>一行代码优雅解决</del></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然而现实很残酷……</p><p><a href="https://imgtu.com/i/fEjTTf" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEjTTf.png" alt></a></p><p>有两个运行超时了</p><p>后来换成了Pyhon2，python2才是可以直接运算不借助任何函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><del>直接AC！</del></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1449 后缀表达式</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1449-hou-zhui-biao-da-shi/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1449-hou-zhui-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://www.luogu.com.cn/problem/P1449" target="_blank" rel="noopener">题目</a>描述</h2><hr><p>所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。</p><p>如：3<em>(5–2)+7对应的后缀表达式为：3．5．2．-</em>7．+@。’@’为表达式的结束符号。‘.’为操作数的结束符号。</p><p><a href="https://imgtu.com/i/fELUWd" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fELUWd.png" alt></a></p><p>##解析思路</p><hr><p>本题也是对于栈的较为直接的考察，我们可以直接选择建立一个栈来存储我们的每次输入的数字，然后遇到一个符号就弹出两个数来进行运算，运算的结果再入栈，最后运算结束之后，栈中只会剩下最后一个数，就是我们的结果。</p><p><strong>注意这里面我们读取数字的时候是以字符串读取的，有可能会读取多位数比如13、122这种，所以需要注意读取问题，不过这一题还算简单，没有让我们读取负数</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><p>代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用来放置相关数字的栈</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 读入字符</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录栈目前的栈顶位置</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'@'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">>=</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用来做读取的每一个数字</span>            num <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\.'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 如果是数字的话</span>            <span class="token punctuation">{</span>                num <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                num <span class="token operator">+</span><span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 入栈</span>            <span class="token comment" spellcheck="true">// printf("%d", num);</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">// 如果是运算符就出栈运算然后入栈</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">,</span> left <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 得到左右操作数</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            <span class="token keyword">case</span><span class="token string">'*'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">*</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token string">'/'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">/</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token string">'+'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token string">'-'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">-</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// printf("top : %d\n", stack[top - 1]);</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上格式化之后，发现本题难度并不大。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题全记录</title>
      <link href="/2021/08/04/suan-fa-shua-ti-quan-ji-lu/"/>
      <url>/2021/08/04/suan-fa-shua-ti-quan-ji-lu/</url>
      
        <content type="html"><![CDATA[<p><em>学校要求暑假刷算法题，上个寒假刷的题（<del>有好多好多都是不会抄的</del>）几乎上都快忘完了，正逢上我创建个人博客，算是把刷过的题都做一个记录，也算是个记录整理一下思路，以后忘了还可以看看当时的思路</em></p><p>就以这一个系列作为开篇作，以后我会每次刷一个系列的题，顺便来进行一个大的每道题的总结。</p><p>第一个系列的是关于栈的五道题。</p><p><a href="https://imgtu.com/i/fEHUWn" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEHUWn.png" alt></a></p><p>难度不是很大，不过也花了一定的时间</p><p>五道题地址与解答博客地址在这里：</p><p>第一道：<a href="https://www.luogu.com.cn/problem/P1044" target="_blank" rel="noopener">P1044单调栈</a>       <a href>算法刷题之栈系列P1044栈</a></p><p>第二道：<a href="https://www.luogu.com.cn/problem/P1449" target="_blank" rel="noopener">P1449后缀表达式</a>  <a href>算法刷题之栈系列P1449后缀表达式</a></p><p>第三道：<a href="https://www.luogu.com.cn/problem/P1981" target="_blank" rel="noopener">P1981表达式求值</a>   <a href>算法刷题之栈系列P1981 表达式求值</a></p><p>第四道：<a href="https://www.luogu.com.cn/problem/P1165" target="_blank" rel="noopener">P1165日志分析</a>    <a href>算法刷题之栈系列P1165-日志分析</a></p><p>第五道：<a href="https://www.luogu.com.cn/problem/P5788" target="_blank" rel="noopener">P5788单调栈</a>   <a href>算法刷题之栈系列P5788 单调栈</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> C </tag>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1044 栈</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1044-zhan/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1044-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://www.luogu.com.cn/problem/P1044" target="_blank" rel="noopener">题目</a>描述</h2><hr><p>一个序列1、2、3、4、5、……、n，按照如此顺序入栈，可能的出栈顺序有多少种？</p><p><a href="https://imgtu.com/i/fEbQh9" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEbQh9.png" alt></a></p><h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><hr><p>这一道题实际上使用了卡特兰数的公式，</p><p>建立数组f。f[i]表示i个数的全部可能性。</p><p>f[0] = 1, f[1] = 1; //当然只有一个</p><p>设 x 为当前出栈序列的最后一个，则x有n种取值</p><p>由于x是最后一个出栈的，所以可以将已经出栈的数分成两部分</p><ol><li>比x小</li><li>比x大</li></ol><p>比x小的数有x-1个，所以这些数的全部出栈可能为f[x-1]</p><p>比x大的数有n-x个，所以这些数的全部出栈可能为f[n-x]</p><p>这两部分互相影响，所以一个x的取值能够得到的所有可能性为f[x-1] * f[n-x]</p><p>另外，由于x有n个取值，所以</p><p>ans = f[0]<em>f[n-1] + f[1]</em>f[n-2] + … + f[n-1]*f[0];</p><p>当然可以这样使用递归处理，但是我们已经有结论了：h(n)=c(2n,n)-c(2n,n-1) (n=0,1,2,…)</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><p>所以我的答案就很“简洁”了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> factorialn <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>factorial<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>factorial<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然如果你想要较为”正常“的完成这一道题(抄某位大佬的)：</p><pre class="line-numbers language-c++"><code class="language-c++">#include<cstdio>#define siz 20using namespace std;int n;int c[siz*2][siz];int main(){    scanf("%d",&n);    for(int i=1;i<=2*n;i++) c[i][1]=c[i][i]=1;    for(int i=3;i<=2*n;i++)     for(int j=2;j<i;j++)      c[i][j]=c[i-1][j]+c[i-1][j-1];    printf("%d",c[2*n][n]-c[2*n][n-1]);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>愉快AC</del></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> python </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回到那片球场8.3 2021</title>
      <link href="/2021/08/04/hui-dao-na-pian-qiu-chang-8-3-2021/"/>
      <url>/2021/08/04/hui-dao-na-pian-qiu-chang-8-3-2021/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7cd66ceb702686a6e61e8fab002ebc58dc5b166530e0f6c2e820bc7a6d3ec9e3">5de89d89894dfc04df6c90fd52cc9dd07e5c4f0d52ff815f234f57e60c9b48a7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu ! enter some words to prove</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 体育运动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 写给自己的散文诗 </tag>
            
            <tag> 羽毛球 </tag>
            
            <tag> 体育运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lier and Accuser for 林俊杰</title>
      <link href="/2021/08/03/lier-and-accuser-for-lin-jun-jie/"/>
      <url>/2021/08/03/lier-and-accuser-for-lin-jun-jie/</url>
      
        <content type="html"><![CDATA[<p>网上最近流言飞起，说到林俊杰****，我实际上是比较气愤的，至少现在还没有真相大白，网上的键盘侠、水军们已经开始拼命黑了，我想起了JJ Lin的一首歌，Lier and Accuser, 里面几句歌词：They don’t even know me，With their tongues（闲言碎语） they crucify（折磨） me，Won’t you vindicate（证明……无辜的） me，Fend（防御） me from those false accusations（指责）。他们都不认识我，就各处造谣，你能证明我是无辜的对吧，快带我逃离这不实的指责。</p><p>的确，网上好早前就有过好多关于他的yp传闻，似乎是正确的，就算是正确的我也不奇怪，的确啊40多的老男人了，他也没有所谓的纯情人设，我只是在听他的歌、欣赏他的作曲才华、演唱能力而已。也可能只是谣言而已。但是最令我气愤的是，关于他的吸毒？？？？我想知道，这还是互联网吗？为什么都在全网黑他？粉丝真的稍微维护一下都会被骂，稍微维护下就会被骂和吴亦凡粉丝有什么区别。林俊杰这件事情之前是为数不多的娱乐圈道德模范了吧，这件事情之后可能继续会是。出道这么多年，几乎没有什么黑料，有不应该早就挖出来了吗？有的黑料那算是那一两个被整天宣传，事实上是这样吗？你们看后续报道了吗？有什么石锤的证据吗？似乎没有吧？现在很多人真是纯属为了骂而骂。奉劝一句：看看林俊杰律师函吧。发完函微博贴吧知乎那群造谣的，删帖的删帖，道歉的道歉，注销的注销。林俊杰老粉知道这人啥情况，有黑料，出道这么多年一点绯闻都没有，你突然跟我说这人艹粉吸毒。</p><p>律师函来了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-cc49665bac3a39ceb04c30bcd79f9c41_1440w.jpg?source=1940ef5c" alt></p><p>看看各位造谣者的怂样子：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-21a93e919c35cb5d49b67c382d78833f_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-11cce240e88834da7b37a7bcb064187c_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-7499d91ae7f4f149d0e0d08dc42861fd_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-87cf0d5ed18c9625e6e12cd7887544ca_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-4297ecbe4661de46d55b0143fb2d8a26_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-415d13b25181adb82092e46bd92debc7_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-7631e35a42a27f00ed22ca814abc286f_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-a966b19464203807eb23acfa51c7ed33_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-cf3cad0c0c3c295143a10cadc9bc0e33_1440w.jpg?source=1940ef5c" alt></p><p>作为林俊杰多年粉丝了，当然，如果他真的吸毒了，我也不会维护他。但吸毒全网歌曲下架了我仍然会听他的歌，反正之前下载过了，我对于艺人的私德容忍程度没有那么高，同时我同样认为，如果最终出来林俊杰没有罪，请把那些出来造谣的全部送进监狱，无证据造谣者必须收到相应的处罚。</p><p>我只说他这个圈子这个条件的人yp可以理解，没有说我接受甚至赞同他yp。</p><p>而且说作品说我是歌迷不是粉丝是什么意思？作品本就不代表人品，更不代表有了作品就可以降低道德标准可以犯错。</p><p>而是哪怕他违法被抓了，我也能一边听着他的歌一边在网上刷他落网的热点一边还能在评论区嘴他几句。</p><p>出了歌我买有钱买演唱会抢得到就去。林俊杰微博超话我不关注，入驻抖音我从来不看(我甚至没抖音)，粉丝最近和谁谁谁撕了我不清楚，生日我记不清。</p><p>私生活传这么久，一张石锤都没有，一个当事人都没有。从没有那个女生跳出来说：“没错！林俊杰就是跟我睡的！”</p><p><strong>但我始终是他的粉丝</strong></p><p><strong>从来没有。</strong></p><p>十几年了诶，不管是捏造还是空穴来风，连一张能支撑这个谣言的依据都没有。</p><p><strong>吴亦凡粉丝可以有十几个嫂子，而林俊杰粉丝，一个嫂子都没见着。</strong></p><p>另外点名两个地方：一个是贴吧狗吧那个ID叫雷军的，第一时间发帖造谣黑林俊杰，发完律师函后又立刻删帖销号跑路，如果调查完毕后林俊杰没有罪，我坚信这个人必须收到相应的惩罚。第二个就是微博臭名昭著的蹭热度的谢明皓。</p><p>其余的以后在更新，暂时不说了，心烦透顶。</p><p>本人也静待事情继续发展。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 新闻 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 林俊杰 </tag>
            
            <tag> 生活随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些感想2021.8.02</title>
      <link href="/2021/08/02/yi-xie-gan-xiang/"/>
      <url>/2021/08/02/yi-xie-gan-xiang/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3f3e9958eca594c5b0bfb787fea65ac080eaf55c71312ad0761f75214afcbdc8">5de89d89894dfc04df6c90fd52cc9dd00610d1ea9fce7ba2cb06c84a46851c8bd1510e1fa7f1d7bf06374730a2c0ca7fda58b2ca76c6313e397a28e53312809b61a88d126d1c7d96f0df028d7bf6b0b0aca6aa9281ece6cecaced19d31fe13a8fea504f2cfdd125ee49808fc407e0890abed58ba82abedc61469ba80e61ca00d7772a1095afd76050d0c91b44b9fca054b195a7fa2b1ed816a987b79b140093ecea834524fadc97ea7fae67ce7765c5812d3bedff067b56e801167949fb853f8335e9808ff95b1f6d52eb3e5e93948cea70ca7d18cce67d35035c65a897bf0ea19d82224b0e97f72feab034520ef3d35ed5c02127d3c41591c5e00c21d016f34060ac7d554f73f8b40d5390b20fd9d60f7ee0fb4a08a127f0811535d89a57a441f85b58310c323e5c2b170f5da3114423b847cd75036b7df6fb352d220a3aca5bb6baf5a5ca42d8c6c5abae0c4b741d9412d75f25d8b9d76f9a24dae2587d183740e44b9d8761f8913103d04e9f7c98ef6640176c7b8534747d6a674e3eee90e0a577feca7d4e9fef8fd4059ef436b07f9b5eb53b161c956457b84537096ab51b588114aa9bca87c4b86253ffe86cd427cac1d64c306be1aad1a28908b2a86e4986d609a02fe90587c916c74a9c4ffff97653d26d12fd8a89904637f82604f8b76a902ac68672ccbbcd8669b3e851862b21fca69210b4e06fffa8b7f18d68d0ca9a26f3e7e08d8bb6381cca4c100fd076005de8ee67d03a0d5d059aea90a6a7b987d2539d5b5264b4b32b16c8c8fd41f6e46a5d50b018d80076ceee952b9aa8d52bf195a51e2b6a17a36172276c81b249c4a26e4ac9209f4aeb2547c2ff7408ccd03d90d9b93b8ea8ead2b2794eace769723d5bb8703e5a8b079f9b209ac8275c5f9a0f2a53b82b0398c02f267511d4d44ddf9c76593925d6cee8aa5b4a46b673530495bf1ed2b0ecf58782158fbe7927cdde161d61e10ddb3b2df9d646bdee5fc14ab02c9dc59921a13ec222a11af3880868ed54a6c95a1018cb55e2c981e702e3d0749646e192cf81ece2d6fe60422e4f66e9b6b41544574aa4ea0aa1672441782e20cecec6ed7077cef9a0d98a2fca18cc0f5bd58fc85dc8c8baa16d548dc8cc91e84fb0b6b6bb909c69aae62e286a26f20753e053a0532faa2698781c3a58a32dc71e0d15642da6c56dfcaff755f10316fa4c14835a73a6ed3067927485fef68d462aa45203fe3388d653cdfbe4a2c06f2025630c720eb33b339f42d2487a57191a02d72bdadb13556f4c0bec2964e8afd05c414ff65a4996335fc186f455debb37e1dc7351e4350ba11a7c2b055bf73b82ab817710309e2a8202a515debe2ae4232a9332c5793cf7e9271714aa221a7cc6dde098ee4357ad0cd27fccc9316675e982a86b82d7c925fe37e4e8085078a96ccf2ea8b38b92a833d54715567148966e1eb9dd5c198d6aa8271f7773141c2c0c41897758b11dba980ec487b355b4c1e8a40f253fd9e64a8eaea16717180bf6259b0822ea998584e35c93c489d03b34373213f6f4e18bade2ae30e014d8c8dfaf02ff449c318ab47095aa23a86f5a2dcf076be50320b3800165e84867c3a7272a96088c266d1ecfbfb54e0be9bc3cb4eee06a78745760874c65e9cf44dc4353ec392fce959751adbd53420f631e2341d6332d7378edba7373d291b7c4c6f8473d93ccdd5d436adfe1f4d32824b092dfb19670f146e84b9cc4cc4f01014d5f8814ce6b3bcdfc72bfe78084c85c384fca75d7df158ad321dd9fbfa28373b8409929d647bfed4d14c88d083d5ca566b362a2d76d3fd94bd7c5e3256c93d5970c47e23189623b9411690997b503753c93bc4ea1875fc309ce041584de714fbbf46066301a0c9dfc5278486a674c38769676fb8e38a3b179eff160bee9cd8aeef3080a733cec29e3de23a7c821b70e0aec26149c11c05ab3c1e354e56140381bb438f1d22db5b061654b4018bf4b31c78fab01b5ef66876190faa683ff7851e65b94527b665c2703fc6d309e9431944210a85f07fa39affb93753ee07b6cc3c0ba1241298fa4f1fd64feb5b2905c31e769dd499dca717c0e9162cb409df4aa02a5d75b059bc588b016fb3588945a512e5be74979188e4c3de5b87c9962ca352411adda54e1c2b2bc49760128bc1c3f06780689681743973d5267e4c66c39b547720e4694600b23678bd11ed685771c2bca636f82080bb234a3ee9977ae289a32453fa6bd9412abcc9894a607963b77b6ff59c612ff8ab551a44967f3fdee0b99f373086077025072c3490e2b8484c0680744254b31005db4ec3e9bb4db4e341ca828b5e8b6b59eeea429e8ce863ce26ca7bd5caaa077fc502736e738da2e3dc99a97ab0ec1ebca3d44c905c40b9828f53e059ca998de0e45297b51cfa166618e52f75c1653faa5e8c1dd7891dc1333d62a6ae562be0d4f6434047ac771f714c794aaa8df38f204cc7aa66deb2109a0d3066b381841d755a08166278cf51e145596c6daa6539071aaf168bf236598e671902e5b9d5677180fb1a2c8f188c9ff84d1ec67d0f953d224b13688b5ea5cebcc04b26f82f0b616ee7d28f2fd1ce9771391584334981eb2541a0f8dc00dbb9147db6860290149d021c29e3b5d546b19f27f73d1107e860127309b3dbc60aeffe5e556b2f2f0107ada6dd27453013f07b23d8b6cc067b342c2c2b14efe1bfe8b6deb584bd4108fb44cc7e88e86f95b4424825c8e6b76d122115ac408675848cfceca0b31e4385fe42ba048a5bd2d46765d4faa6b09d7afcde15d1479ec3ec2098fbaa7635a848c26a41a26b2bdb95c705b732082a5593a23d1287a7f39469ea368e471929ae6519698665d34931a98ac47adccf980a14cab9abc3d1294f0ca50eb71d9c9838bce786af112f19923cf326c57ab7d3721cfcfc6dadf410a2e129a410d45e285ca56437e01ab0f57079fb613e596cb8692834dc35147af0008d4f3271d98d44b4a9ebce3bc69d89344fe5029d567ab7a3535bcaf359d43960debb51fdfc4f5b35de6e67953b55afb12808d7df46a1d16bc94c72b64ced910ffe480078bd89b6b8584506ec4320418c680ee7c26ca10d0d13bf6340005248ee82cc24b55c176eb4bac716b264c85883cf57ae311df4af066e97b1a3b866d7921bccf9232c50237f94e04b1ec684da5870f0af8799c723ab42355471dbc17be5fd50a4ba1cc836e784be0e1f5db19bfcead3dac304f733c17598771f29d7c7f78c13102a781cf10fb6e34a7c0fec385d0ec73714460dbbf4bac101694b3d384a0741dd7e279920900fcb6d7f6df1ce3cf544488d80eff40005c4153870473345682ffbea8d7dd3942560306ca04706880c1e83e39313fdaa078de90748d9beb409b8ace91f693576f840e891087dcca5a7ec4a57439b56f1151d63247fd4e384b4992bd8d7796a9c9135632d0b3095910545bb99894143660a4a9969c7de2b339c031011299e2eecc81037dc65059ef591dd0bfb10c9b9cc0a0e882996c87a503c4202</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu!  enter your password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 写给自己的散文诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 写给自己的散文诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《在路上》</title>
      <link href="/2021/08/02/du-zai-lu-shang/"/>
      <url>/2021/08/02/du-zai-lu-shang/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="6e8b7a38404d04abc36db8a353f2ce3062b204855862f3875e7f25c76c2dac71">5de89d89894dfc04df6c90fd52cc9dd0b3f8746dd64ae95603cc2a764f54fbe79b5ad1609005c87f89d9cba430f0bed7522647b431d7f6971bae8dd0b3b65b36ffff4d2c659870d5cab23a7244545c6cb656286921f2a5b316e3fa719c8987717869e456c3001f717180cc13df6abfa4711f2a29a88074f13ec9af5f275a33312b97ed55ec387dbcddb1dbfd560dedcf42ab8f8e68fef1204bb268741afde0cd0abab25819c684cce7fa797d2264f3b785221519160fda79f8ced9eb626215826c08177f3680319729dbe0f59cb7f85c5bf3d3085c514b29fa7337f9ad5d2818f794f43eb336b28216fd9295f820189cdbb76934fffcaccb1ccee3e731588993ba483bb7d2c6cdc0870ea39cc0849c356a98304e0172878beb23c68ed11c4ea8268494a31372585ed81a9dc4676f33dbe7b6825edcf290abc46fb291200f4f8e52b615726abf5b38f10a48fd6e943e9a26e9cb91e10cf07b1d03064d4386e270f182593deb36b88a864a5d5825be03ef4e2e96a75b50c4d61875ebf161aae8725082e9532a65e0f940f7b3e3b5cc4aee5d497ddb99e6d583135ec3b57c330a8695275db8112567bac5bf575c4f3c5d59ddaedd803d9c88061b9031a09dfe6d3b6394676517d5b136231bf9d29080556ab82494eccffb5f67a7fe6b4c9a3d1a856db64a7d26d818004835ea96a35b0524f5272bfa59f41a054bdc6716de1dbc139cd019451ff000f928c23531323b549d35b3d340c584a08ac694dd82eade23e82ea234d75020ed3fa1240abdd713a7fe39de8de05035ca65b19610010ef42ce023f7a042d4c4791db0c6f78b9022043241c943dba3382c12838357327350601b312ba07b05837991f1f8042fa52436d58cad078bfcccf80789bb8258d355e5a4f09285efc0ee4cb8b66ae1b858c39a142b9b8292511db6c7b701784ef9d99da55b1a736a12a5562474de1c23add7a0a89e8112bdf9cfa22901823d3d2c5ae4b9da49f1d42194e0c14c13a52aeed9f669772613a1095d95a19eeef24bd4c72a1a39d6c4b216dcea878e59f8e89d2ffd848bedfe5fc506b8fad576a2b496bad7087d216a7240adc6ca1f545372e9b710572d2945cf02a34fad0be48b18d6404e06a25d7d95f5d42e17f9fb7026d5df6a2daa2676e954cd059ccf14867c9b1a1d8d76025236c1acf8afd4dc4e3feb06b42078c9d4bd7d30ac95cb984a9f6bf5421159baff3914a18716760c4f94a170435eaaf10517c5b19ce6ae9efb948a3663a277dbd5b1b92df39751d871176c3f8f977ea79b9e7a7b573b86cd177440a9ec0f454eb63f3b0141aafb16c80f0b3e0b5b393fda4ac89dc77c1a65e655a0f2740dd609955796f987f284ad9f3cc3bb67454205432ba22966e31efed29dc87c656431650b6c3bb6939b1c5ef547199ea96c1b26373b9c94f843169628873b47e8406d02dd4f0a996564ef74d5193024e41abe6fc85c68e4e7aa75e513a27bd887ea967997f273a233ff8211d8bdfea58c647383b64a0a5435e5a8ca46b38a1a5ff79f259b1ef91de0b80bef9bb25e127f81bc299ac0fcf9358b8736547b98c69613157680fb2b3c2db5a9f2a75403660b9dccac18752c44abf4022466af4d1a982506b94425d8715e71b5a40690b4623503a4d896713188bd635d40adc76bef17d9f6d7afd8eecbeeb911df770605b4be1c242ab39529348fce4b248c8411b1006f38c4702bd60b6f8de59830739ce4b74569472fff8ebb3692a5fb0c6e053b0e08e446295f11a4a8c1b137c03c7a1b32eb68442dfffc9b87191d5a2ea7589737b7a80ce99c356a75a3250851b7bc822c6969b044ef75b3b755cbcba52d8cba3f0f8445a7c26780e11dcbf536bfaa8f9009fbfbb24e8e4a8a3cb039eb85e0e8a0a56f684a60b80409a1dcc976b7e66d0f497fb23264a72690a07a21109dd618c6589e0d2316069fed3462b7e4801612ce59883b03b96ad84285a522f43454b5e6e851908f3505d6dcf1aba123e23cbee53934e47beb1cf788b2b45f23afac4f2ae62d4e030ad6126d63f848a1dafcfad123d9c170ca52cb45b8f196dde72458fc79c7c2682c27aad666b698990c9f176f487be3343e7d2b7d40d3437b3fbae3214731fd040137d9ab22b2b8773e6060c440864c79b9890f1e71f45b54370d9101dc308d6529e14646c6970d2bdfa8ed7e7ee161a16f751555bb785c74c7a481b2a6612009249ec45c0907efb0169d312bea0bbdceaf9ed0c3866ab999d6847cce2c19e320355d673e81b24c524ed20f8a090664ef82b133fce1768148132af8623ba053e197560eecc88c2f395e361cd44e034116133afbd9be07ad9df57b1f0ae92b9d9944b0d2c7eda249807637de3b76be362138b9a8a82c28509cc9997843ea7a67e030b648b809e1b5d5857d8be863c220c287c4058eac6a007342fe8820d76c1ce32084141a82e7f675af2225bbfbcef0bf15d6da00d93f9cc5c2baf08927165be21c614f86ec9bd02072d4c86867e68b55a0121726543d7745085f01ae16b4e92252c46d38ab18312cd42366d215a2820e402a2f929d906896bb155f8e6b7b87f6f4093be6a8be23a0e1e78f60888d69eaf338cf2ca9ebe25986c8977fab0a3d21cca6ce86950cd0f523864f2ce5d9c6aa1c1e0d9c63ce214632fbaabf999c7c41ede5e540817dd1a7cac7a38e1c2ae3aed5eb686a4ae4b2d5ac8cdc9b3e4d18e82404cc23fe035733fef06319e814a9093d35f60c11ee70b9205d12fd4467cb996021c1bd5016826ab7c610eef0a34826ad7af2b22e12e4c0938326a79ade8ae8a88352e60b62d21b7a7362f659f600651af7f2ef1c1b8a26fe9527f413e6852d80f2721347dc66335941d2833de4bf3f9b79b94e7184c68b0a04c2dc89808c94a3e4246631d7fadb7e6e69d3cdb567d86c1c0f0f356cefbac0886feb0d1d022631134f6ad11433dff6609266daf1fde250bf7a8057142d72fdfe7d1f0bc250742d8dd2e6a8c5c2d4af99019a3485748809e9eb0f899f084bcbb2b412f6fa1a6df6085b357f3d9f234eb8db87b867d8c6cf1bc77a93a46721d290162662c7473ccdc7b9327546f90be28604cf47bac755b8fa5a7dab871bf7e755a6ee08322dada97037d21144bcc543fe4a95cfcedbcf8cff1e50239ebe7bca33f3f20908608bb5c86888551d84c5bf5a457232e85ba101644704fb3a52874189ba889e00d1ad83ffe6bada129670d587043244e09d5a72f8eba4504dfad939cf1938e2667cc004a1f290eb0f95c9be1e9c03682fbd8c17fd978d38d1280dbdd9846620172f5440ca587e75e0c6b6390189aab7c6b63bff0f601d42f7e13e119baef8d3c0c91fa2eb2fc91b215dd61ca33a514f89d87a74af4025df7e6c5d8db1e575da7698ce5b8cc513c9f72b87c8648c5a5f81a5b26242896b0ebe84f7dc66f2b57ad5de5404f0ab90b4b49a6374413094d880be39410a52968a382804b5b225bf61d44ab692f5a1d2d42f1117f52604735e43adc97003afea64d377d678a2ff9bf729daa001512bfec916c1703e94ba3779d8ba311f45826ffa86caa248760df2ce4ddb51896da89bbbb9af9d790eb10b2ff24d04e64940ede44ffa93ad612588c777273d09b10be48aa9433956ab3e2b96ab14c04be6e67f465b31a0e7eebac5ae01c39fd3d2fcaa2243ab4ab3ef632f0d2e5c0c99620341d4b3cb435a5e6c39bdf05d04f73c866568aa331707273a73593663a1541895a766f39ddbd7f375d98b1b47fd8ec6f51072b94c5586fce1fb43e7892d21c3b84eb76b446b77f57cdfca5400d1178fe3b7f5c93c2035e3eeae3b303fb7a5da2625eaa3609dabf898f410fdf4fd71f6524d20d57247cde5609815b5e13165d9b58a963588ac53885852a0dba95f91a07264cb73d79e7fef5f347385738f1389684cac06a5b2615e1e88dba0deedc3530a53730058cb152710f2d83c9485421328df205ab6b5a4a2c71e04d486acd8b676d1f9ccff3dffd0741f9c46df83e1cc135b44583702032d7cadea96052d96d14cf20e8bc35410533cf02d8a478a4c9911affb345dff3a7502756c33a013fbea0fe11c561e1d2be7f8d1678decf6a3c2d99f1a422cc86cf2b700c6c25bce6419f08f4a19f6bfa50e9fecee71f86cbe8a0396703d36e8eb314dcec13adbe0c5e77560a34f40ba5329671f723921cfedf6079b11cb6722d4e1bc7af7d7c53b712fd8521cd7d1c23e197c83930675d016cc39c55d94329d4e1723648c30a1924986a5e43c2db66d17f4c7a7b4c07ae39bb043ab99888a3c6b776f946182b28afc58327bef6560e73ab5e7cfa18fbf8ddf83d8600c43507586ef4b99a8d795254990d213e1d4b79c05c395f31d9279ef891f19136ddbcd2c891af42f0a5dc54054cbcc18ccaadf92eadb575c93773eb3a122915ba1d5debc226f670f5d41423012d3fccfab80cfc44a1e65bb55d43c80d2321062bf19791bd45671defa63ab1902a0d6531d460201434bb9e255f7aab5d3228deb6635df79ba6f992006625efcf704c348a7178ab593b1dd5fc4f444d76089a88da9310f62bc24ba9cfa08b0c7f4ac0f0afa7ef077f2ed6778aa808d01e575705b8479a4a2d869ee429888ccb609a4a7aa6648856071623be092e0d87b764d70d44ace9bef7452fed40c23e7bc7e719d9db9fc0a120b92904f3f86ae7ba78d2ae5997ab680f8e5d57065cbde6da7762c3ec58902c010941517905567b9cecaf86cc5f9052695ef9db5200cea10175507b5e22338c8118bfbf7b9d2fa00a3b89c425af168c37ead141f236684a73796de4a2d164db4e83d09e4643ec550072ae1f0aa11223083b178a7b56710d004b90989fedf871c656a16a0791fc0853372b390f40e7cc1368ece7df6ef35f08a52188f4e308045793e6bbf25c7ae6b0c9d1b188082f1ea6d7bf5d1b7db937489814a16c51e70bcd946dd3625320a9932e3523c3ceb4b39e51c49b59ca431bcb78b90a6a043890caefe845f9d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu ! enter some words to prove</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 书评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 写给自己的散文诗 </tag>
            
            <tag> 书评 </tag>
            
            <tag> 在路上 </tag>
            
            <tag> Jack Kerouac </tag>
            
            <tag> 舒国治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git|nvm|npm|命令行|linux等各种乱七八糟的指令大 全（持续持续缓缓更新中）</title>
      <link href="/2021/08/02/git-nvm-npm-ming-ling-xing-linux-deng-ge-chong-luan-qi-ba-zao-de-zhi-ling-da-quan-chi-xu-chi-xu-huan-huan-geng-xin-zhong/"/>
      <url>/2021/08/02/git-nvm-npm-ming-ling-xing-linux-deng-ge-chong-luan-qi-ba-zao-de-zhi-ling-da-quan-chi-xu-chi-xu-huan-huan-geng-xin-zhong/</url>
      
        <content type="html"><![CDATA[<p>本博客更新不定期，基本上是想到哪里就写什么，就是一些各种常见的脚本命令。</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><hr><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><pre class="line-numbers language-sh"><code class="language-sh">git clone ssh地址   # 项目克隆到本地git add .    # 提交到暂存区？好像是git commit -m""   # 提交到仓库git push origin main(master)# 提交到远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>暂时就这么多</p><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><hr><h3 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h3><pre class="line-numbers language-shell"><code class="language-shell">nvm lsnvm list  # 列出当前node包nvm -v  # 列出nvm版本nvm use 版本号  # 使用哪个版本nvm install 版本号  # 下载哪个版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加速源"><a href="#加速源" class="headerlink" title="加速源"></a>加速源</h3><p>在settings.txt后面加上我们的这么几行代码：</p><pre class="line-numbers language-shell"><code class="language-shell">proxy:node_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以加速我们的下载</p><h3 id="记得有时候要更改环境变量"><a href="#记得有时候要更改环境变量" class="headerlink" title="记得有时候要更改环境变量"></a>记得有时候要更改环境变量</h3><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><hr><h3 id="指令-2"><a href="#指令-2" class="headerlink" title="指令"></a>指令</h3><pre class="line-numbers language-shell"><code class="language-shell">npm inpm install # 都是安装对应包，但是前者会找到最新的包给你安装（似乎是这样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h2><hr><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><hr><h2 id="改环境变量"><a href="#改环境变量" class="headerlink" title="改环境变量"></a>改环境变量</h2><hr><p><code>Win + R</code> ，输入：<code>SystemPropertiesAdvanced.exe</code> ，回车。</p><p>然后点击 <code>环境变量</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C1.png" alt="0"></p><p>找到 <code>用户变量</code> 中的 <code>Path</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C2.png" alt></p><p>然后在里面修改一下 <code>npm</code> 的路径，我的是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C4.png" alt></p><p>点击确认之后，再进入 <code>系统变量</code> ，找到 <code>PATH</code> ，点击编辑：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C5.png" alt></p><p>然后修改 <code>nodejs</code> 的路径，我的是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C6.png" alt></p><p>然后就可以正常运行了。</p>]]></content>
      
      
      <categories>
          
          <category> 指令集 </category>
          
          <category> shell命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> nvm </tag>
            
            <tag> npm </tag>
            
            <tag> linux </tag>
            
            <tag> 命令行 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些小知识</title>
      <link href="/2021/08/02/yi-xie-xiao-zhi-shi/"/>
      <url>/2021/08/02/yi-xie-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="34cee35cb45aed522f9a889a2555c305fdfd781220ad239a0e38f2f27406735d">10d79030e8222445804370796b90fca19546fd7454b6ce835c19dd35fdfc5eb70066be35ece83facf975a45633f6c77bafee90d5af3d8e3ef70fff06e05766dfabce520ef766a86d4db753a1af8bb54108d1866d040fab1f020558624c5752905e36b020cf2d893ea43c3c7b65288e669b2179adb1b5b7854e7dd43029a0ce3db791988e0e00f669785575b4cc880c4a4285afe76b8ce751fa1665c75def274362966550914b6c8a03e456c777f5924925d8c3c787eb4c1b339b22d34eff8e3a0836cd46f1d9bc1b8aed1c0054a5efaa0e73bf6bb94bbc3acf0defd321f6ba48067512ac62cc6e472bd498185916a2a96de5b7d5e6d9f652531d7f26ea36d959d35729c5f94165c41c681427c5d445c47c62bbcbe1003b77f0c71c5fbd553aa66cbfb79b3104e1ec9827a0215835946e514632b2d1bf92a13f515c6eb1783b2d81dd91885d0c7cbcc52f2969ba4652d4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu ! enter some words to prove</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数码知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
            <tag> 数码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>readme</title>
      <link href="/2021/08/02/readme/"/>
      <url>/2021/08/02/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="逯润雨的博客"><a href="#逯润雨的博客" class="headerlink" title="逯润雨的博客"></a>逯润雨的博客</h1><p>这是我本人的博客平台，欢迎大家前来访问🥳<a href="https://lry89757.github.io/">https://lry89757.github.io/</a><br>刚建成没多久，有许多功能都不是很完善，我以后会在readme文档中记录更新功能与修改BUG与新的相关文章的。  </p><h2 id="8-5-23-48第八次更新"><a href="#8-5-23-48第八次更新" class="headerlink" title="8.5 23:48第八次更新"></a>8.5 23:48第八次更新</h2><hr><ol><li>更新了readme文档</li><li>把算法刷题的栈系列解析肝完了， 一共六篇博客</li><li>待完成：见第三次更新，不过最要紧的是代码高亮和音乐部分。</li></ol><h2 id="8-4-15-28第七次紧急更新！"><a href="#8-4-15-28第七次紧急更新！" class="headerlink" title="8.4 15:28第七次紧急更新！"></a>8.4 15:28第七次紧急更新！</h2><hr><p><strong>感谢帮忙测试朋友提出相关意见，我关停了网站对一些隐私做了紧急修改，感谢各位的帮助！</strong></p><h2 id="8-4-11-40第六次更新"><a href="#8-4-11-40第六次更新" class="headerlink" title="8.4 11:40第六次更新"></a>8.4 11:40第六次更新</h2><hr><ol><li>更新了readme文档</li><li>添加了转载限定规则模块采用知识共享署名 4.0 国际许可协议<del>（虽然我的文章不值得被转载）</del></li><li>取消了轮播图自动轮播，去掉了没用的音乐外链</li><li>增加了IP检测（excuse me ?)🤣😅</li><li>待完成：见第三次更新</li></ol><h2 id="8-3-15-39第五次更新"><a href="#8-3-15-39第五次更新" class="headerlink" title="8.3 15:39第五次更新"></a>8.3 15:39第五次更新</h2><hr><ol><li>更新了readme文档</li><li>博客：对于林俊杰最近事情的看法</li><li>加入了音乐播放功能哈哈哈哈！！😎😎当然目前的音乐都是我知道能够外链播放的，后期会继续整修的（没发现的朋友可以看页面左下角哦）</li><li>待完成：见第三次更新😬</li></ol><h2 id="8-2-22-25第四次更新"><a href="#8-2-22-25第四次更新" class="headerlink" title="8.2 22:25第四次更新"></a>8.2 22:25第四次更新</h2><hr><ol><li>更新了readme文档</li><li>友链增加了flylee，同班学霸</li><li>博客：写了一些对生活感想</li><li>进一步修改了markdown数学公式无法显示问题。</li><li>待完成：见第3次更新😁(我不催我自己！！！)</li></ol><h2 id="8-2-18-39第三次更新"><a href="#8-2-18-39第三次更新" class="headerlink" title="8.2 18:39第三次更新"></a>8.2 18:39第三次更新</h2><hr><p><del><em>看来刚建好博客更新的就是快啊……哈哈哈</em></del></p><ol><li>更新了readme文档😅</li><li>发布了2篇博客，一篇是读《在路上》后对生活的感想思考（有兴趣阅读的可以和我联系索要密码，破译出密码的大佬记得和我联系🤩），另一篇是常用的shell命令（git/nodejs/nvm/npm）集</li><li>实现了推荐置顶功能</li><li>待完成：<ul><li>二级目录</li><li>相册</li><li>代码高亮</li><li>评论</li></ul></li></ol><h2 id="8-2-14-28第二次更新"><a href="#8-2-14-28第二次更新" class="headerlink" title="8.2 14:28第二次更新"></a>8.2 14:28第二次更新</h2><hr><ol><li><p>更新了密码功能，对于一些文章实现了加密， <em>如果有小伙伴们对加密文章感兴趣，欢迎发邮件或是通过各种渠道联系我获取密码，顺便交个朋友👀</em>， 或者有关大佬可以选择直接尝试破译哦~那就更得交个朋友了😅</p></li><li><p>更新了readme文档</p></li><li><p>发布了一篇博客，关于一些数码小知识，并测试了密码功能。</p></li><li><p>待完成：</p><ul><li>代码高亮功能</li><li>二级目录</li><li>记录nvm、nodejs、npm踩坑历史的博客。</li><li>评论功能</li></ul></li></ol><h2 id="8-2-11-00-第一次更新"><a href="#8-2-11-00-第一次更新" class="headerlink" title="8.2  11:00 第一次更新"></a>8.2  11:00 第一次更新</h2><hr><ol><li>友链：修正了部分无法显示问题， 加进去了更多友链</li><li>发布了3篇新文章，全部都是关于numpy的小知识</li><li>增加mathjax已解决无法显示markdown数学公式问题</li><li>更新了readme文档</li><li>预计会进一步：  <ul><li>二级目录</li><li>一个博客记录nvm、nodejs、npm踩坑历史😖</li><li>评论模块</li><li>文章密码问题</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy中对于tile的理解</title>
      <link href="/2021/08/02/numpy-zhong-dui-yu-tile-de-li-jie/"/>
      <url>/2021/08/02/numpy-zhong-dui-yu-tile-de-li-jie/</url>
      
        <content type="html"><![CDATA[<p>近些天使用numpy的时候发现了这么一个函数tile，感觉这个函数比较有用，可以将减少循环，直接矩阵运算优化运算速度。博主认为很有必要认真讨论一下这个函数的功能。</p><h1 id="官网解释"><a href="#官网解释" class="headerlink" title="官网解释"></a>官网解释</h1><p>老传统，我们先看一下官网是怎么说的：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210708233501849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="np.tile"><br>相当于是一个复制函数，扩充矩阵的规模值直至到我们满意的一个形状。”tile”在英文中作动词会有“铺”的意思，与extend是同义词。<br>通过提供的次数reps来决定重复A的次数来构造一个array。<br>如果reps的长度为d，那么给出结果的维度就是max(d, A.ndim).</p><p>如果 A.ndim &lt; d，则通过添加新轴将 A 提升为 d 维。 因此，将形状 (3,) 数组提升为 (1, 3) 以进行 2-D 复制，或将形状 (1, 1, 3) 提升为 (1, 1, 3) 以进行 3-D 复制。 如果这不是所需的行为，请在调用此函数之前手动将 A 提升到 d 维度。</p><p>如果 A.ndim &gt; d，代表通过在它前面添加 1 被提升为 A.ndim。 因此，对于形状为 (2, 3, 4, 5) 的 A，(2, 2) 的重复次数被视为 (1, 1, 2, 2)。</p><p>最后注意一下：这里特意提到了<strong>虽然 tile 可以用于广播，但强烈建议使用 numpy 的广播操作和功能。</strong></p><h1 id="详细解析"><a href="#详细解析" class="headerlink" title="详细解析"></a>详细解析</h1><p>我们首先来看几个简单例子：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如代码所示，如果reps只是一个标量的话，我们仅需将其在矩阵内部加上赋值reps倍即可，而如果是矢量矩阵例如reps是（a, b, c）的话，我们需要在内部扩充c倍之后，将这一个整体矩阵看作是一个A然后他是形状为（a,b)里面的一个元素，这样的话我们就能够成功理解有关操作了。按照这个思路，我们看一下更加复杂的一些操作：</p><pre class="line-numbers language-python"><code class="language-python">b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上最后一个便是我们所谓的广播操作，但是numpy官方并不希望我们利用这个函数来进行广播操作。<br>最后仍然放一些实例吧：</p><pre class="line-numbers language-python"><code class="language-python">c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">b <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">28</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">27</span>  <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">4</span> <span class="token number">22</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">23</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.tile.html" target="_blank" rel="noopener">https://numpy.org/doc/stable/reference/generated/numpy.tile.html</a></p>]]></content>
      
      
      <categories>
          
          <category> numpy的小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 矩阵运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy中对于axis的理解</title>
      <link href="/2021/08/02/numpy-zhong-dui-yu-axis-de-li-jie/"/>
      <url>/2021/08/02/numpy-zhong-dui-yu-axis-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我们知道axis这个东西经常出现在numpy的sum、argsort等一系列有关于数组的操作中，numpy中的轴axis是很重要的，许多numpy的操作根据axis的取值不同，作出的操作也不相同。可以说，axis让numpy的多维数组变的更加灵活，但也让numpy变得越发难以理解。因此，弄清楚axis的作用显得尤为重要。作为一个很基本同时很重要的概念，博主觉得很有必要详细深入了解一下这一名词。<br><em>下面把博主的一些发现分享给大家。</em></p><h1 id="简单了解axis"><a href="#简单了解axis" class="headerlink" title="简单了解axis"></a>简单了解axis</h1><hr><p>axis 中文翻译指“轴”、“枢轴”。我们可以看一下<a href="https://numpy.org/doc/stable/user/quickstart.html#the-basics" target="_blank" rel="noopener">英文官网</a>的解释:</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210708104217716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="关于axis"></p><p>NumPy 的主要对象是同构多维数组。 它是一个元素表（通常是数字），所有类型都相同，由非负整数元组索引。 在 NumPy 中，维度称为轴。</p><p>例如，3D 空间 [1, 2, 1] 中一个点的坐标有一个轴。 该轴有 3 个元素，因此我们说它的长度为 3。在下图中的示例中，该数组有 2 个轴。 第一个轴的长度为 2，第二个轴的长度为 3。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实际上这个维度称为轴并不是很好理解，必须<strong>说明这里的轴维度和我们数学物理上面的是有很大区别的</strong>。</p><h1 id="与数学物理方面的区别"><a href="#与数学物理方面的区别" class="headerlink" title="与数学物理方面的区别"></a>与数学物理方面的区别</h1><hr><p>我们现随机建立一个3×3的数组。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.14828241</span><span class="token punctuation">,</span> <span class="token number">0.67698515</span><span class="token punctuation">,</span> <span class="token number">0.22729984</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.78760285</span><span class="token punctuation">,</span> <span class="token number">0.71820171</span><span class="token punctuation">,</span> <span class="token number">0.43459394</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.85447318</span><span class="token punctuation">,</span> <span class="token number">0.72708047</span><span class="token punctuation">,</span> <span class="token number">0.56316259</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该矩阵由于形状是3×3的，所以我们在线性代数里面认为这个矩阵维度是三（秩为三），但是在numpy的数组中，这个array的维数只有2，分别有axis=0,axis=1这两个轴，而axis=0的轴长度为3，axis=1的轴长度也为3.所以这里我们格外注意一下。</p><h1 id="进一步理解"><a href="#进一步理解" class="headerlink" title="进一步理解"></a>进一步理解</h1><hr><p>我们进行一下有关axis的操作，例如求和：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> carray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以看出，如果我们<strong>令axis=0,它会按照列求和得到一个和矩阵，令axis=1会得到一个按照行求和的矩阵</strong>。那么如果我们就这么记的话是不是就万事大吉了？当然不是！因为通常操作中，我们会操作维数更高的数组，这么的话，就无法使用0列1行的方法去操作了。</p><p>实际上，我们有着以下的规律：</p><p><strong>设axis=i，则Numpy沿着第i个下标变化的方向进行操作</strong></p><p><em>当然这里稍微补充一下如果是axis=-1的情况，那么就是沿着倒数第一个下标变化的方向开始操作</em></p><p>这里可以多举几个例子来帮助我们理解一下：</p><p>以以下三维数组为例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> darray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>这是一个三维数组，若axis=0,那么我们就应该把d[0][i][j]+d[1][i][j]+d[2][i][j]加起来，最终得到一个形状为2×4的矩阵</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> darray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图所示，确实得到了一个2×4的矩阵。</p><ol start="2"><li>接着我们尝试axis=1,那么应该得到了一个3×4的矩阵</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> darray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果便是如此。</p><p>实际上除了sum函数，还有着许许多多需要用到这方面知识的函数，例如max、min、average、argsort、sort这些函数。</p><p>举几个我们看一下：</p><ul><li>sort</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> e <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> earray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> earray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> earray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>argsort</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> farray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort <span class="token operator">=</span> f<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sortarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort0<span class="token operator">=</span>f<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort0array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort1<span class="token operator">=</span>f<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort1array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接：</p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/31275071" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31275071</a></p></li><li><p><a href="https://blog.csdn.net/m0_37673307/article/details/82118030" target="_blank" rel="noopener">https://blog.csdn.net/m0_37673307/article/details/82118030</a></p></li><li><p><a href="https://stackoverflow.com/questions/19389910/in-python-numpy-what-is-a-dimension-and-axis#:~:text=In%20Numpy%20dimensions%20are%20called,has%20a%20length%20of%203" target="_blank" rel="noopener">https://stackoverflow.com/questions/19389910/in-python-numpy-what-is-a-dimension-and-axis#:~:text=In%20Numpy%20dimensions%20are%20called,has%20a%20length%20of%203</a>.</p></li><li><p><a href="https://numpy.org/doc/stable/user/quickstart.html#the-basics" target="_blank" rel="noopener">https://numpy.org/doc/stable/user/quickstart.html#the-basics</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> numpy的小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 矩阵计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>argsort函数的详解</title>
      <link href="/2021/08/02/argsort-han-shu-de-xiang-jie/"/>
      <url>/2021/08/02/argsort-han-shu-de-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>argsort函数经常用于矩阵的一些不破坏原有数组的情况下得到原数组的有序序列的情况。</p><h1 id="官网解释"><a href="#官网解释" class="headerlink" title="官网解释"></a>官网解释</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210708101432523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="官网介绍"><br>使用 kind 关键字指定的算法沿给定轴执行间接排序。它以排序的顺序返回与给定轴上的索引数据具有相同形状的索引数组。<br>axisint 或 None，可选<br>排序的轴。默认值为 -1（最后一个轴）。如果没有，则使用扁平数组。</p><p>kind:{‘快速排序’、‘合并排序’、‘堆排序’、‘稳定’}，排序算法。默认值为“快速排序”。请注意，“stable”与“mergesort”都在幕后使用 timsort，通常，实际实现会因数据类型而异。保留“合并排序”选项是为了向后兼容。</p><p>在 1.15.0 版更改。：添加了“稳定”选项。</p><p>orderstr 或 str 列表，可选<br>当 a 是一个定义了字段的数组时，这个参数指定要比较哪些字段，第一个，第二个等等。 单个字段可以指定为字符串，不是所有的字段都需要指定，但仍然会使用未指定的字段，在它们出现在 dtype 中的顺序，以打破联系。</p><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><p>实际上就是返回了一个升序的序列，里面每一个元素都是排序好后的元素在原序列中的索引。这样方便我们在原序列中找到每一个元素。这一句话可能不是很好理解我们结合一定的例子来看一下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如以上来看，原序列为[8, 1, 5, 6], 我们其使用argsort函数之后得到序列[1, 2, 3, 0],  那么我们直接使用a[1]就是a中最小的元素，a[0]就是a中最大的元素。<br>我们可以多看几个类似的例子, 这里可以看一下二维数组:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上可以看出，实际上如果是二维数组的话，不仅仅有这这么一种排序的方法，不仅可以按照行来排，也可以按照列来排序。这里仍然是通过axis轴来确定的排序方式，函数默认axis=-1，这里我在之前博客有提到过，读者如果对于axis函数比较陌生的话可以看一下<a href="https://blog.csdn.net/LRY89757/article/details/118570303?spm=1001.2014.3001.5501" target="_blank" rel="noopener">我之前的一篇博客</a>这里详细解释了axis的有关理解。<br>以下再给出官网几个例子：</p><pre class="line-numbers language-python"><code class="language-python">ind <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># sorts along first axis (down)</span>indarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>take_along_axis<span class="token punctuation">(</span>x<span class="token punctuation">,</span> ind<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># same as np.sort(x, axis=0)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以及不常用的根据关键字：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>xarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      dtype<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>大家如果有兴趣可以去<a href="https://numpy.org/doc/stable/reference/generated/numpy.argsort.html" target="_blank" rel="noopener">官网</a>看一下。</em></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.argsort.html" target="_blank" rel="noopener">https://numpy.org/doc/stable/reference/generated/numpy.argsort.html</a></p><p><a href="https://blog.csdn.net/LRY89757/article/details/118570303?spm=1001.2014.3001.5501" target="_blank" rel="noopener">https://blog.csdn.net/LRY89757/article/details/118570303?spm=1001.2014.3001.5501</a></p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> numpy的小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 矩阵计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构各类排序算法详解+代码分析</title>
      <link href="/2021/08/01/shu-ju-jie-gou-ge-lei-pai-xu-suan-fa-xiang-jie-dai-ma-fen-xi/"/>
      <url>/2021/08/01/shu-ju-jie-gou-ge-lei-pai-xu-suan-fa-xiang-jie-dai-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知不觉，数据结构已经学完了，博主也马上大二了😭时间过得太快了😱，但是数据结构学得确实不太好，楼主花了将近一天的时间整理了一下排序的有关算法。希望对大家也有所帮助。<br>@<a href="目录">TOC</a></p><hr><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><hr><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>每步将一个待排序记录，按其关键码大小，插入到前面已经排好序的一组记录的适当位置上，直到记录全部插入为止。</p><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertSort</span> <span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//对顺序表L作直接插入排序</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span> i <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//直接在原始无序表L中排序</span><span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若L.r[i]较小则插入有序子表内</span><span class="token punctuation">{</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先将待插入的元素放入“哨兵”位置</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子表元素开始后移</span><span class="token keyword">for</span> <span class="token punctuation">(</span> j<span class="token operator">=</span>i<span class="token number">-2</span><span class="token punctuation">;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span> <span class="token operator">--</span>j <span class="token punctuation">)</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只要子表元素比哨兵大就不断后移</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直到子表元素小于哨兵，将哨兵值送入</span>        <span class="token comment" spellcheck="true">//当前要插入的位置（包括插入到表首）</span>     <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//if</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// InsertSort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p><em>从第二个记录开始逐趟开始插入</em></p><h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><hr><p>这个相对于直接插入排序，减少了比较的次数，但是没有减少移动的次数：$$n^2$$ / 4次</p><p>只是我们查找插入的位置时，使用了折半查找的方法。</p><h3 id="二路排序"><a href="#二路排序" class="headerlink" title="二路排序"></a>二路排序</h3><hr><p>相比之下，减少了移动的次数，约为$$n^2$$ / 8次</p><p><a href="http://data.biancheng.net/view/67.html" target="_blank" rel="noopener">二路排序</a></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>first<span class="token punctuation">,</span>final<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    first <span class="token operator">=</span> final <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分别记录temp数组中最大值和最小值的位置</span>    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 待插入元素比最小的元素小</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            first <span class="token operator">=</span> <span class="token punctuation">(</span>first <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 待插入元素比最大元素大</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">[</span>final<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            final <span class="token operator">=</span> <span class="token punctuation">(</span>final <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>final<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 插入元素比最小大，比最大小</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token punctuation">(</span>final <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当插入值比当前值小时，需要移动当前值的位置</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//插入该值</span>            temp<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//因为最大值的位置改变，所以需要实时更新final的位置</span>            final <span class="token operator">=</span> <span class="token punctuation">(</span>final <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将排序记录复制到原来的顺序表里</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token punctuation">(</span>first <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><hr><p><em>希尔排序就是指取固定的一些增量序列来分别进行直接插入排序，比如去dk = 5， 3， 1这种，到最后对基本有序的全体序列进行一次直接插入排序注意增量序列的之中没有除1之外的公因子，且最后一个值必定为1.</em></p><p>算法思想：</p><p>先将整个待排记录序列分割成若干子序列分别进行直接插入排序，待整个序列中的记录基本有序时，再对全体记录进行一次直接插入排序。分为多个子序列的方法:设置一系列增量值（dk值），将相隔某个增量的记录组成一个子序列，如第一趟dk=5,则r1，r6.为一组，r2，r7为一组，然后每一组进行直接插入排序。以此类推。不断减小dk的值，直到为1，再进行直接插入排序就能实现对整体记录的插入排序了。</p><p>dk值较大，子序列中对象较少，速度较快；</p><p>dk值逐渐减小，子序列中对象变多，但大多数对象已基本有序，所以排序速度仍然很快。</p><p>输入：增量的数目k，各个增量dk，  顺序表的长度，顺序表中各个元素。</p><p>输出：排好序的顺序表中各个元素。</p><p>算法图解（这是从网上看到的图，侵删）：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630151121305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="希尔排序"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> dlta<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//按增量序列dlta[0..t-1]对顺序表L做希尔排序。</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>t<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>        <span class="token function">ShellInsert</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> dlta<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//一趟增量为dlta[k]的插入排序</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShellInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> dk<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对顺序表进行一趟增量为dk的Shell排序，dk为步长因子</span>    <span class="token comment" spellcheck="true">//相对于一趟插入排序相比，做了如下修改：</span>    <span class="token comment" spellcheck="true">//  1. 前后记录位置的增量是dk，而不是1</span>    <span class="token comment" spellcheck="true">//  2. r[0]只是暂存单元，不是哨兵。当j&lt;=0时，插入位置已找到。</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>dk<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//开始将r[i]插入有序增量子表</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token operator">-</span>dk<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token function">RedCopy</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//暂存在r[0]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span>dk<span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>j<span class="token operator">-</span><span class="token operator">=</span>dk<span class="token punctuation">)</span>                <span class="token function">RedCopy</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span>dk<span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键字较大的记录在字表中后移</span>        <span class="token function">RedCopy</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span>dk<span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在本趟结束时将r[i]插入到正确位置</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><hr><p><em>就是先选用一个数（可以随机选也可以直接用第一个），以他为基准然后比它大的放后面，比他小的放前面，这样形成一个大致左边必定比右边小的序列后，再次对于两边的这些数分段进行递归相同的操作，不稳定</em></p><p>优点：平均性能好，O(nlog2n)，2为下标</p><p>缺点：不稳定，初始序列有序或基本有序时，时间复杂度降为O(n^2)。</p><p>算法图解：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630150456865.gif#pic_center" alt="快速排序"></p><p>快排的算法详解：</p><p>一趟快速排序我们最初实现的思想就是设置两个指针low、high,一个指向基准的元素，一个指向末尾，然后我们从末尾开始往前遍历，如果我们的high小于基准了开始，那么就和low指向的基准交换。然后开始从low开始往后遍历，直到找到一个low比基准大的元素和此时的high（指向的还是基准）交换，然后再从high开始……如此重复直到我们的low=high.</p><p>但是这么算的话每次交换一对记录需要进行3次移动赋值操作。实际上我们对于基准的移动是多余的，基准就在我们最后循环结束的low=high位置。所以我们可以选择将基准提前放好，然后我们选择该交换的时候直接赋值high小于基准后直接赋值给low……直到我们low = high的时候再将放好的基准放到low(high)的位置。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//用子表的第一个记录作基准记录</span>    pivotkey <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//记录关键字</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//从表的两端交替地向中间扫描</span>    <span class="token punctuation">{</span>                                        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">>=</span> pivotkey<span class="token punctuation">)</span><span class="token operator">--</span>high<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//将比基准小的记录移到低端</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> pivotkey<span class="token punctuation">)</span><span class="token operator">++</span>low<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将比基准大的记录移到高端</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//返回基准位置</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">QSort</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对顺序表L中的子序列L.r[low..high]做快速排序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">>=</span> high<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    pivotkey <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QSort</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivotkey<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QSort</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> pivotkey<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间效率：O(nlog2n) —因为每趟确定的元素呈指数增加<br>空间效率：O（log2n）—递归栈(存每层low，high和pivot)<br>稳 定 性： 不 稳 定 —因为跳跃式交换。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><hr><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>每一趟(第 i 趟)在后面 n-i+1 个待排记录中选取关键字最小的记录作为有序序列中的第 i 个记录。</p><p><em>也就是先从所有中选出最小的作为第一个，再从剩下的选出最小的作为第二个，…….</em></p><p>分类主要有简单选择排序，锦标赛排序，堆排序。</p><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><hr><p>基本思想：每经过一趟比较就找出一个最小值，与待排序列<br>最前面的位置互换即可。<br>——首先，在n个记录中选择最小者放到r[1]位置；然后，从剩余的n-1个<br>记录中选择最小者放到r[2]位置；…如此进行下去，直到全部有序为止。<br>优点：实现简单<br>缺点：每趟只能确定一个元素，表长为n时需要n-1趟<br>前提：顺序存储结构</p><pre class="line-numbers language-c"><code class="language-c">Void <span class="token function">SelectSort</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> <span class="token function">SelectMinKey</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> i<span class="token operator">!=</span>j <span class="token punctuation">)</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> «r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//for</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//SelectSort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>显然简单选择排序的缺点是非常明显的，第一次比较n-1次，第二次比较n-2次，以此类推，如果我们要优化的时候，我们要考虑<strong>是否第一趟比较n-1次后第二趟还需要比较n-2次</strong>，这个是很重要的。所以我们应该从减少比较个数这个地方开始着手优化</em></p><p>我们可以参考我们体育比赛中的锦标赛排序，在8个运动员中选择前3名最多只需要11场比赛，而不是7+6+5场比赛。</p><p>而这就是我们的锦标赛排序：</p><h3 id="锦标赛排序"><a href="#锦标赛排序" class="headerlink" title="锦标赛排序"></a>锦标赛排序</h3><hr><p>基本思想：与体育比赛时的淘汰赛类似。<br>首先对 n 个记录的关键字进行两两比较，得到 [n/2] 个 优胜者(关键字小者)，作为第一步比较的结果保留下来。然后在这 [n/2] 个较小者之间再进行两两比较，…，如此重复，直到选出最小关键字的记录为止。<br>优点：减少比较次数，加快排序速度<br>缺点：空间效率低</p><p>算法图解：</p><p>以关键字序列T= （21，25，49，25*，16，08，63）为例</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164415761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164647564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164813897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164859899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164954897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630165030443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630165047263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p> 锦标赛排序构成的树是完全(满）二叉树，其深度[$log_{2}{n}$] +1，其中 n 为待排序元素(叶子结点)个数。<br>• 时间复杂度：O($nlog_{2}{n}$) —n个记录各自比较约$log_{2}{n}$次<br>• 空间效率： O(n） —胜者树的附加内结点共有n0-1个！<br>• 稳定性：稳定 —可事先约定左结点“小”</p><p>这种排序方法的劣势就是消耗空间较大，“最大值”进行多余的比较等问题。为了弥补，J.willioms在1964年提出了另一种形式的选择排序——堆排序。</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><hr><p><a href="https://www.luogu.com.cn/blog/BlueHedgehog/solution-p2676" target="_blank" rel="noopener">这里有一个有关堆排序讲的很好的博客</a></p><hr><p>我们需要解决这几个问题：什么是堆？怎么建堆？怎么堆排序？</p><h4 id="堆定义"><a href="#堆定义" class="headerlink" title="堆定义"></a>堆定义</h4><ol><li>完全二叉树</li><li>树中所有结点的值必须大于（或小于）其左右孩子，树的根结点必定为最大值（或最小值）。</li></ol><p>分为大根堆和小根堆，这个其实如果根节点是最大值，那就是大根堆，反之就是小根堆。例子如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630172615692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆"></p><p>那如何建堆呢?</p><h4 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h4><p>基本方式：从最后一个非终端结点开始往前逐步调整，让每个双亲大于（或小于）子女，直到根结点为止。</p><p><strong>完全二叉树的第一个非终端结点编号必为[n/2].</strong></p><p><em>终端结点：叶子结点（所以不需要我们单独调整）</em></p><p>这里给出图解例子：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021063020371080.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="建堆"></p><p>注意以上建堆的过程中是从最后一个非叶子结点开始每次比较的都是结点的左右孩子，不必和父节点比较，然后我们比完后不符合的就交换(<strong>这里如果两个子女都比父节点大那么就选大的上浮</strong>)，注意交换过之后要再比一次左右节点（<strong>即将父母结点下移之后如果还有子节点还要继续下移判断！</strong>）。然后再往前找到倒数第二个非叶子结点….以此类推直到根结点。</p><h4 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h4><p><em>我们知道，建成一个堆后，堆的根节点就是最大值（最小值），所以我们可以直接输出根节点，问题在于，我们输出根节点后还需要将剩余的缺乏根节点的堆再次维护成一个完整的堆然后再次输出根节点以达到堆排序的目的。</em></p><p>方法：将当前顶点与堆尾记录交换，然后仿建堆动作重新调整，如此反复直至排序结束。将任务转化为—&gt;<br>H.r[i…m]中除r[i]外，其他都具有堆特征。现调整r[i]的值 ，使H.r[i…m]为堆。</p><p>这就相当于我们把根节点和最末尾的那个结点交换了一下位置然后数组长度length–直接删除了原来根节点，然后目前就是一个根节点不满足堆其他点都满足堆的一个“堆”，我们接下来<strong>只需要维护这一个点</strong>就可以了。以此类推，达到堆排序目的。即：</p><p>基于初始堆进行堆排序的算法步骤：<br>堆的第一个对象r[1]具有最大的关键码，将r[1]与r[n]对调，把具有最大关键码的对象交换到最后;<br>再对前面的n-1个对象，使用堆的调整算法，重新建立堆。<br>结果具有次最大关键码的对象又上浮到堆顶，即r[1] 位置;<br>再对调r[1]和r[n-1]，然后对前n-2个对象重新调整，…<br>如此反复，最后得到全部排序好的对象序列。</p><p>图解：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210532115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210554583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021063021061067.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210627725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210644962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"></p><h4 id="算法代码解析"><a href="#算法代码解析" class="headerlink" title="算法代码解析"></a>算法代码解析</h4><p>首先我们直到由于我们建堆过程中需要比较调整，所以需要用到堆调整函数HeapAdjust。  </p><ol><li>HeapAdjust是针对结点 i 的堆调整函数，其含义是：从结点i开始到堆尾为止，自上向下比较，如果子女<br>的值大于双亲结点的值，则互相交换，即把局部调整为大根堆。这一过程称之为筛选。</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token function">HeapAdjust</span><span class="token punctuation">(</span>HeapType <span class="token operator">&amp;</span>H <span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> m <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*从结点i开始到当前堆尾m为止，自上向下比较，如果子女的    值大于双亲结点的值，则互相交换，即把局部调整为大根堆。*/</span>    current<span class="token operator">=</span>i<span class="token punctuation">;</span> temp<span class="token operator">=</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> child<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//temp暂存 r[i]值，child是其左孩子</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>child<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//检查是否到达当前堆尾，未到尾则整理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> child<span class="token operator">&lt;</span>m <span class="token operator">&amp;&amp;</span> H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>        child<span class="token operator">=</span> child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//让child指向两子女中的大者位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> temp<span class="token punctuation">.</span>key<span class="token operator">>=</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span> breack<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根大则不必调整，函数结束</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>         H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token operator">=</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//否则子女中的大者上移</span>        current<span class="token operator">=</span> child<span class="token punctuation">;</span> child<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span> child<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//将根下移到孩子位置并继续向下整理！(这一点很关键)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// while</span>    H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直到自下而上都满足堆定义，再安置入口结点</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// HeapAdjust</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>建堆</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HeapSort</span> <span class="token punctuation">(</span>HeapType <span class="token operator">&amp;</span>H <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//H是顺序表，含有H.r[ ]和H.length两个分量</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> H<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token operator">-</span> i <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//把r[1…length]建成大根堆</span>    <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i<span class="token punctuation">,</span> H<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使r[i…length]成为大根堆</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// HeapSort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>堆排序</p><p>重建时，2至i-1号结点已符合堆的要求，故只需从 1号结点开始调整。因每次从堆顶开始调整，故每次调用耗时<br>O(log2n).</p><p>• 时间效率： T(n) = O($nlog_{2}{n}$）。因为整个排序过程中需要调<br>用n-1次HeapAdjust( )算法，而此算法耗时为O($log_{2}{n}$)；<br>• 注意：初始建堆的关键字比较次数≤4n,T(n)=Θ(n)。<br>• 空间效率：O(1)。在for循环中交换记录时用到临时变量temp。<br>• 稳定性： 不稳定。<br>• 优点：对小文件效果不明显，但对大文件有效。</p></li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HeapSort</span> <span class="token punctuation">(</span>HeapType <span class="token operator">&amp;</span>H <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//对顺序表H进行堆排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> H<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token operator">-</span> i <span class="token punctuation">)</span>    <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span>i<span class="token punctuation">,</span> H<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//for,建立初始堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> H<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    H<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> ←→ H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//交换，要借用temp</span>    <span class="token function">HeapAdjust</span><span class="token punctuation">(</span> H<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>i<span class="token number">-1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重建最大堆, m=i-1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><hr><p>基本思想：归并含义就是将两个或两个以上的有序表合成一个新的有序表。利用该思想可以假设刚开始的无序表是一个有n个长度为1的有序表，然后两两归并，得到[n/2]个长度为2的有序表，再次归并得到[n/4]个长度为4的有序表……以此类推最终得到长度为n的有序表。</p><p>算法图解：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630190556841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="归并排序"></p><p>归并排序的算法还是很简单的：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Merge</span> <span class="token punctuation">(</span>RcdType SR<span class="token punctuation">[</span> <span class="token punctuation">]</span>， RcdType <span class="token operator">&amp;</span>TR<span class="token punctuation">[</span> <span class="token punctuation">]</span>，<span class="token keyword">int</span> i<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 将有序的SR[i…m]和SR[m+1…n]归并为有序的TR[i…n]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>i <span class="token punctuation">,</span> j<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> SR<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;=</span> SR<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>TR<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> TR<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将两个SR记录由小到大并入TR</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// for</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span> TR<span class="token punctuation">[</span>k…n<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>i…m<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将剩余的SR[i…m]复制到TR</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span> TR<span class="token punctuation">[</span>k…n<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>j…n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将剩余的SR[j…n]复制到TR</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Merge</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">MSort</span> <span class="token punctuation">(</span>RcdType SR<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> RcdType <span class="token operator">&amp;</span>TR1<span class="token punctuation">[</span> <span class="token punctuation">]</span>，<span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 将无序的SR[s…t]归并排序为TR1[s…t]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> s<span class="token operator">==</span>t <span class="token punctuation">)</span>TR1<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当len=1时返回</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        m<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将SR [s…t]平分为SR [s…m]和SR [m+1…t]</span>        <span class="token function">MSort</span> <span class="token punctuation">(</span>SR，<span class="token operator">&amp;</span>TR2，s<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将SR 一分为二, 2分为4…</span>        <span class="token comment" spellcheck="true">// 递归地将SR [s…m]归并为有序的TR2[s…m]</span>        <span class="token function">MSort</span> <span class="token punctuation">(</span>SR，<span class="token operator">&amp;</span>TR2，m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归地将SR [m+1…t]归并为有序的TR2[m+1…t]</span>        <span class="token function">Merge</span><span class="token punctuation">(</span>TR2， TR1， s<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将TR2 [s…m]和TR2 [m+1…t]归并到TR1 [s…t]</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//if</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// MSort</span><span class="token comment" spellcheck="true">//TR2只是一个辅助数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个函数用来合并有序的两个序列，而第二个函数用来递归进行归并，这里用到了TR2这个辅助数组。首先不断递归至n个长度为1的有序数组到TR2中，然后将他们两两Merge归并起来到TR2中（<strong>注意除了第一层递归外其余的所有递归过程中虽然Merge调用的看着好像是TR1，但那是形参，实际上那是TR2！！也就是那个Merge函数实际上是在调用归并TR2的s..m and m+1..t项到自己的数组中！！</strong>），接着直到我们递归回溯至最后一层时，也就是开始的函数，我们调用Merge把就差一步就有序的TR2归并排好放到TR1中。</p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><hr><p>基数排序是与前面的排序完全不同，前面的排序主要是通过关键字间的比较和移动记录这两种操作，而实现基数排序不需要记录关键字之间的比较。它是一种<strong>借助多关键字排序的思想对单逻辑关键字进行排序</strong>的方法。</p><p> 多关键字排序：n个元素的序列{R1,R2,…, Rn}，每个元素Ri有d个关键字(K0i, K1i,…, Kd-1i)，则序列对关键字(K0i, K1i,…, Kd-1i)有序是指：<br>对于序列中任意两个记录Ri和Rj(i&lt;j)记都满足下列有序关系：(K0i, K1i,…, Kd-1i) &lt; (K0j, K1j,…, Kd-1j)<br>其中K0称为最主位关键字，Kd-1称为最次位关键字。</p><p>主要分为两类：</p><p>最高位优先(MSD):<br>先对最主位关键字K0进行排序,将序列分成若干个子序列，每个子序列中的元素具有相同的K0值，然后分别就每个子序列对关键字K1进行排序，按K1值的不同再分成更小的子序列，依次重复，直至对Kd-2进行排序之后得到的每个子序列中的元素都具有相同的(K0, K1,…, Kd-2)，而后分别为每个子序列对Kd-1 进行排序，最后将所有子序列依次联接成为一个有序序列。</p><p>最低位优先(LSD) ：                                                                                                                                                                 先对最次位关键字Kd-1进行排序,然后对Kd-2进行排序，依次重复，直至对K0进行排序后便成为一个有序序列</p><p>链式基数排序：</p><p>对于整型或字符型的单关键字，可以看成是由多个数位或多个字符<br>构成的多关键字。仅分析关键字自身每位的值，通过分配、收集进行处理。</p><ol><li>待排序记录以指针相链，构成一个链表（静态链表）；</li><li>“分配”时，按当前“关键字位”所取值，将记录分配到不同的<br>“链队列”中，每个队列中记录的 “关键字位”相同；</li><li>“收集”时，按当前关键字位取值从小到大将各队列首尾相链成<br>一个链表;</li><li>对每个关键字位均重复 2) 和 3) 两步。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221322610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="基数排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221343492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="基数排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221450530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="基数排序"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><h3 id="排序方法比较"><a href="#排序方法比较" class="headerlink" title="排序方法比较"></a>排序方法比较</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221719469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="总结"></p><h3 id="方法选择"><a href="#方法选择" class="headerlink" title="方法选择"></a>方法选择</h3><p>基本有序时可选用直接插入、简单选择、堆排序、锦标赛排序、冒泡排序、归并排序、(希尔排序)等方法，其中插入排序和冒泡应该是最快的。因主要是比较操作，移动元素很少。此时平均时间复杂度为O(n)。<br>无序的情况下最好选用快速排序、希尔排序、简单选择排序等，这些算法的共同特点是，通过“振荡”让数值相差不大但位置差异很大的元素尽快到位。</p><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>终于写完了QAQ，真是累死我了。感谢大家看到这里，看到这里的是真🦏，也欢迎大家一键三连哦~</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 图解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态查找表之二叉排序树和平衡二叉树（图解+代码详解）</title>
      <link href="/2021/08/01/dong-tai-cha-zhao-biao-zhi-er-cha-pai-xu-shu-he-ping-heng-er-cha-shu-tu-jie-dai-ma-xiang-jie/"/>
      <url>/2021/08/01/dong-tai-cha-zhao-biao-zhi-er-cha-pai-xu-shu-he-ping-heng-er-cha-shu-tu-jie-dai-ma-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><strong>动态查找表</strong>：与静态查找表不同的是，动态查找表是在查找过程中动态生成的，即对于给定值key, 若表中存在其关键字等于key的记录，则查找成功返回，否则插入关键字等于key的记录。</p><p>主要分为：二叉排序树、平衡二叉树、B-和B+树。</p><p>我们这里主要分析讨论前两种。</p><p>@<a href="目录">TOC</a></p><h1 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h1><hr><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>定义</strong>：二叉排序树，又称二叉查找树。或者是一颗空树，或者是满足以下性质的二叉树：</p><p>1)  若其左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>2)  若其右子树不空，则右子树上所有结点的值均大于它的根结点的值<br>3)  其左、右子树也分别为二叉排序树</p><p><strong><em>特点： 二叉排序树的中序遍历序列一定是递增有序的</em></strong></p><p><strong>注意二叉排序树和二叉判定树不要搞混了，这两个区别还是比较大的，二叉判定树是静态查找的折半查找时用到的，遍历了搜索的可能性，而且结点放置的是序号。</strong></p><h2 id="构造二叉排序树"><a href="#构造二叉排序树" class="headerlink" title="构造二叉排序树"></a>构造二叉排序树</h2><p>我们对于给定序列，取其第一个点为根结点，然后依次选择后续节点边比较边插入。如果比当前结点小，往该节点左子树移动比较，如果比当前结点大，则往该节点右子树移动比较。直到到一个待比较位置为空的位置，就是该节点的最终位置。</p><p>文字过于生硬，图解说明一下：</p><p><em>设输入序列为：（30,11,18,4,55,19,15,70,58）</em></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210703234753819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="二叉排序树构造"></p><p>如此便构造成功了一个二叉排序树。</p><p>这样一来我们也可以很方便的计算出其平均查找长度，每一层的高度就是查找所花费的次数，例如：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210703235103726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="二叉排序树"></p><h2 id="基本操作代码解析"><a href="#基本操作代码解析" class="headerlink" title="基本操作代码解析"></a>基本操作代码解析</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>首先我们选择使用二叉链表作为其存储结构：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiTNode <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 结点结构</span>    TElemType data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 包含key</span>    <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左右孩子指针</span><span class="token punctuation">}</span> BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><h4 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h4><p>思路很简单，仅需要从根节点开始比较就可以，比当前结点大就找左子树，小就找右子树直到找到为止</p><pre class="line-numbers language-c"><code class="language-c">BiTree <span class="token function">SearchBST</span> <span class="token punctuation">(</span>BiTree T，KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//在根指针T所指二叉排序树中递归地查找某关键字等于key的数据元素</span>    <span class="token comment" spellcheck="true">//若查找成功，则返回指向该数据元素结点的指针，否则返回空指针</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">EQ</span><span class="token punctuation">(</span>key，T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>； <span class="token comment" spellcheck="true">//查找结束</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">LT</span><span class="token punctuation">(</span>key，T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild，key<span class="token punctuation">)</span><span class="token punctuation">)</span>；    <span class="token comment" spellcheck="true">//在左子树中继续查找</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild，key<span class="token punctuation">)</span><span class="token punctuation">)</span>；    <span class="token comment" spellcheck="true">// 在右子树中继续查找</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//SearchBST</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h4><p>由于我们这个不需要回溯，实际上也就是使用一个while循环代替递归的工作栈，思路和递归算法差不多。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> BiTNode <span class="token operator">*</span><span class="token function">search_tree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>T<span class="token punctuation">,</span> keytype key<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回值</span>失败：<span class="token constant">NULL</span> 成功：非<span class="token constant">NULL</span>，结点指针<span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span>T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> T；        <span class="token comment" spellcheck="true">//查找成功</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">&lt;</span>T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        T<span class="token operator">=</span>T<span class="token operator">-></span>lchild； <span class="token comment" spellcheck="true">//查左子树</span>    <span class="token keyword">else</span>        T<span class="token operator">=</span>T<span class="token operator">-></span>rchild； <span class="token comment" spellcheck="true">//查右子树</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> T；    <span class="token comment" spellcheck="true">//查找失败</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入的思路相对而言也比较简单，主要借助查找，把新节点作为叶子插入。代码如下：</p><pre class="line-numbers language-c"><code class="language-c">Status <span class="token function">InsertBST</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当二叉排序树中不存在关键字等于e.key的数据元素时，</span><span class="token comment" spellcheck="true">//插入元素e并返回true，否则返回false</span>    p <span class="token operator">=</span> T<span class="token punctuation">;</span> father <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token operator">!=</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        father <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token operator">></span>p<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token keyword">else</span> p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//while</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//键值为e.key的结点已经存在</span>    s <span class="token operator">=</span> new BiTnode<span class="token punctuation">;</span> s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span> s<span class="token operator">-></span>lchild <span class="token operator">=</span> s<span class="token operator">-></span>rchild <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>father<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> T <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//空树插入</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token operator">></span>father<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span> father<span class="token operator">-></span>rchild <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">else</span> father<span class="token operator">-></span>lchild <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//InsertBST</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除操作相对于前面的查找与插入就复杂一些了。删除某元素需要维护二叉排序树的形状。这里假设<em>p表示待删除结点的指针，$$P_L$$ 和$$P_R$$代表p的左右孩子指针，f是p的父节点，并假设*</em>p是f的左孩子**。那么有三种情况需要我们考虑，一种情况是p没有左右孩子，那只需我们更改一下f的左孩子指针指向，指向空指针即可；第二种情况便是p只有一个孩子，那么这样也只需将f的左孩子指针指向$$P_L$$ 或$$P_R$$；第三种情况就是p有两个孩子，这样就需要我们分析一下了：</p><p>设删除前的中序遍历序列为：     …. $$P_L$$  s p $$P_R$$  f ….<br>//p的直接前驱是s<br>//s是<em>p左子树最右下方的结点<br>删除p后，使其它元素的相对位置不变。有两种解决方法：<br>法1：令</em>p的左子树为 <em>f的左子树，</em>p的右子树接为<em>s的右子树；即 $$f_L$$ =$$P_L$$  ; $$S_R$$ =$$P_R$$  ;<br>法2：直接令</em>s代替<em>p即   *s为</em>p左子树最右下方的结点</p><p>图解如下：</p><p>假设删除P点。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210704001638163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="删除结点"></p><p>删除各个结点：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210704001839117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="删除结点"></p><p>代码按以上思想编写：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete_BST</span> <span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>T <span class="token punctuation">,</span> KeyType key <span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 在以T为根结点的BST树中删除关键字为key的结点 */</span><span class="token punctuation">{</span> BSTNode <span class="token operator">*</span>p<span class="token operator">=</span>T <span class="token punctuation">,</span> <span class="token operator">*</span>f<span class="token operator">=</span><span class="token constant">NULL</span> <span class="token punctuation">,</span> <span class="token operator">*</span>q <span class="token punctuation">,</span> <span class="token operator">*</span>s <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//q指向删除结点的孩子</span><span class="token keyword">while</span> <span class="token punctuation">(</span> p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">EQ</span><span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查找删除结点</span><span class="token punctuation">{</span> f<span class="token operator">=</span>p <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LT</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> p<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 搜索左子树</span><span class="token keyword">else</span> p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//搜索右子树</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有要删除的结点</span> s<span class="token operator">=</span>p <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到了要删除的结点为p ，先找其替代结点s</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 左、右子树都不空</span><span class="token punctuation">{</span> f<span class="token operator">=</span>p <span class="token punctuation">;</span> s<span class="token operator">=</span>p<span class="token operator">-></span>Lchild <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从左子树开始找</span><span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span> f<span class="token operator">=</span>s <span class="token punctuation">;</span> s<span class="token operator">=</span>s<span class="token operator">-></span>Rchild <span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 找左子树中最右边的结点</span>p<span class="token operator">-></span>key<span class="token operator">=</span>s<span class="token operator">-></span>key <span class="token punctuation">;</span> p<span class="token operator">-></span>otherinfo<span class="token operator">=</span>s<span class="token operator">-></span>otherinfo <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用s替换p</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//第3种情况用方案2处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> q<span class="token operator">=</span>s<span class="token operator">-></span>Lchild <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//若s,即p只有左子树</span><span class="token keyword">else</span> q<span class="token operator">=</span>s<span class="token operator">-></span>Rchild <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第2,3种情况归一处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> T<span class="token operator">=</span>q <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为根结点</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>Lchild<span class="token operator">==</span>s<span class="token punctuation">)</span> f<span class="token operator">-></span>Lchild<span class="token operator">=</span>q <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为左孩子</span><span class="token keyword">else</span> f<span class="token operator">-></span>Rchild<span class="token operator">=</span>q <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p为右孩子</span><span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除p</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时空复杂度分析"><a href="#时空复杂度分析" class="headerlink" title="时空复杂度分析"></a>时空复杂度分析</h2><p>若查找成功，则走了一条从根结点到某结点的路径，若查找失败，则走到一棵空的子树时为止。</p><p>最坏情况下，其平均查找长度不会超过树的高度。</p><p>具有n个结点的二叉树的高度取决于其形态。<br>由关键字序列 1，2，3，4，5构造而得的二叉排序树，ASL =（1+2+3+4+5）/ 5 = 3<br>由关键字序列 3，1，2，5，4构造而得的二叉排序树，ASL =（1+2+3+2+3）/ 5 = 2.2</p><p>最好情况(为满二叉树）<br>n+1<br>ASL=—log2(n+1)-1 = O(log2 n)<br>n<br>最坏情况(为单枝树):<br>ASL=(1+2+…+n)/n=(n+1)/2<br>平均值:<br>ASL≈O(log2 n)</p><h1 id="平衡二叉排序树"><a href="#平衡二叉排序树" class="headerlink" title="平衡二叉排序树"></a>平衡二叉排序树</h1><hr><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p><strong>平衡二叉树</strong>：平衡二叉树，又称AVL树。 它或者是一颗空树，或者是具有以下性质的二叉树：它的左子树和右子树都是平衡树，且左子树和右子树的深度之差的绝对值不超过1.</p><p><strong>平衡因子</strong>:又称BF，定义为该节点的左子树的深度减去它的右子树深度。则平衡二叉树的所有节点的平衡因子只可能是-1、0、1.</p><p><em>只要二叉树上有一个结点的平衡因子BF绝对值大于1，那么二叉树就是不平衡的</em></p><p>如下便是几个二叉树中各结点的平衡因子：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705202047841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="平衡二叉树"></p><p>我们希望由任何初始序列构成的二叉排序树都是AVL树。因为AVL树上任何结点的左右子树的深度之差都不超过1.则可以证明如此的话他的平均查找长度和$$log{n}$$同数量级。</p><p>以下再放一张图对比一下平衡二叉树、二叉排序树、平衡二叉排序树的区别：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705210414803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="三种树区别"></p><h2 id="构造平衡二叉排序树"><a href="#构造平衡二叉排序树" class="headerlink" title="构造平衡二叉排序树"></a>构造平衡二叉排序树</h2><p>基本原理就是按照二叉排序树的思路进行排序构造，遇到某个结点的平衡因子绝对值大于1的情况的时候，就进行一定的操作将二叉树变为平衡的，一步一步按照这样的方法最后构造成功。</p><p>构造过程中调整二叉树的操作可以归纳为以下4种情况：</p><p><em>我们先假设整个二叉树在插入新结点之后所得到的不平衡的最小子树的根节点指针为a，a平衡因子绝对值此时大于1.此时a是离结点最近的平衡因子绝对值大于1的祖先节点</em></p><h3 id="LL型（单向右旋平衡处理）"><a href="#LL型（单向右旋平衡处理）" class="headerlink" title="LL型（单向右旋平衡处理）"></a>LL型（单向右旋平衡处理）</h3><p>此时向a结点的左子树根节点的左子树上插入结点，使得左子树的高度过高，这样一来我们需要将a左子树的根节点替代a的位置，原a左子树根节点的右子树变为a结点的左子树。这样一来就有重新回到平衡相当于向右做了一次顺时针旋转操作。图例如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705213931705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="LL型"></p><h3 id="LR型（双向旋转先右后左）"><a href="#LR型（双向旋转先右后左）" class="headerlink" title="LR型（双向旋转先右后左）"></a>LR型（双向旋转先右后左）</h3><p>此时由于a结点的左子树根节点（这里暂称b)的右子树（假设根节点为c）插入了新节点，使得整体出现了不平衡，我们此时需要用c取代a的位置，然后c的原左子树作为b的右子树，c的现左子树变为b为根的树，c的原右子树变为a的左子树，c的现右子树变为a为根的树。相当于先左旋处理一次然后右旋处理了一次。图解如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705220039996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="LR型"></p><h3 id="RR型（单向左旋平衡处理）"><a href="#RR型（单向左旋平衡处理）" class="headerlink" title="RR型（单向左旋平衡处理）"></a>RR型（单向左旋平衡处理）</h3><p>与LL型比较类似，这次是a结点的右子树的的根节点的右子树上插入了新节点后发生了不平衡的情况。此时解决方法是使用a的右子树根节点移到a的位置，并且将a的原右子树的左子树变为a的右子树。相当于进行了一次向左的逆时针旋转操作。图解如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705214711828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="RR型"></p><h3 id="RL型（双向先左旋后右旋）"><a href="#RL型（双向先左旋后右旋）" class="headerlink" title="RL型（双向先左旋后右旋）"></a>RL型（双向先左旋后右旋）</h3><p>这个和LR型比较类似，实际上这四种类型是两两对称的。这个指的是a的右子树根节点（设为b）的左子树（设其根节点为c）插入了新节点导致了不平衡现象。此时我们需要将c代替a的位置，c的原左子树作为a的现右子树，c的现左子树为a为根节点的树，c的原右子树为b的现左子树，c的现右子树为b为根节点的树。图解同样如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705220908967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="RL型"></p><p>以下举例子说明一下：</p><p>以序列（13，24，37，90，53）为例，首先空树是一个平衡的，然后把13加进去，同样平衡，再将24加进去同样平衡。接下来加进去37，此时就变为RR型，我们需要左旋，由于24没有左子树，所以只需让13为根的树作为24的左子树，不需要往13右孩子加东西。接下来90，保持平衡。直到53，变为RR型，此时37的平衡因子绝对值为-2，左旋后得到最终的平衡二叉排序树。如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705222106842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="平衡二叉排序树最终构造"></p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 查找表 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉排序树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy实现一个简单的机器学习模型</title>
      <link href="/2021/08/01/numpy-shi-xian-yi-ge-jian-dan-de-ji-qi-xue-xi-mo-xing/"/>
      <url>/2021/08/01/numpy-shi-xian-yi-ge-jian-dan-de-ji-qi-xue-xi-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Numpy实现一个简单的机器学习模型"><a href="#Numpy实现一个简单的机器学习模型" class="headerlink" title="Numpy实现一个简单的机器学习模型"></a>Numpy实现一个简单的机器学习模型</h1><p>mes que un codesfarmer 足球、音乐与代码😏</p><h3 id="本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理"><a href="#本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理" class="headerlink" title="本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理."></a>本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理.</h3><h4 id="首先我们应该明确基本步骤："><a href="#首先我们应该明确基本步骤：" class="headerlink" title="首先我们应该明确基本步骤："></a>首先我们应该明确基本步骤：</h4><ol><li>基于函数式y = 3x ^ 2 + 2 得到一些数据，另外加上一些噪音数据到达另一组数据y。</li><li>构建一个机器学习模型来学习表达式y =  wx^2 + b 的两个参数w 、b .利用数组x, y的数据为训练数据。</li><li>采用梯度下降法来通过多次迭代学习到w、b的值。</li></ol><p>@[TOC]</p><h3 id="导入必要库"><a href="#导入必要库" class="headerlink" title="导入必要库"></a>导入必要库</h3><pre><code>import numpy as np%matplotlib inline from matplotlib import pyplot as plt</code></pre><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>%matplotlib inline是一个魔法函数（Magic Functions）。使用%matplotlib命令可以将matplotlib的图表直接嵌入到Notebook之中，或者使用指定的界面库显示图表，它有一个参数指定matplotlib图表的显示方式。 inline表示将图表嵌入到Notebook中。</p><h3 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h3><pre><code>np.random.seed(100)x = np.linspace(-1, 1, 100).reshape(100, 1)y = 3 * np.power(x, 2) + 2 + 0.2 * np.random.rand(x.size).reshape(100, 1)</code></pre><h4 id="代码分析：-1"><a href="#代码分析：-1" class="headerlink" title="代码分析："></a>代码分析：</h4><p>生成输入数据x及目标数据y，np.random.seed(100)时设置随机数种子。reshape函数将矩阵形状改为合适的形状方便操作。而后np.random.rand是为了加一些噪点。</p><h3 id="查看x、y数据分布情况"><a href="#查看x、y数据分布情况" class="headerlink" title="查看x、y数据分布情况"></a>查看x、y数据分布情况</h3><pre><code>plt.scatter(x, y, s=20, c=&#39;red&#39;)plt.show()</code></pre><p>运行结果： <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210531214950572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="函数图片"></p><h3 id="随机初始化参数"><a href="#随机初始化参数" class="headerlink" title="随机初始化参数"></a>随机初始化参数</h3><pre><code>w1 = np.random.rand(1, 1)b1 = np.random.rand(1, 1)</code></pre><h4 id="代码分析：-2"><a href="#代码分析：-2" class="headerlink" title="代码分析："></a>代码分析：</h4><p>随机初始化参数w1、b1，后面会计算梯度逐渐接近最优解。</p><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><pre><code>lr = 0.001  # 学习率for i in range(800):    # 前向传播    y_pred = np.power(x, 2) * w1 + b1    # 定义损失函数    loss = 0.5*(y_pred - y) ** 2    loss = loss.sum()    # 计算梯度    grad_w = np.sum((y_pred - y) * np.power(x, 2))    grad_b = np.sum((y_pred - y))    # 使用梯度下降法，使loss最小    w1 -= lr * grad_w    b1 -= lr * grad_b</code></pre><h4 id="代码分析：-3"><a href="#代码分析：-3" class="headerlink" title="代码分析："></a>代码分析：</h4><p><strong>这是我们代码最核心的一部分了。</strong> 一个简单的前向传播，y_pred是预测值，y是实际值。loss是均方损失函数，这里均方损失函数乘以0.5是为了求导的时候平方项正好消去，方便后续整理，实际上也可以不乘，梯度下降算法最重要的是方向，大小是次要的。sum函数对损失进行求和同时把loss函数变为标量，实际上这里面由于我们直接后续计算梯度直接求出了loss函数的导数，所以这里loss函数实际上没有在代码上没有很大的作用，写出来是为了方便我们去观看🤣😋。而这里我们接下来就是计算的grad_w、grad_b就是来进行梯度的计算，然后更新权重w1和参数b1。</p><h3 id="可视化结果"><a href="#可视化结果" class="headerlink" title="可视化结果"></a>可视化结果</h3><p><em>我们训练结果如何呢？其实际拟合程度如何呢？我们画图来验证一下拟合的效果。</em></p><pre><code>plt.plot(x, y_pred, &quot;r-&quot;, label=&#39;predict&#39;)plt.scatter(x, y, color=&#39;blue&#39;, marker=&#39;o&#39;, label=&#39;true&#39;)    # true dataplt.xlim(-1, 1)plt.ylim(2, 6)plt.legend()plt.show()print(w1, b1)</code></pre><p>训练结果： <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021053123433278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="图像拟合效果"> [[2.98941611]] [[2.09813123]]</p><h4 id="代码分析：-4"><a href="#代码分析：-4" class="headerlink" title="代码分析："></a>代码分析：</h4><p>事实证明，经过800次训练之后，我们训练出的模型的拟合效果还是相当不错的，w是2.9894左右，b是2.0981左右。和我们初始时设定的3、2相差很小。</p><pre><code>BiTree GetSibling(BiTree T, KeyType e){    if (T == NULL)        return NULL;    if (T-&gt;lchild)    {        if (T-&gt;lchild-&gt;data.key == e)            return T-&gt;rchild; //左孩子符合条件就返回右孩子    }    else if (T-&gt;rchild)    {        if (T-&gt;rchild-&gt;data.key == e)            return T-&gt;lchild; //右孩子符合条件就返回左孩子    }    //否则递归查找，如果左子树里有就返回左子树里的，否则返回右子树    return GetSibling(T-&gt;lchild, e) != NULL ? GetSibling(T-&gt;lchild, e) : GetSibling(T-&gt;rchild, e);}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> matplotlib </tag>
            
            <tag> math </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 梯度下降 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上海交大概率论数理统计大作业代码实现解析</title>
      <link href="/2021/08/01/shang-hai-jiao-da-gai-lu-lun-shu-li-tong-ji-da-zuo-ye-dai-ma-shi-xian-jie-xi/"/>
      <url>/2021/08/01/shang-hai-jiao-da-gai-lu-lun-shu-li-tong-ji-da-zuo-ye-dai-ma-shi-xian-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前些日子有上交小姐姐概率论与数理统计课程结课了，有一个大作业要做，题目要求使用matlab或者python画图分析并统计有关数据。上海交大不亏是我们这种民办三本比不了的，真人上人，小姐姐根本就没学过编程大作业就要求开始写代码画图。别看博主现在觉得这门作业挺有意思，如果这是博主的概率论大作业，博主估计就呵呵了。于是——小姐姐就想起了我这个高中为数不多的程序猿同学（😅老工具人了）。华科真人下人，博主概率论才刚开课，也不怎么会用代码画图。但是想起我在小姐姐心目中的伟岸形象🙄。无所畏惧！满口答应下来。</p><p><em>不过这次作业的完成博主还是感触颇丰的，学到了许多道理，不会的东西不要等别人教，正如我们华科的那句被吐槽好多的那句“你能做的，起止如此”，博主感觉很有必要把这个学习过程记下来，于是有了这篇博客。</em></p><hr><p>@<a href="目录">TOC</a></p><h1 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603151333206.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="交大概率作业"></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>初始时就是有两个独立的满足高斯分布的随机变量， 使用bernoulli分布把这两个随机分布组合起来，通俗说就是高斯分布+伯努利分布。</p><h2 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h2><hr><h3 id="参数生成随机数"><a href="#参数生成随机数" class="headerlink" title="参数生成随机数"></a>参数生成随机数</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603152402661.png" alt="生成随机数"></p><h4 id="高斯函数随机数"><a href="#高斯函数随机数" class="headerlink" title="高斯函数随机数"></a>高斯函数随机数</h4><p>博主刚开始写的时候，看到生成随机数，以为需要博主自己实现代码的编写，于是博主自己就开始写高斯分布的代码，写着写着吐槽了一句后，室友提醒是不是有可以现成的函数。于是我查了一下，果然有别人写好的轮子（吐血）。还好还好，及时止损。numpy中的normal函数就是用来生成高斯分布随机数的。<br>高斯分布函数如下:<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603153849217.png" alt="高斯函数"><br>而我们的高斯随机数函数normal参数如下:<br>random.normal(loc=0.0, scale=1.0, size=None)<br>官网解释如下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603154153716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="官网解释normal"><br>参数loc就是我们的“中位数”（mean），就是我们公式里的$\mu$,这个也是我们高斯分布的数学期望。<br>参数scale就是我们的标准差，也就是我们的$sigma$(markdown好像显示不出来这个符号）。<br>参数size就是我们要生成的随机数矩阵的size，比如1000、（3， 4）这种。<br>而函数返回值就是我们生成的随机数矩阵。矩阵类型是numpy的ndarray格式，如果只生成一个随机数就生成一个数。</p><h4 id="Bernoulli函数随机数"><a href="#Bernoulli函数随机数" class="headerlink" title="Bernoulli函数随机数"></a>Bernoulli函数随机数</h4><p>Bernoulli函数生成随机数嘛，博主就自己写函数啦，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bernoulli</span><span class="token punctuation">(</span>possi<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    ans1 <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        ans1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> possi <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ans1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码本身是很简单的，最后生成返回的是一个列表。</p><h4 id="混合高斯分布随机数"><a href="#混合高斯分布随机数" class="headerlink" title="混合高斯分布随机数"></a>混合高斯分布随机数</h4><p>有了前两步的步骤后这个混合高斯分布代码就很简单了，只需要我们调用生成随机数后把几项简单加和一下就可以了。代码如下：</p><pre class="line-numbers language-python"><code class="language-python">pict <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>bernoulli<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数的选取"><a href="#参数的选取" class="headerlink" title="参数的选取"></a>参数的选取</h3><p>这里面要求有$\mu1$ 、$\mu2$、$sigma1$、$siama2$、p这五个参数。我们应该合理的选择范围。为了更加正规的写这一道题，博主这里选择了一下这几组数据：</p><pre class="line-numbers language-python"><code class="language-python">u1 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>u2 <span class="token operator">=</span> u1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span>sigma1 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sigma2 <span class="token operator">=</span> sigma1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里最后应该会生成7$\times$ 7 $\times$ 9 $\times$ 9 $\times$ 6 = 23814组数据，每组数据有1000个随机数。<br>当然，按照题目来说我们完全可以缩小数据集，降低数据规模。当时我给小姐姐时就是提交了50组数据的图片。也顺利的完成了作业。</p><h3 id="生成随机数并画图保存文件"><a href="#生成随机数并画图保存文件" class="headerlink" title="生成随机数并画图保存文件"></a>生成随机数并画图保存文件</h3><p>接下来就是我们写出有关循环实现我们前文提到的生成混合高斯分布随机数和我们的对应图像的生成并保存。<br>代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> sigma1<span class="token punctuation">,</span> sigma2<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(a, b, c, d, e)</span>    pict <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>bernoulli<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax0<span class="token punctuation">,</span> ax1<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二个参数是柱子宽一些还是窄一些，越大越窄越密</span>    ax0<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>pict<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'yellowgreen'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># pdf: 概率分布图，一千个数落在某个区间内的数有多少个</span>    ax0<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Frequency distribution graph'</span><span class="token punctuation">)</span>    ax1<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>pict<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'pink'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">,</span> cumulative<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rwidth<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># cdf: 累计概率函数，cumulative累计。比如需要统计小于5的数的概率</span>    ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Cumulative probability function"</span><span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>subplots_adjust<span class="token punctuation">(</span>hspace<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>r<span class="token string">"E:\results\test{}(u1 = {}, u2 = {}, sigma1 = {}, sigma2 = {}, p = {}).png"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plt.show()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>循环组合我们有关的参数组合，这里用到了itertools中的product函数，用来生成一个笛卡尔积。然后我们可以使用hist函数来画频率分布直方图，这里注意，除了我们通常意义上的频率分布直方图外，博主额外加了一个Cumulative probability function，累计概率统计函数，这个可以更加直观看出我们累计的概率频次。<br>而后图像使用savefig进行保存，这里我们保存到E盘的results文件夹中。接下来我们只需要直接SHIFT + F10运行一下，然后再“稍等片刻”，图像就生成成功了 ！</p><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p>以下就是我们代码的部分运行结果（图太多不完整放了）<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603182119503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="运行结果"></p><h2 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603182538952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="任务二"></p><h3 id="期望方差数学公式推导"><a href="#期望方差数学公式推导" class="headerlink" title="期望方差数学公式推导"></a>期望方差数学公式推导</h3><p>说到这里我就要吐嘈一下这位小姐姐了😭，俺还没学到这里呢。小姐姐至少先把这些推导结果发给我吧，但是博主害羞，不好意思去问（其实博主知道她也不会😅），就自己找了一下概率统计老师，人美心善的概率老师教会了博主怎么推导的公式，并且一眼看出了任务二最终的频率随n的的变化的那个曲线（不愧我科老师🤗）。<br>不继续废话，来点硬核公式推导：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603183748249.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="公式推导"><br>博主字确实有点丑，大家将就着看吧😋。</p><h3 id="关于n"><a href="#关于n" class="headerlink" title="关于n"></a>关于n</h3><p>这里面与任务一不一样的就是我们任务一的五个参数在这里面是是可以自己确定的，这里唯一的变量就是我们每组的随机数的数目，上文已经推导出了我们的期望与方差，这里面就只剩我们的U需要自己来设定计算。任务一的很多代码完全可以重用。</p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><h4 id="输入参数n"><a href="#输入参数n" class="headerlink" title="输入参数n"></a>输入参数n</h4><pre class="line-numbers language-python"><code class="language-python">nn <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>博主觉得一次一次手输n太麻烦了，干脆一次输完，使用我们列表存储需要的n值。</p><h4 id="各项参数"><a href="#各项参数" class="headerlink" title="各项参数"></a>各项参数</h4><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>u1 <span class="token operator">=</span> <span class="token number">5</span>u2 <span class="token operator">=</span> <span class="token number">5</span>sigma1 <span class="token operator">=</span> <span class="token number">3</span>sigma2 <span class="token operator">=</span> <span class="token number">4</span>p <span class="token operator">=</span> <span class="token number">0.5</span>U <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Ez <span class="token operator">=</span> u1 <span class="token operator">+</span> p <span class="token operator">*</span> u2Dz <span class="token operator">=</span> sigma1<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> sigma2<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>u2<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是我们有关于列到的混合高斯分布的有关各项参数。</p><h3 id="生成随机数画图并保存"><a href="#生成随机数画图并保存" class="headerlink" title="生成随机数画图并保存"></a>生成随机数画图并保存</h3><p>实际上这里除了额外加了一个我们的nn数组循环，用来循环运行我们n的值，其他部分和我们的任务一代码部分都一样。<br>代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> n <span class="token keyword">in</span> nn<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pict <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>u1<span class="token punctuation">,</span> sigma1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>u2<span class="token punctuation">,</span> sigma2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                             np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>bernoulli<span class="token punctuation">(</span>p<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">*</span> Dz<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>pict<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> n <span class="token operator">*</span> Ez<span class="token punctuation">)</span>        U <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>U<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax0<span class="token punctuation">,</span> ax1<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二个参数是柱子宽一些还是窄一些，越大越窄越密</span>    ax0<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>U<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'yellowgreen'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># # pdf概率分布图，n个数落在某个区间内的数有多少个</span>    ax0<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Frequency distribution graph for n={}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    ax1<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>U<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'pink'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">,</span> cumulative<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rwidth<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># cdf累计概率函数，cumulative累计。比如需要统计小于5的数的概率</span>    ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Cumulative probability function n={}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>subplots_adjust<span class="token punctuation">(</span>hspace<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>r<span class="token string">"E:\result\homework2 u1 = 5 u2 = 5 sigma1 = 3 sigma2 = 4 p = 0.5\test n={}.png"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plt.show()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>最终运行结果为：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603203747134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="任务二运行结果"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>写这么长的博客累死了QAQ，代码也写有一段时间了，有许多当初的细节都有些遗忘了，写博客过程本身也收获了许多，把之前学到的知识认真整理一下，把学习过程记录下来放到网上和大家分享本身也是一件很有成就感的事情。<br>希望这也能让各位也有所收获，博主码字不易，也欢迎大家一键三连哦😘。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> matplotlib </tag>
            
            <tag> math </tag>
            
            <tag> 概率论与数理统计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
