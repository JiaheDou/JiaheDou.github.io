<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pytorch_tutorial of TorchVision Object Detection Finetuning Tutorial</title>
      <link href="/2021/09/25/pytorch-tutorial-of-torchvision-object-detection-finetuning-tutorial/"/>
      <url>/2021/09/25/pytorch-tutorial-of-torchvision-object-detection-finetuning-tutorial/</url>
      
        <content type="html"><![CDATA[<h3 id="fine-tuning"><a href="#fine-tuning" class="headerlink" title="fine-tuning"></a>fine-tuning</h3><p>fine-tuning是微调的意思，是用别人训练好的模型(即pre-trained model)，加上我们自己的数据，来训练新的模型。fine tune相当于使用别人的模型的前几层，来提取浅层特征，然后在最后再落入我们自己的分类中。</p><p>一般来说我们自己需要做的方向，比如在一些特定的领域的识别分类中，我们很难拿到大量的数据。因为像在ImageNet上毕竟是一个千万级的图像数据库，通常我们可能只能拿到几千张或者几万张某一特定领域的图像，比如识别衣服啊、标志啊、生物种类等等。在这种情况下重新训练一个新的网络是比较复杂的，而且参数不好调整，数据量也不够，因此fine-tuning微调就是一个比较理想的选择。</p><p>如果想网络中某几层参数不变，可以设置对应learning rate为0让这些层的参数不学习</p><p>关于fine-tuning两个比较好的博客：</p><p><a href="http://www.cnblogs.com/louyihang-loves-baiyan/p/5038758.html" target="_blank" rel="noopener">http://www.cnblogs.com/louyihang-loves-baiyan/p/5038758.html</a></p><p><a href="http://www.cnblogs.com/alexcai/p/5469478.html" target="_blank" rel="noopener">http://www.cnblogs.com/alexcai/p/5469478.html</a></p><p>知乎上的一个问题：</p><p><a href="https://www.zhihu.com/question/35754716" target="_blank" rel="noopener">https://www.zhihu.com/question/35754716</a></p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>这篇<a href="https://pytorch.org/tutorials/intermediate/torchvision_tutorial.html" target="_blank" rel="noopener">tutorial</a>就是为了让我们finetuning 一个pre-trained的Mask R-CNN模型。基于<a href="https://www.cis.upenn.edu/~jshi/ped_html/" target="_blank" rel="noopener">数据集行人检测分割</a>. 该数据集包括了179张图片以及345个行人实例，我们会使用它来描绘如何使用torchvision中的新特性来一个自定义数据集上训练我们的检测分割。</p><h2 id="Defining-the-Dataset"><a href="#Defining-the-Dataset" class="headerlink" title="Defining the Dataset"></a>Defining the Dataset</h2><blockquote><p>query 1. n. a question, especially one addressed to an official or organization. *”a spokeswoman said queries could not be answered until Monday”*  2. v. ask a question about something, especially in order to express one’s doubts about it or to check its validity or accuracy. *”many people queried whether any harm had been done”*</p></blockquote><p>该参考的代码块脚本可以用来简单支持我们加入新的自定义数据集来训练目标检测和实力分割、行人关键点检测等。该数据集应该继承自库标准类<code>torch.utils.data.Dataset</code>， 并且使用到方法 <code>__len__</code>, <code>__getitem__</code>.</p><p>唯一需要我们注意的特性就是方法<code>__getitem__</code>需要返回：</p><ul><li>image: a PIL Image of size <code>(H, W)</code></li><li>target: a dict containing the following fields<ul><li><code>boxes (FloatTensor[N, 4])</code>: the coordinates of the <code>N</code> bounding boxes in <code>[x0, y0, x1, y1]</code> format, ranging from <code>0</code> to <code>W</code> and <code>0</code> to <code>H</code></li><li><code>labels (Int64Tensor[N])</code>: the label for each bounding box. <code>0</code> represents always the background class.</li><li><code>image_id (Int64Tensor[1])</code>: an image identifier. It should be unique between all the images in the dataset, and is used during evaluation</li><li><code>area (Tensor[N])</code>: The area of the bounding box. This is used during evaluation with the COCO metric, to separate the metric scores between small, medium and large boxes.</li><li><code>iscrowd (UInt8Tensor[N])</code>: instances with iscrowd=True will be ignored during evaluation.</li><li>(optionally) <code>masks (UInt8Tensor[N, H, W])</code>: The segmentation masks for each one of the objects</li><li>(optionally) <code>keypoints (FloatTensor[N, K, 3])</code>: For each one of the N objects, it contains the K keypoints in <code>[x, y, visibility]</code> format, defining the object. visibility=0 means that the keypoint is not visible. Note that for data augmentation, the notion of flipping a keypoint is dependent on the data representation, and you should probably adapt <code>references/detection/transforms.py</code> for your new keypoint representation</li></ul></li></ul><p>如果我们的model返回以上方法，我们会使该方法适用于训练和评估，也会use the evaluation scripts from <code>pycocotools</code> which can be installed with <code>pip install pycocotools</code>.</p><p>一个需要强调的是我们的<code>labels</code>, 我们的模型会默认0作为我们的背景，如果我们的数据集不包括背景类，那么我们的<code>labels</code>不应该包括0. 例如，我们目前有2类：猫和狗。我们可以设定1为猫，2为狗。所以，举个例子，如果我们一个图片这两类都有，那么我们的 <code>labels</code>的tensor应该就是<code>[1, 2]</code>.</p><p>另外，如果我们想要使用高宽比集合式在训练过程中（用来方便我们每个batch都是相近高宽的图片），那么我们可以选择使用方法<code>get_height_and_width</code> ，可以返回我们图片的高宽。如果我们没有使用这个方法，我们就会通过<code>__getitem__</code>访问数据集的所有元素,这样会在内存中加载图片并且比我们定义一个上面的方法加载要慢很多。</p><h2 id="Writing-a-custom-dataset-for-PennFudan"><a href="#Writing-a-custom-dataset-for-PennFudan" class="headerlink" title="Writing a custom dataset for PennFudan"></a>Writing a custom dataset for PennFudan</h2><p>我们需要为PennFudan来写一个数据类。首先我们要先下载PennFudan数据集  <a href="https://www.cis.upenn.edu/~jshi/ped_html/PennFudanPed.zip" target="_blank" rel="noopener">downloading and extracting the zip file</a>, 当然我们下载文件可以选择使用wget下载网络上的文件： </p><p><code>wget -c https://www.cis.upenn.edu/~jshi/ped_html/PennFudanPed.zip</code></p><p>我们先看看图片文件结构：</p><blockquote><p>PennFudanPed/<br>  PedMasks/<br>    FudanPed00001_mask.png<br>    FudanPed00002_mask.png<br>    FudanPed00003_mask.png<br>    FudanPed00004_mask.png<br>    …<br>  PNGImages/<br>    FudanPed00001.png<br>    FudanPed00002.png<br>    FudanPed00003.png<br>    FudanPed00004.png</p></blockquote><p>这里有相关的一个例子关于一对图片和分割masks:</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pytorch.org/tutorials/_static/img/tv_tutorial/tv_image01.png" alt="one example of a pair of images and segmentation masks"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pytorch.org/tutorials/_static/img/tv_tutorial/tv_image02.png" alt="one example of a pair of images and segmentation masks"></p><p>所以我们每一个图片都有一个对应的分割mask（segementation mask)，每一个不同的color都对应一个不同的实例。我们接下来写一个类<code>torch.utils.data.Dataset</code> class 为该数据集。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">class</span> <span class="token class-name">PennFudanDataset</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> transforms<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> root        self<span class="token punctuation">.</span>transforms <span class="token operator">=</span> transforms        <span class="token comment" spellcheck="true"># load all image files, sorting them to</span>        <span class="token comment" spellcheck="true"># ensure that they are aligned</span>        self<span class="token punctuation">.</span>imgs <span class="token operator">=</span> list<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"PNGImages"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>masks <span class="token operator">=</span> list<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"PedMasks"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># load images and masks</span>        img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"PNGImages"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>imgs<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        mask_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"PedMasks"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>masks<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># note that we haven't converted the mask to RGB,</span>        <span class="token comment" spellcheck="true"># because each color corresponds to a different instance</span>        <span class="token comment" spellcheck="true"># with 0 being background</span>        mask <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>mask_path<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># convert the PIL Image into a numpy array</span>        mask <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>mask<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># instances are encoded as different colors</span>        obj_ids <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>mask<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># first id is the background, so remove it</span>        obj_ids <span class="token operator">=</span> obj_ids<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># split the color-encoded mask into a set</span>        <span class="token comment" spellcheck="true"># of binary masks</span>        masks <span class="token operator">=</span> mask <span class="token operator">==</span> obj_ids<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># get bounding box coordinates for each mask</span>        num_objs <span class="token operator">=</span> len<span class="token punctuation">(</span>obj_ids<span class="token punctuation">)</span>        boxes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_objs<span class="token punctuation">)</span><span class="token punctuation">:</span>            pos <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>masks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            xmin <span class="token operator">=</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            xmax <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            ymin <span class="token operator">=</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            ymax <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            boxes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>xmin<span class="token punctuation">,</span> ymin<span class="token punctuation">,</span> xmax<span class="token punctuation">,</span> ymax<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># convert everything into a torch.Tensor</span>        boxes <span class="token operator">=</span> torch<span class="token punctuation">.</span>as_tensor<span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># there is only one class</span>        labels <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>num_objs<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>        masks <span class="token operator">=</span> torch<span class="token punctuation">.</span>as_tensor<span class="token punctuation">(</span>masks<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        image_id <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        area <span class="token operator">=</span> <span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># suppose all instances are not crowd</span>        iscrowd <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>num_objs<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>        target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        target<span class="token punctuation">[</span><span class="token string">"boxes"</span><span class="token punctuation">]</span> <span class="token operator">=</span> boxes        target<span class="token punctuation">[</span><span class="token string">"labels"</span><span class="token punctuation">]</span> <span class="token operator">=</span> labels        target<span class="token punctuation">[</span><span class="token string">"masks"</span><span class="token punctuation">]</span> <span class="token operator">=</span> masks        target<span class="token punctuation">[</span><span class="token string">"image_id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> image_id        target<span class="token punctuation">[</span><span class="token string">"area"</span><span class="token punctuation">]</span> <span class="token operator">=</span> area        target<span class="token punctuation">[</span><span class="token string">"iscrowd"</span><span class="token punctuation">]</span> <span class="token operator">=</span> iscrowd        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transforms <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            img<span class="token punctuation">,</span> target <span class="token operator">=</span> self<span class="token punctuation">.</span>transforms<span class="token punctuation">(</span>img<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        <span class="token keyword">return</span> img<span class="token punctuation">,</span> target    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>imgs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以详细看一看我们这个类都定义了什么，细细展开看一看：</p><h3 id="init"><a href="#init" class="headerlink" title="__init__"></a><code>__init__</code></h3><p>首先是我们的<code>__init__</code>类：</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> transforms<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> root        self<span class="token punctuation">.</span>transforms <span class="token operator">=</span> transforms        <span class="token comment" spellcheck="true"># load all image files, sorting them to</span>        <span class="token comment" spellcheck="true"># ensure that they are aligned</span>        self<span class="token punctuation">.</span>imgs <span class="token operator">=</span> list<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"PNGImages"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>masks <span class="token operator">=</span> list<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"PedMasks"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先root是我们的路径，然后是一个图片的预处理transforms。接着我们只是将我们路径的文件图片和mask都分别放到了一个列表中，这个是为了将我们的两者一一对应（aligned).注意<code>__init__</code>里面不可以加载图片，这里面只能进行一些相应的路径操作，如果加载图片了会运行的非常缓慢。</p><h3 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__"></a><code>__getitem__</code></h3><p>首先加载我们的图片与mask<strong>按照我们的索引，每次只加载一张</strong>。需要注意的是我们将我们的图片变为RGB了，但是我们的mask并没有变成RGB。因为每一种颜色对应一个不同的实例，0是我们的背景。</p><pre class="line-numbers language-python"><code class="language-python">        <span class="token comment" spellcheck="true"># load images and masks</span>        img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"PNGImages"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>imgs<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        mask_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"PedMasks"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>masks<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># note that we haven't converted the mask to RGB,</span>        <span class="token comment" spellcheck="true"># because each color corresponds to a different instance</span>        <span class="token comment" spellcheck="true"># with 0 being background</span>        mask <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>mask_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我们选择将mask的PIL Image形式转化为numpy的array形式：</p><pre class="line-numbers language-python"><code class="language-python">        <span class="token comment" spellcheck="true"># convert the PIL Image into a numpy array</span>        mask <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着不同种类的实例按照不同的颜色进行编码encode:</p><pre class="line-numbers language-python"><code class="language-python">        <span class="token comment" spellcheck="true"># instances are encoded as different colors</span>        obj_ids <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于第一个id是我们的背景0，所以我们选择去除掉它：</p><pre class="line-numbers language-python"><code class="language-python">        <span class="token comment" spellcheck="true"># first id is the background, so remove it</span>        obj_ids <span class="token operator">=</span> obj_ids<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着我们选择每一个实例都标注出来（True为标记出来的实例），所以我们用我们的<code>mask</code>和<code>obj[:, None, None]</code>进行一个等于等于操作。假设说我们原本的图片mask标记shape是<code>[536,559]</code>, 那么我们里面有2个实例，那么我们的obj_ids的shape是<code>[2]</code>, 那么我们的obj_ids的shape就是<code>[2, 1, 1]</code>,接着我们来对这两者进行一个<code>==</code>操作得到的实际上就是True和False的矩阵。并且来看我们的最终得到的矩阵shape为<code>[2, 536, 559]</code>, 可以看到我们最终的目的就是得到每一个实例,在原来图片的像素标记。</p><pre class="line-numbers language-python"><code class="language-python">        <span class="token comment" spellcheck="true"># split the color-encoded mask into a set</span>        <span class="token comment" spellcheck="true"># of binary masks</span>        masks <span class="token operator">=</span> mask <span class="token operator">==</span> obj_ids<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来我们根据不同的实例来得到不同的位置的bbox：</p><p>首先是实例的一个循环，所有实例进行一个循环，boxes是所有物体坐标的集合。</p><pre class="line-numbers language-python"><code class="language-python">        <span class="token comment" spellcheck="true"># get bounding box coordinates for each mask</span>        num_objs <span class="token operator">=</span> len<span class="token punctuation">(</span>obj_ids<span class="token punctuation">)</span>        boxes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_objs<span class="token punctuation">)</span><span class="token punctuation">:</span>            pos <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>masks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            xmin <span class="token operator">=</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            xmax <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            ymin <span class="token operator">=</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            ymax <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            boxes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>xmin<span class="token punctuation">,</span> ymin<span class="token punctuation">,</span> xmax<span class="token punctuation">,</span> ymax<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pos = np.where(masks[i])</code>是为了得到我们第i个实例的位置，以下演示可以看到，我们得到了高的一个array和宽的一个array。</p><p><a href="https://imgtu.com/i/4y7XGD" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/26/4y7XGD.md.png" alt="test by lry"></a></p><p>随后的坐标得到比较简单，就是非常简单的寻找左上角和右下角。但是这一点很容易出错，因为x轴与y轴、包括原点位置请注意好。</p><p>接着我们需要将我们这些操作得到的array转化为Tensor:</p><pre class="line-numbers language-python"><code class="language-python">        <span class="token comment" spellcheck="true"># convert everything into a torch.Tensor</span>        boxes <span class="token operator">=</span> torch<span class="token punctuation">.</span>as_tensor<span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># there is only one class</span>        labels <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>num_objs<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>        masks <span class="token operator">=</span> torch<span class="token punctuation">.</span>as_tensor<span class="token punctuation">(</span>masks<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存一下图片的id， 所得种类的面积， 假设所有的实例都是不挤的。</p><pre class="line-numbers language-python"><code class="language-python">        image_id <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        area <span class="token operator">=</span> <span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># suppose all instances are not crowd</span>        iscrowd <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>num_objs<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>存在字典里面：</p><pre class="line-numbers language-python"><code class="language-python">        target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        target<span class="token punctuation">[</span><span class="token string">"boxes"</span><span class="token punctuation">]</span> <span class="token operator">=</span> boxes        target<span class="token punctuation">[</span><span class="token string">"labels"</span><span class="token punctuation">]</span> <span class="token operator">=</span> labels        target<span class="token punctuation">[</span><span class="token string">"masks"</span><span class="token punctuation">]</span> <span class="token operator">=</span> masks        target<span class="token punctuation">[</span><span class="token string">"image_id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> image_id        target<span class="token punctuation">[</span><span class="token string">"area"</span><span class="token punctuation">]</span> <span class="token operator">=</span> area        target<span class="token punctuation">[</span><span class="token string">"iscrowd"</span><span class="token punctuation">]</span> <span class="token operator">=</span> iscrowd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面的transform是来转换的：</p><pre class="line-numbers language-python"><code class="language-python">        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transforms <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            img<span class="token punctuation">,</span> target <span class="token operator">=</span> self<span class="token punctuation">.</span>transforms<span class="token punctuation">(</span>img<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后返回：</p><pre class="line-numbers language-python"><code class="language-python">        <span class="token keyword">return</span> img<span class="token punctuation">,</span> target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="len"><a href="#len" class="headerlink" title="__len__"></a><code>__len__</code></h3><p>就是返回我们的所有的图片的个数。</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>imgs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Defining-your-model"><a href="#Defining-your-model" class="headerlink" title="Defining your model"></a>Defining your model</h2><p>在这个文档（tutorial）中,我们将会使用<code>Mask RCNN</code>, 这个是建立在我们的<code>Faster RCNN</code>之上。<code>Faster RCNN</code>l是一个既预测我们的bbox又预测我们的每一类的得分的一个model。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pytorch.org/tutorials/_static/img/tv_tutorial/tv_image03.png" alt="Faster RCNN"></p><p><code>Mask RCNN</code>加了一个额外的分支到<code>Faster RCNN</code>中上去。该分支也预测我们的分割的mask了对于每一个实例。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pytorch.org/tutorials/_static/img/tv_tutorial/tv_image04.png" alt="Mask RCNN"></p><p>当我们想要从torch vision库中来选取一个model来进行微调修饰调整的时候，一般会有两种常见的情况：第一种就是我们想要从一个预训练好的模型开始，仅仅flinetune最后一层。另一种就是我们想要用一个不同的backbone来取代我们的原来模型的backbone（例如为了更高的精度等）。</p><h3 id="1-Finetuning-from-a-pretained-model"><a href="#1-Finetuning-from-a-pretained-model" class="headerlink" title="1-Finetuning from a pretained model"></a>1-Finetuning from a pretained model</h3><p>我们先看如果我们了从一个在COCO数据集上预训练好的model。然后我们想要对我们的类别进行finetuning，以下代码就是一个可能我们可以参考的方式：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>detection<span class="token punctuation">.</span>faster_rcnn <span class="token keyword">import</span> FastRCNNPredictor<span class="token comment" spellcheck="true"># load a model pre-trained pre-trained on COCO</span>model <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>detection<span class="token punctuation">.</span>fasterrcnn_resnet50_fpn<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># replace the classifier with a new one, that has</span><span class="token comment" spellcheck="true"># num_classes which is user-defined</span>num_classes <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># 1 class (person) + background</span><span class="token comment" spellcheck="true"># get number of input features for the classifier</span>in_features <span class="token operator">=</span> model<span class="token punctuation">.</span>roi_heads<span class="token punctuation">.</span>box_predictor<span class="token punctuation">.</span>cls_score<span class="token punctuation">.</span>in_features<span class="token comment" spellcheck="true"># replace the pre-trained head with a new one</span>model<span class="token punctuation">.</span>roi_heads<span class="token punctuation">.</span>box_predictor <span class="token operator">=</span> FastRCNNPredictor<span class="token punctuation">(</span>in_features<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里实际上发现了一个盲点！FPN竟然也在这里出现了！这个是目标检测必须要有的，没有的话能做个毛线，这里有论文地址，不知道的话自己去搜，反正这个东西是非常重要的，关注一下看，虽然说目前该环境之下不了解这个东西没什么大碍。</p><blockquote><p>FPN论文地址：论文：<a href="https://arxiv.org/pdf/1612.03144.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1612.03144.pdf</a></p></blockquote><p>首先我们找到了我们的模型，从torch vision库中找到了我们的一个预训练模型。接着我们定义类为2，实际上我们目标就是检测出人就OK了。人+背景就是两类。随后我们实际上就是为我进门的分类器得到了<code>in_features</code>.了随后我们使用一个新的<code>pre-trained head</code>来代替之前的。</p><h3 id="2-Modifying-the-model-to-add-a-different-backbone"><a href="#2-Modifying-the-model-to-add-a-different-backbone" class="headerlink" title="2-Modifying the model  to add a different backbone"></a>2-Modifying the model  to add a different backbone</h3><p>代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>detection <span class="token keyword">import</span> FasterRCNN<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>detection<span class="token punctuation">.</span>rpn <span class="token keyword">import</span> AnchorGenerator<span class="token comment" spellcheck="true"># load a pre-trained model for classification and return</span><span class="token comment" spellcheck="true"># only the features</span>backbone <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>mobilenet_v2<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>features<span class="token comment" spellcheck="true"># FasterRCNN needs to know the number of</span><span class="token comment" spellcheck="true"># output channels in a backbone. For mobilenet_v2, it's 1280</span><span class="token comment" spellcheck="true"># so we need to add it here</span>backbone<span class="token punctuation">.</span>out_channels <span class="token operator">=</span> <span class="token number">1280</span><span class="token comment" spellcheck="true"># let's make the RPN generate 5 x 3 anchors per spatial</span><span class="token comment" spellcheck="true"># location, with 5 different sizes and 3 different aspect</span><span class="token comment" spellcheck="true"># ratios. We have a Tuple[Tuple[int]] because each feature</span><span class="token comment" spellcheck="true"># map could potentially have different sizes and</span><span class="token comment" spellcheck="true"># aspect ratios</span>anchor_generator <span class="token operator">=</span> AnchorGenerator<span class="token punctuation">(</span>sizes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   aspect_ratios<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># let's define what are the feature maps that we will</span><span class="token comment" spellcheck="true"># use to perform the region of interest cropping, as well as</span><span class="token comment" spellcheck="true"># the size of the crop after rescaling.</span><span class="token comment" spellcheck="true"># if your backbone returns a Tensor, featmap_names is expected to</span><span class="token comment" spellcheck="true"># be [0]. More generally, the backbone should return an</span><span class="token comment" spellcheck="true"># OrderedDict[Tensor], and in featmap_names you can choose which</span><span class="token comment" spellcheck="true"># feature maps to use.</span>roi_pooler <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>ops<span class="token punctuation">.</span>MultiScaleRoIAlign<span class="token punctuation">(</span>featmap_names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                output_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>                                                sampling_ratio<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># put the pieces together inside a FasterRCNN model</span>model <span class="token operator">=</span> FasterRCNN<span class="token punctuation">(</span>backbone<span class="token punctuation">,</span>                   num_classes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                   rpn_anchor_generator<span class="token operator">=</span>anchor_generator<span class="token punctuation">,</span>                   box_roi_pool<span class="token operator">=</span>roi_pooler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>首先我们导入函数库</p></li><li><p>接着我们选择加载一个预训练模型关于我们的分类问题的模型</p></li><li><p>因为我们需要知道backbone的<code>output_channels</code>， 对于mobilenet_v2来说，这个是1280,所以我们需要加上这个参数、</p></li><li><p>然后我们进行RPN相关部分。每个空间都生成5×3个anchors，指5个不同的大小然后3种不同的高宽比。我们有一个元组因为每个feature map可都可能产生不同大小和高宽比。</p></li><li></li><li><p>最后我们只需把这些东西都加到一个<code>Faster RCNN</code>中就行了。</p></li></ul><h2 id="A-Instance-segmentation-model-for-PennFudan-Dataset"><a href="#A-Instance-segmentation-model-for-PennFudan-Dataset" class="headerlink" title="A Instance segmentation model for PennFudan Dataset"></a>A Instance segmentation model for PennFudan Dataset</h2><p>在我们目前的情况下，也就是我们的数据集非常小，我们想要去fine-tune一个预训练的模型，所以我们将会选择以上的方法一。</p><p>接着我们想要计算实例的segmentation masks，所以我们将会使用 <code>Mask R-CNN</code>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>detection<span class="token punctuation">.</span>faster_rcnn <span class="token keyword">import</span> FastRCNNPredictor<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>detection<span class="token punctuation">.</span>mask_rcnn <span class="token keyword">import</span> MaskRCNNPredictor<span class="token keyword">def</span> <span class="token function">get_model_instance_segmentation</span><span class="token punctuation">(</span>num_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># load an instance segmentation model pre-trained pre-trained on COCO</span>    model <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>detection<span class="token punctuation">.</span>maskrcnn_resnet50_fpn<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get number of input features for the classifier</span>    in_features <span class="token operator">=</span> model<span class="token punctuation">.</span>roi_heads<span class="token punctuation">.</span>box_predictor<span class="token punctuation">.</span>cls_score<span class="token punctuation">.</span>in_features    <span class="token comment" spellcheck="true"># replace the pre-trained head with a new one</span>    model<span class="token punctuation">.</span>roi_heads<span class="token punctuation">.</span>box_predictor <span class="token operator">=</span> FastRCNNPredictor<span class="token punctuation">(</span>in_features<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># now get the number of input features for the mask classifier</span>    in_features_mask <span class="token operator">=</span> model<span class="token punctuation">.</span>roi_heads<span class="token punctuation">.</span>mask_predictor<span class="token punctuation">.</span>conv5_mask<span class="token punctuation">.</span>in_channels    hidden_layer <span class="token operator">=</span> <span class="token number">256</span>    <span class="token comment" spellcheck="true"># and replace the mask predictor with a new one</span>    model<span class="token punctuation">.</span>roi_heads<span class="token punctuation">.</span>mask_predictor <span class="token operator">=</span> MaskRCNNPredictor<span class="token punctuation">(</span>in_features_mask<span class="token punctuation">,</span>                                                       hidden_layer<span class="token punctuation">,</span>                                                       num_classes<span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此我们基本的任务模型架构就定义清楚了。接下来我们将会让模型被训练然后在我们的自定义数据集上进行评估。</p><h2 id="Putting-everything-together"><a href="#Putting-everything-together" class="headerlink" title="Putting everything together"></a>Putting everything together</h2><p>这里实际上就是讲了下作者在这里面定义了许许多多的自己写的函数以方便我们进一步的训练和评估。如果我们要下载这些东西，我们可以选择到GitHub的vision仓库里面的<code>references/detection</code>中进行相关的下载。</p><p>这些是我们的帮助函数方便我们进行相关的数据增强：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> transforms <span class="token keyword">as</span> T<span class="token keyword">def</span> <span class="token function">get_transform</span><span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token punctuation">:</span>    transforms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    transforms<span class="token punctuation">.</span>append<span class="token punctuation">(</span>T<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> train<span class="token punctuation">:</span>        transforms<span class="token punctuation">.</span>append<span class="token punctuation">(</span>T<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> T<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>transforms<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Testing-forward-method-Optional"><a href="#Testing-forward-method-Optional" class="headerlink" title="Testing  forward() method (Optional)"></a>Testing  <code>forward()</code> method (Optional)</h2><p>在我们的dataset上迭代之前，一个比较好的习惯就是我们看看model在训练sample datga过程和进一步inference的时间.</p><pre class="line-numbers language-python"><code class="language-python">model <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>detection<span class="token punctuation">.</span>fasterrcnn_resnet50_fpn<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>dataset <span class="token operator">=</span> PennFudanDataset<span class="token punctuation">(</span><span class="token string">'PennFudanPed'</span><span class="token punctuation">,</span> get_transform<span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span> dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>utils<span class="token punctuation">.</span>collate_fn<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># For Training</span>images<span class="token punctuation">,</span>targets <span class="token operator">=</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>data_loader<span class="token punctuation">)</span><span class="token punctuation">)</span>images <span class="token operator">=</span> list<span class="token punctuation">(</span>image <span class="token keyword">for</span> image <span class="token keyword">in</span> images<span class="token punctuation">)</span>targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> t<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> targets<span class="token punctuation">]</span>output <span class="token operator">=</span> model<span class="token punctuation">(</span>images<span class="token punctuation">,</span>targets<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Returns losses and detections</span><span class="token comment" spellcheck="true"># For inference</span>model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span>torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">]</span>predictions <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># Returns predictions</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我们写一下我们训练和validation的主函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> engine <span class="token keyword">import</span> train_one_epoch<span class="token punctuation">,</span> evaluate<span class="token keyword">import</span> utils<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># train on the GPU or on the CPU, if a GPU is not available</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cpu'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># our dataset has two classes only - background and person</span>    num_classes <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true"># use our dataset and defined transformations</span>    dataset <span class="token operator">=</span> PennFudanDataset<span class="token punctuation">(</span><span class="token string">'PennFudanPed'</span><span class="token punctuation">,</span> get_transform<span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dataset_test <span class="token operator">=</span> PennFudanDataset<span class="token punctuation">(</span><span class="token string">'PennFudanPed'</span><span class="token punctuation">,</span> get_transform<span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># split the dataset in train and test set</span>    indices <span class="token operator">=</span> torch<span class="token punctuation">.</span>randperm<span class="token punctuation">(</span>len<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    dataset <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Subset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> indices<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dataset_test <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Subset<span class="token punctuation">(</span>dataset_test<span class="token punctuation">,</span> indices<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define training and validation data loaders</span>    data_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>        dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>        collate_fn<span class="token operator">=</span>utils<span class="token punctuation">.</span>collate_fn<span class="token punctuation">)</span>    data_loader_test <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>        dataset_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>        collate_fn<span class="token operator">=</span>utils<span class="token punctuation">.</span>collate_fn<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get the model using our helper function</span>    model <span class="token operator">=</span> get_model_instance_segmentation<span class="token punctuation">(</span>num_classes<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># move model to the right device</span>    model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># construct an optimizer</span>    params <span class="token operator">=</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> p<span class="token punctuation">.</span>requires_grad<span class="token punctuation">]</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>params<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.005</span><span class="token punctuation">,</span>                                momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">0.0005</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># and a learning rate scheduler</span>    lr_scheduler <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler<span class="token punctuation">.</span>StepLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>                                                   step_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>                                                   gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># let's train it for 10 epochs</span>    num_epochs <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># train for one epoch, printing every 10 iterations</span>        train_one_epoch<span class="token punctuation">(</span>model<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> data_loader<span class="token punctuation">,</span> device<span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> print_freq<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># update the learning rate</span>        lr_scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># evaluate on the test dataset</span>        evaluate<span class="token punctuation">(</span>model<span class="token punctuation">,</span> data_loader_test<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"That's it!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是训练了10个epoch，而我们如果运行了第一个epoch，就能看到类似以下的结果：</p><pre class="line-numbers language-python"><code class="language-python">Epoch<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">]</span>  eta<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">01</span><span class="token punctuation">:</span><span class="token number">18</span>  lr<span class="token punctuation">:</span> <span class="token number">0.000090</span>  loss<span class="token punctuation">:</span> <span class="token number">2.5213</span> <span class="token punctuation">(</span><span class="token number">2.5213</span><span class="token punctuation">)</span>  loss_classifier<span class="token punctuation">:</span> <span class="token number">0.8025</span> <span class="token punctuation">(</span><span class="token number">0.8025</span><span class="token punctuation">)</span>  loss_box_reg<span class="token punctuation">:</span> <span class="token number">0.2634</span> <span class="token punctuation">(</span><span class="token number">0.2634</span><span class="token punctuation">)</span>  loss_mask<span class="token punctuation">:</span> <span class="token number">1.4265</span> <span class="token punctuation">(</span><span class="token number">1.4265</span><span class="token punctuation">)</span>  loss_objectness<span class="token punctuation">:</span> <span class="token number">0.0190</span> <span class="token punctuation">(</span><span class="token number">0.0190</span><span class="token punctuation">)</span>  loss_rpn_box_reg<span class="token punctuation">:</span> <span class="token number">0.0099</span> <span class="token punctuation">(</span><span class="token number">0.0099</span><span class="token punctuation">)</span>  time<span class="token punctuation">:</span> <span class="token number">1.3121</span>  data<span class="token punctuation">:</span> <span class="token number">0.3024</span>  max mem<span class="token punctuation">:</span> <span class="token number">3485</span>Epoch<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">]</span>  eta<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">20</span>  lr<span class="token punctuation">:</span> <span class="token number">0.000936</span>  loss<span class="token punctuation">:</span> <span class="token number">1.3007</span> <span class="token punctuation">(</span><span class="token number">1.5313</span><span class="token punctuation">)</span>  loss_classifier<span class="token punctuation">:</span> <span class="token number">0.3979</span> <span class="token punctuation">(</span><span class="token number">0.4719</span><span class="token punctuation">)</span>  loss_box_reg<span class="token punctuation">:</span> <span class="token number">0.2454</span> <span class="token punctuation">(</span><span class="token number">0.2272</span><span class="token punctuation">)</span>  loss_mask<span class="token punctuation">:</span> <span class="token number">0.6089</span> <span class="token punctuation">(</span><span class="token number">0.7953</span><span class="token punctuation">)</span>  loss_objectness<span class="token punctuation">:</span> <span class="token number">0.0197</span> <span class="token punctuation">(</span><span class="token number">0.0228</span><span class="token punctuation">)</span>  loss_rpn_box_reg<span class="token punctuation">:</span> <span class="token number">0.0121</span> <span class="token punctuation">(</span><span class="token number">0.0141</span><span class="token punctuation">)</span>  time<span class="token punctuation">:</span> <span class="token number">0.4198</span>  data<span class="token punctuation">:</span> <span class="token number">0.0298</span>  max mem<span class="token punctuation">:</span> <span class="token number">5081</span>Epoch<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">]</span>  eta<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">15</span>  lr<span class="token punctuation">:</span> <span class="token number">0.001783</span>  loss<span class="token punctuation">:</span> <span class="token number">0.7567</span> <span class="token punctuation">(</span><span class="token number">1.1056</span><span class="token punctuation">)</span>  loss_classifier<span class="token punctuation">:</span> <span class="token number">0.2221</span> <span class="token punctuation">(</span><span class="token number">0.3319</span><span class="token punctuation">)</span>  loss_box_reg<span class="token punctuation">:</span> <span class="token number">0.2002</span> <span class="token punctuation">(</span><span class="token number">0.2106</span><span class="token punctuation">)</span>  loss_mask<span class="token punctuation">:</span> <span class="token number">0.2904</span> <span class="token punctuation">(</span><span class="token number">0.5332</span><span class="token punctuation">)</span>  loss_objectness<span class="token punctuation">:</span> <span class="token number">0.0146</span> <span class="token punctuation">(</span><span class="token number">0.0176</span><span class="token punctuation">)</span>  loss_rpn_box_reg<span class="token punctuation">:</span> <span class="token number">0.0094</span> <span class="token punctuation">(</span><span class="token number">0.0123</span><span class="token punctuation">)</span>  time<span class="token punctuation">:</span> <span class="token number">0.3293</span>  data<span class="token punctuation">:</span> <span class="token number">0.0035</span>  max mem<span class="token punctuation">:</span> <span class="token number">5081</span>Epoch<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token number">30</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">]</span>  eta<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">11</span>  lr<span class="token punctuation">:</span> <span class="token number">0.002629</span>  loss<span class="token punctuation">:</span> <span class="token number">0.4705</span> <span class="token punctuation">(</span><span class="token number">0.8935</span><span class="token punctuation">)</span>  loss_classifier<span class="token punctuation">:</span> <span class="token number">0.0991</span> <span class="token punctuation">(</span><span class="token number">0.2517</span><span class="token punctuation">)</span>  loss_box_reg<span class="token punctuation">:</span> <span class="token number">0.1578</span> <span class="token punctuation">(</span><span class="token number">0.1957</span><span class="token punctuation">)</span>  loss_mask<span class="token punctuation">:</span> <span class="token number">0.1970</span> <span class="token punctuation">(</span><span class="token number">0.4204</span><span class="token punctuation">)</span>  loss_objectness<span class="token punctuation">:</span> <span class="token number">0.0061</span> <span class="token punctuation">(</span><span class="token number">0.0140</span><span class="token punctuation">)</span>  loss_rpn_box_reg<span class="token punctuation">:</span> <span class="token number">0.0075</span> <span class="token punctuation">(</span><span class="token number">0.0118</span><span class="token punctuation">)</span>  time<span class="token punctuation">:</span> <span class="token number">0.3403</span>  data<span class="token punctuation">:</span> <span class="token number">0.0044</span>  max mem<span class="token punctuation">:</span> <span class="token number">5081</span>Epoch<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token number">40</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">]</span>  eta<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">07</span>  lr<span class="token punctuation">:</span> <span class="token number">0.003476</span>  loss<span class="token punctuation">:</span> <span class="token number">0.3901</span> <span class="token punctuation">(</span><span class="token number">0.7568</span><span class="token punctuation">)</span>  loss_classifier<span class="token punctuation">:</span> <span class="token number">0.0648</span> <span class="token punctuation">(</span><span class="token number">0.2022</span><span class="token punctuation">)</span>  loss_box_reg<span class="token punctuation">:</span> <span class="token number">0.1207</span> <span class="token punctuation">(</span><span class="token number">0.1736</span><span class="token punctuation">)</span>  loss_mask<span class="token punctuation">:</span> <span class="token number">0.1705</span> <span class="token punctuation">(</span><span class="token number">0.3585</span><span class="token punctuation">)</span>  loss_objectness<span class="token punctuation">:</span> <span class="token number">0.0018</span> <span class="token punctuation">(</span><span class="token number">0.0113</span><span class="token punctuation">)</span>  loss_rpn_box_reg<span class="token punctuation">:</span> <span class="token number">0.0075</span> <span class="token punctuation">(</span><span class="token number">0.0112</span><span class="token punctuation">)</span>  time<span class="token punctuation">:</span> <span class="token number">0.3407</span>  data<span class="token punctuation">:</span> <span class="token number">0.0044</span>  max mem<span class="token punctuation">:</span> <span class="token number">5081</span>Epoch<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token number">50</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">]</span>  eta<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">03</span>  lr<span class="token punctuation">:</span> <span class="token number">0.004323</span>  loss<span class="token punctuation">:</span> <span class="token number">0.3237</span> <span class="token punctuation">(</span><span class="token number">0.6703</span><span class="token punctuation">)</span>  loss_classifier<span class="token punctuation">:</span> <span class="token number">0.0474</span> <span class="token punctuation">(</span><span class="token number">0.1731</span><span class="token punctuation">)</span>  loss_box_reg<span class="token punctuation">:</span> <span class="token number">0.1109</span> <span class="token punctuation">(</span><span class="token number">0.1561</span><span class="token punctuation">)</span>  loss_mask<span class="token punctuation">:</span> <span class="token number">0.1658</span> <span class="token punctuation">(</span><span class="token number">0.3201</span><span class="token punctuation">)</span>  loss_objectness<span class="token punctuation">:</span> <span class="token number">0.0015</span> <span class="token punctuation">(</span><span class="token number">0.0093</span><span class="token punctuation">)</span>  loss_rpn_box_reg<span class="token punctuation">:</span> <span class="token number">0.0093</span> <span class="token punctuation">(</span><span class="token number">0.0116</span><span class="token punctuation">)</span>  time<span class="token punctuation">:</span> <span class="token number">0.3379</span>  data<span class="token punctuation">:</span> <span class="token number">0.0043</span>  max mem<span class="token punctuation">:</span> <span class="token number">5081</span>Epoch<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token number">59</span><span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">]</span>  eta<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>  lr<span class="token punctuation">:</span> <span class="token number">0.005000</span>  loss<span class="token punctuation">:</span> <span class="token number">0.2540</span> <span class="token punctuation">(</span><span class="token number">0.6082</span><span class="token punctuation">)</span>  loss_classifier<span class="token punctuation">:</span> <span class="token number">0.0309</span> <span class="token punctuation">(</span><span class="token number">0.1526</span><span class="token punctuation">)</span>  loss_box_reg<span class="token punctuation">:</span> <span class="token number">0.0463</span> <span class="token punctuation">(</span><span class="token number">0.1405</span><span class="token punctuation">)</span>  loss_mask<span class="token punctuation">:</span> <span class="token number">0.1568</span> <span class="token punctuation">(</span><span class="token number">0.2945</span><span class="token punctuation">)</span>  loss_objectness<span class="token punctuation">:</span> <span class="token number">0.0012</span> <span class="token punctuation">(</span><span class="token number">0.0083</span><span class="token punctuation">)</span>  loss_rpn_box_reg<span class="token punctuation">:</span> <span class="token number">0.0093</span> <span class="token punctuation">(</span><span class="token number">0.0123</span><span class="token punctuation">)</span>  time<span class="token punctuation">:</span> <span class="token number">0.3489</span>  data<span class="token punctuation">:</span> <span class="token number">0.0042</span>  max mem<span class="token punctuation">:</span> <span class="token number">5081</span>Epoch<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> Total time<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">21</span> <span class="token punctuation">(</span><span class="token number">0.3570</span> s <span class="token operator">/</span> it<span class="token punctuation">)</span>creating index<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>index created!Test<span class="token punctuation">:</span>  <span class="token punctuation">[</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">]</span>  eta<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">19</span>  model_time<span class="token punctuation">:</span> <span class="token number">0.2152</span> <span class="token punctuation">(</span><span class="token number">0.2152</span><span class="token punctuation">)</span>  evaluator_time<span class="token punctuation">:</span> <span class="token number">0.0133</span> <span class="token punctuation">(</span><span class="token number">0.0133</span><span class="token punctuation">)</span>  time<span class="token punctuation">:</span> <span class="token number">0.4000</span>  data<span class="token punctuation">:</span> <span class="token number">0.1701</span>  max mem<span class="token punctuation">:</span> <span class="token number">5081</span>Test<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">49</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">]</span>  eta<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>  model_time<span class="token punctuation">:</span> <span class="token number">0.0628</span> <span class="token punctuation">(</span><span class="token number">0.0687</span><span class="token punctuation">)</span>  evaluator_time<span class="token punctuation">:</span> <span class="token number">0.0039</span> <span class="token punctuation">(</span><span class="token number">0.0064</span><span class="token punctuation">)</span>  time<span class="token punctuation">:</span> <span class="token number">0.0735</span>  data<span class="token punctuation">:</span> <span class="token number">0.0022</span>  max mem<span class="token punctuation">:</span> <span class="token number">5081</span>Test<span class="token punctuation">:</span> Total time<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">04</span> <span class="token punctuation">(</span><span class="token number">0.0828</span> s <span class="token operator">/</span> it<span class="token punctuation">)</span>Averaged stats<span class="token punctuation">:</span> model_time<span class="token punctuation">:</span> <span class="token number">0.0628</span> <span class="token punctuation">(</span><span class="token number">0.0687</span><span class="token punctuation">)</span>  evaluator_time<span class="token punctuation">:</span> <span class="token number">0.0039</span> <span class="token punctuation">(</span><span class="token number">0.0064</span><span class="token punctuation">)</span>Accumulating evaluation results<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>DONE <span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0.</span>01s<span class="token punctuation">)</span><span class="token punctuation">.</span>Accumulating evaluation results<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>DONE <span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0.</span>01s<span class="token punctuation">)</span><span class="token punctuation">.</span>IoU metric<span class="token punctuation">:</span> bbox Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.606</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span>      <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.984</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.75</span>      <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.780</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> small <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.313</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>medium <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.582</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> large <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.612</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.270</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.672</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.672</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> small <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.650</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>medium <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.755</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> large <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.664</span>IoU metric<span class="token punctuation">:</span> segm Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.704</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span>      <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.979</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.75</span>      <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.871</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> small <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.325</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>medium <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.488</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> large <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.727</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.316</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.748</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.749</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> small <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.650</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>medium <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.673</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> large <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.758</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从第一个epoch的训练这里面可以看出，我们*”obtain a COCO-style mAP of 60.6, and a mask mAP of 70.4.”*</p><p>在训练10个epoch之后，我们可以得到以下指标（metrics）:</p><pre class="line-numbers language-python"><code class="language-python">IoU metric<span class="token punctuation">:</span> bbox Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.799</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span>      <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.969</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.75</span>      <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.935</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> small <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.349</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>medium <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.592</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> large <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.831</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.324</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.844</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.844</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> small <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.400</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>medium <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.777</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> large <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.870</span>IoU metric<span class="token punctuation">:</span> segm Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.761</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span>      <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.969</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.75</span>      <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.919</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> small <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.341</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>medium <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.464</span> Average Precision  <span class="token punctuation">(</span>AP<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> large <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.788</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span>  <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.303</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.799</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>   all <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.799</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> small <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.400</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span>medium <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.769</span> Average Recall     <span class="token punctuation">(</span>AR<span class="token punctuation">)</span> @<span class="token punctuation">[</span> IoU<span class="token operator">=</span><span class="token number">0.50</span><span class="token punctuation">:</span><span class="token number">0.95</span> <span class="token operator">|</span> area<span class="token operator">=</span> large <span class="token operator">|</span> maxDets<span class="token operator">=</span><span class="token number">100</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.818</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看看结果究竟怎么样，选一张图片来看：</p><p>But what do the predictions look like? Let’s take one image in the dataset and verify</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pytorch.org/tutorials/_static/img/tv_tutorial/tv_image05.png" alt="intermediate/../../_static/img/tv_tutorial/tv_image05.png"></p><p>The trained model predicts 9 instances of person in this image, let’s see a couple of them:</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pytorch.org/tutorials/_static/img/tv_tutorial/tv_image06.png" alt="intermediate/../../_static/img/tv_tutorial/tv_image06.png"> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pytorch.org/tutorials/_static/img/tv_tutorial/tv_image07.png" alt="intermediate/../../_static/img/tv_tutorial/tv_image07.png"></p><p>The results look pretty good!</p><h2 id="Wrapping-up"><a href="#Wrapping-up" class="headerlink" title="Wrapping up"></a>Wrapping up</h2><p>In this tutorial, you have learned how to create your own training pipeline for instance segmentation models, on a custom dataset. For that, you wrote a <code>torch.utils.data.Dataset</code> class that returns the images and the ground truth boxes and segmentation masks. You also leveraged a Mask R-CNN model pre-trained on COCO train2017 in order to perform transfer learning on this new dataset.</p><p>For a more complete example, which includes multi-machine / multi-gpu training, check <code>references/detection/train.py</code>, which is present in the torchvision repo.</p><p>You can download a full source file for this tutorial <a href="https://pytorch.org/tutorials/_static/tv-training-code.py" target="_blank" rel="noopener">here</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> Mask-RCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux笔记</title>
      <link href="/2021/09/24/linux-bi-ji/"/>
      <url>/2021/09/24/linux-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>4张2080Ti！！我连接了Dian团队的服务器之后，终于不用再担心算力的问题了😭！之前总是靠kaggle、colab这些白嫖GPU，现在完全不用担心这些问题，直接连接到Dian的服务器，算力十足。这也正好让我开始接触到了Linux，任务驱动之下，也不得不学一些Linux命令，正好实际上我对这个东西也挺好奇的，这里开一篇博客记录一下。</p><p><strong>笔记记得会非常没有章法，但是这算是一个学习的过程。这篇文章可能不是按照顺序理解的</strong></p><h2 id="查看显卡的型号、信息-置顶"><a href="#查看显卡的型号、信息-置顶" class="headerlink" title="查看显卡的型号、信息(置顶)"></a>查看显卡的型号、信息(置顶)</h2><pre class="line-numbers language-shell"><code class="language-shell">nvidia-smi -L<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>康康Dian的服务器的4张2080Ti：</p><p><a href="https://imgtu.com/i/4rdY0f" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/25/4rdY0f.png" alt="nvidia"></a></p><p>在 Linux 中目前有几个命令可以用来获取硬件信息，其中 lspic 命令行工具便可用来获取显卡的硬件信息。</p><p>这里目前不太能用到，以后用到再说。可以看看这个博客：<a href="https://www.sysgeek.cn/graphics-card-information-linux/。" target="_blank" rel="noopener">https://www.sysgeek.cn/graphics-card-information-linux/。</a></p><p>查看CPU信息（型号）</p><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看内存信息</p><p># cat /proc/meminfo</p><p>如何查看Linux 内核<br>uname -a<br>cat /proc/version</p><p>查看机器型号（机器硬件型号）</p><p>dmidecode | grep “Product Name”<br>dmidecode</p><p>如何查看linux 系统版本<br>cat /etc/redhat-release<br>lsb_release -a<br>cat /etc/issue</p><p>如何查看linux系统和CPU型号，类型和大小<br>cat /proc/cpuinfo</p><p>如何查看linux 系统内存大小的信息，可以查看总内存，剩余内存，可使用内存等信息<br>cat /proc/meminfo</p><h2 id="首先简单介绍一下SSH"><a href="#首先简单介绍一下SSH" class="headerlink" title="首先简单介绍一下SSH"></a>首先简单介绍一下SSH</h2><blockquote><p>该部分选自：阮一峰的网络日志<a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a></p></blockquote><h3 id="一、什么是SSH？"><a href="#一、什么是SSH？" class="headerlink" title="一、什么是SSH？"></a><strong>一、什么是SSH？</strong></h3><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。</p><p>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p><p>最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p><p>需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是<a href="https://www.openssh.com/" target="_blank" rel="noopener">OpenSSH</a>，它是自由软件，应用非常广泛。</p><p>此外，本文只讨论SSH在Linux Shell中的用法。如果要在Windows系统中使用SSH，会用到另一种软件<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty" target="_blank" rel="noopener">PuTTY</a>，这需要另文介绍。</p><h3 id="二、最基本的用法"><a href="#二、最基本的用法" class="headerlink" title="二、最基本的用法"></a><strong>二、最基本的用法</strong></h3><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。</p><blockquote><p>　　$ ssh user@host</p></blockquote><p>如果本地用户名与远程用户名一致，登录时可以省略用户名。</p><blockquote><p>　　$ ssh host</p></blockquote><p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。</p><blockquote><p>　　$ ssh -p 2222 user@host</p></blockquote><p>上面这条命令表示，ssh直接连接远程主机的2222端口。</p><h2 id="连接到服务器"><a href="#连接到服务器" class="headerlink" title="连接到服务器"></a>连接到服务器</h2><pre class="line-numbers language-shell"><code class="language-shell">ssh 43004 ssh lry@192.168.0.75 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是一般来说为了安全起见，端口号等一些参数并不会使用默认值。这样的话命令就变成这样：</p><pre class="line-numbers language-shell"><code class="language-shell">ssh 用户名@IP地址 -p 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="密钥登录-免密码"><a href="#密钥登录-免密码" class="headerlink" title="密钥登录(免密码)"></a>密钥登录(免密码)</h2><p>每次登录SH都需要输入密码很麻烦，而且可能不太安全。SSH还能使用另外一种登录方式，也就是使用密钥登录。这种登录方式需要客户端生成一堆公钥私钥对，然后将公钥添加到服务器中，这样下次就可以直接登录了。</p><p>首先生成SSH密钥，依照提示输入信息即可。默认生成在用户主目录中的.ssh文件夹中。带pub的是公钥，接下来需要添加到服务器中。</p><pre class="line-numbers language-shell"><code class="language-shell">ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后将本地公钥添加到服务器中，需要使用另一个命令：</p><pre class="line-numbers language-shell"><code class="language-shell">scp -P 端口号 本地文件路径 用户名@远程服务器地址:远程路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后登陆服务器，找到复制进去的公钥，将公钥名字改为authorized_keys并添加到对应的.ssh文件夹中。然后退出SSH重新登陆试试，成功的话不需要输入密码就会直接进入远程服务器。</p><h2 id="Linux-系统目录结构"><a href="#Linux-系统目录结构" class="headerlink" title="Linux 系统目录结构"></a>Linux 系统目录结构</h2><blockquote><p>选自菜鸟教程：<a href="https://www.runoob.com/linux/linux-system-contents.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-system-contents.html</a></p></blockquote><p>登陆系统后输入命令：</p><pre class="line-numbers language-shell"><code class="language-shell">ls \<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会看到如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.runoob.com/wp-content/uploads/2014/06/4_20.png" alt="files"></p><p>树状目录结构：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="structure"></p><p>以下是对这些目录的解释：</p><ul><li><p><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>/boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>/dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>/home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>/lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>/media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>/opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><pre><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></pre></li><li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>/selinux</strong>：<br> 这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>/srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>/sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>/tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>/usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>/var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 /bin/ls 目录下的。</p><p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给 root 使用的指令。</p><p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 /var/log 目录下，另外 mail 的预设放置也是在这里。</p><h2 id="What-is-shell"><a href="#What-is-shell" class="headerlink" title="What is shell?"></a>What is shell?</h2><blockquote><p>该章节几乎所有内容来自于<a href="https://missing-semester-cn.github.io/2020/course-shell/" target="_blank" rel="noopener">https://missing-semester-cn.github.io/2020/course-shell/</a></p></blockquote><p>如今的计算机有着多种多样的交互接口让我们可以进行指令的的输入，从炫酷的图像用户界面（GUI），语音输入甚至是 AR/VR 都已经无处不在。 这些交互接口可以覆盖 80% 的使用场景，但是它们也从根本上限制了您的操作方式——你不能点击一个不存在的按钮或者是用语音输入一个还没有被录入的指令。 为了充分利用计算机的能力，我们不得不回到最根本的方式，使用文字接口：Shell</p><p>几乎所有您能够接触到的平台都支持某种形式的 shell，有些甚至还提供了多种 shell 供您选择。虽然它们之间有些细节上的差异，但是其核心功能都是一样的：它允许你执行程序，输入并获取某种半结构化的输出。</p><p>本次我们会使用 Bourne Again SHell, 简称 “bash” 。 这是被最广泛使用的一种 shell，它的语法和其他的 shell 都是类似的。打开shell <em>提示符*（您输入指令的地方），您首先需要打开 *终端</em> 。您的设备通常都已经内置了终端，或者您也可以安装一个，非常简单。</p><p>shell的功能更加强大，相比于我们的GUI程序来说。并且我们可以安装新的终端，比如说目前我用的就是git的bash, 当然，也可以选择使用别的如power shell、cmd等等。或者windows terminal这种。</p><h3 id="使用-shell"><a href="#使用-shell" class="headerlink" title="使用 shell"></a>使用 shell</h3><p>当您打开终端时，您会看到一个提示符，它看起来一般是这个样子的：</p><pre><code>missing:~$ </code></pre><p>这是 shell 最主要的文本接口。它告诉你，你的主机名是 <code>missing</code> 并且您当前的工作目录（”current working directory”）或者说您当前所在的位置是 <code>~</code> (表示 “home”)。 <code>$</code> 符号表示您现在的身份不是 root 用户（稍后会介绍）。在这个提示符中，您可以输入 <em>命令</em> ，命令最终会被 shell 解析。最简单的命令是执行一个程序：</p><pre><code>missing:~$ dateFri 10 Jan 2020 11:49:31 AM ESTmissing:~$ </code></pre><p>这里，我们执行了 <code>date</code> 这个程序，不出意料地，它打印出了当前的日前和时间。然后，shell 等待我们输入其他命令。我们可以在执行命令的同时向程序传递 <em>参数</em> ：</p><pre><code>missing:~$ echo hellohello</code></pre><p>上例中，我们让 shell 执行 <code>echo</code> ，同时指定参数 <code>hello</code>。<code>echo</code> 程序将该参数打印出来。 shell 基于空格分割命令并进行解析，然后执行第一个单词代表的程序，并将后续的单词作为程序可以访问的参数。如果您希望传递的参数中包含空格（例如一个名为 My Photos 的文件夹），您要么用使用单引号，双引号将其包裹起来，要么使用转义符号 <code>\</code> 进行处理（<code>My\ Photos</code>）。</p><p>但是，shell 是如何知道去哪里寻找 <code>date</code> 或 <code>echo</code> 的呢？其实，类似于 Python 或 Ruby，shell 是一个编程环境，所以它具备变量、条件、循环和函数（下一课进行讲解）。当你在 shell 中执行命令时，您实际上是在执行一段 shell 可以解释执行的简短代码。如果你要求 shell 执行某个指令，但是该指令并不是 shell 所了解的编程关键字，那么它会去咨询 <em>环境变量</em> <code>$PATH</code>，它会列出当 shell 接到某条指令时，进行程序搜索的路径：</p><pre><code>missing:~$ echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binmissing:~$ which echo/bin/echomissing:~$ /bin/echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</code></pre><p>当我们执行 <code>echo</code> 命令时，shell 了解到需要执行 <code>echo</code> 这个程序，随后它便会在 <code>$PATH</code> 中搜索由 <code>:</code> 所分割的一系列目录，基于名字搜索该程序。当找到该程序时便执行（假定该文件是 <em>可执行程序</em>，后续课程将详细讲解）。确定某个程序名代表的是哪个具体的程序，可以使用 <code>which</code> 程序。我们也可以绕过 <code>$PATH</code>，通过直接指定需要执行的程序的路径来执行该程序</p><h3 id="在shell中导航"><a href="#在shell中导航" class="headerlink" title="在shell中导航"></a>在shell中导航</h3><p>shell 中的路径是一组被分割的目录，在 Linux 和 macOS 上使用 <code>/</code> 分割，而在Windows上是 <code>\</code>。路径 <code>/</code> 代表的是系统的根目录，所有的文件夹都包括在这个路径之下，在Windows上每个盘都有一个根目录（例如： <code>C:\</code>）。 我们假设您在学习本课程时使用的是 Linux 文件系统。如果某个路径以 <code>/</code> 开头，那么它是一个 <em>绝对路径*，其他的都是 *相对路径</em> 。相对路径是指相对于当前工作目录的路径，当前工作目录可以使用 <code>pwd</code> 命令来获取。此外，切换目录需要使用 <code>cd</code> 命令。在路径中，<code>.</code> 表示的是当前目录，而 <code>..</code> 表示上级目录：</p><pre><code>missing:~$ pwd/home/missingmissing:~$ cd /homemissing:/home$ pwd/homemissing:/home$ cd ..missing:/$ pwd/missing:/$ cd ./homemissing:/home$ pwd/homemissing:/home$ cd missingmissing:~$ pwd/home/missingmissing:~$ ../../bin/echo hellohello</code></pre><p>注意，shell 会实时显示当前的路径信息。您可以通过配置 shell 提示符来显示各种有用的信息，这一内容我们会在后面的课程中进行讨论。</p><p>一般来说，当我们运行一个程序时，如果我们没有指定路径，则该程序会在当前目录下执行。例如，我们常常会搜索文件，并在需要时创建文件。</p><p>为了查看指定目录下包含哪些文件，我们使用 <code>ls</code> 命令：</p><pre class="line-numbers language-shell"><code class="language-shell">missing:~$ lsmissing:~$ cd ..missing:/home$ lsmissingmissing:/home$ cd ..missing:/$ lsbinbootdevetchome...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除非我们利用第一个参数指定目录，否则 <code>ls</code> 会打印当前目录下的文件。大多数的命令接受标记和选项（带有值的标记），它们以 <code>-</code> 开头，并可以改变程序的行为。通常，在执行程序时使用 <code>-h</code> 或 <code>--help</code> 标记可以打印帮助信息，以便了解有哪些可用的标记或选项。例如，<code>ls --help</code> 的输出如下：</p><pre class="line-numbers language-shell"><code class="language-shell">  -l                         use a long listing formatmissing:~$ ls -l /homedrwxr-xr-x 1 missing  users  4096 Jun 15  2019 missing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">drwxr-xr-x 18 gpl  gpl  4096 9月  23 15:46 gpldrwxr-xr-x  6 gyf  gyf  4096 9月  21 19:29 gyfdrwxr-xr-x 18 jhy  jhy  4096 9月  20 15:27 jhydrwxr-xr-x  6 lj   lj   4096 5月  29 18:15 ljdrwxr-xr-x  6 lry  lry  4096 9月  24 21:38 lrydrwxr-xr-x 15 lza  lza  4096 9月  12 17:29 lzadrwxr-xr-x 32 user user 4096 7月  21 16:42 userdrwxr-xr-x 11 1004 1004 4096 5月  12 17:03 wqydrwxr-xr-x 11 xyf  xyf  4096 3月  17  2021 xyfdrwxr-xr-x  6 zn   zn   4096 8月  19 22:18 zndrwxr-xr-x 13 zwt  zwt  4096 9月  21 15:24 zwtdrwxr-xr-x 17 zxl  zxl  4096 9月   9 22:02 zxldrwxr-xr-x 32 zyh  1011 4096 7月  27 14:50 zyhdrwxr-xr-x  2 zzr  zzr  4096 5月   7 19:47 zzr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个参数可以打印出更加详细地列出目录下文件或文件夹的信息。首先，本行第一个字符 <code>d</code> 表示 <code>missing</code> 是一个目录。然后接下来的九个字符，每三个字符构成一组。 （<code>rwx</code>）. 它们分别代表了文件所有者（<code>missing</code>），用户组（<code>users</code>） 以及其他所有人具有的权限。其中 <code>-</code> 表示该用户不具备相应的权限。从上面的信息来看，只有文件所有者可以修改（<code>w</code>），<code>missing</code> 文件夹 （例如，添加或删除文件夹中的文件）。为了进入某个文件夹，用户需要具备该文件夹以及其父文件夹的“搜索”权限（以“可执行”：<code>x</code>）权限表示。为了列出它的包含的内容，用户必须对该文件夹具备读权限（<code>r</code>）。对于文件来说，权限的意义也是类似的。注意，<code>/bin</code> 目录下的程序在最后一组，即表示所有人的用户组中，均包含 <code>x</code> 权限，也就是说任何人都可以执行这些程序。</p><p>在这个阶段，还有几个趁手的命令是您需要掌握的，例如 <code>mv</code>（用于重命名或移动文件）、 <code>cp</code>（拷贝文件）以及 <code>mkdir</code>（新建文件夹）。</p><p>如果您想要知道关于程序参数、输入输出的信息，亦或是想要了解它们的工作方式，请试试 <code>man</code> 这个程序。它会接受一个程序名作为参数，然后将它的文档（用户手册）展现给您。注意，使用 <code>q</code> 可以退出该程序。</p><pre class="line-numbers language-shell"><code class="language-shell">missing:~$ man ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>synopsis</strong>:  n. a brief summary or general survey of something.    “a synopsis of the accident”</p><p><strong>manual</strong>  :  1. adj. relating to or done with the hands. 2. a book of instructions, especially for operating a machine or learning a subject; a handbook.</p></blockquote><p> <a href="https://imgtu.com/i/4DLfD1" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/24/4DLfD1.md.png" alt="result of man ls"></a></p><h3 id="在程序间创建连接"><a href="#在程序间创建连接" class="headerlink" title="在程序间创建连接"></a>在程序间创建连接</h3><p>在 shell 中，程序有两个主要的“流”：它们的输入流和输出流。 当程序尝试读取信息时，它们会从输入流中进行读取，当程序打印信息时，它们会将信息输出到输出流中。 通常，一个程序的输入输出流都是您的终端。也就是，您的键盘作为输入，显示器作为输出。 但是，我们也可以重定向这些流！</p><p>最简单的重定向是 <code>&lt; file</code> 和 <code>&gt; file</code>。这两个命令可以将程序的输入输出流分别重定向到文件：</p><pre><code>missing:~$ echo hello &gt; hello.txtmissing:~$ cat hello.txthellomissing:~$ cat &lt; hello.txthellomissing:~$ cat &lt; hello.txt &gt; hello2.txtmissing:~$ cat hello2.txthello</code></pre><blockquote><p><strong>The <em>cat</em> Command</strong>, <a href="https://www.baeldung.com/linux/cat-writing-file" target="_blank" rel="noopener">https://www.baeldung.com/linux/cat-writing-file</a></p><p>The <em>cat</em> command is a utility command in Linux. One of its most commonly known usages is to print the content of a file onto the standard output stream. Other than that, the <em>cat</em> command also allows us to write some texts into a file.</p></blockquote><p>您还可以使用 <code>&gt;&gt;</code> 来向一个文件追加内容。使用管道（ <em>pipes</em> ），我们能够更好的利用文件重定向。 <code>|</code> 操作符允许我们将一个程序的输出和另外一个程序的输入连接起来：</p><pre><code>missing:~$ ls -l / | tail -n1drwxr-xr-x 1 root  root  4096 Jun 20  2019 varmissing:~$ curl --head --silent google.com | grep --ignore-case content-length | cut --delimiter=&#39; &#39; -f2219</code></pre><p>我们会在数据清理一章中更加详细的探讨如何更好的利用管道。</p><h3 id="一个功能全面又强大的工具"><a href="#一个功能全面又强大的工具" class="headerlink" title="一个功能全面又强大的工具"></a>一个功能全面又强大的工具</h3><p>对于大多数的类 Unix 系统，有一类用户是非常特殊的，那就是：根用户（root user）。 您应该已经注意到了，在上面的输出结果中，根用户几乎不受任何限制，他可以创建、读取、更新和删除系统中的任何文件。 通常在我们并不会以根用户的身份直接登录系统，因为这样可能会因为某些错误的操作而破坏系统。 取而代之的是我们会在需要的时候使用 <code>sudo</code> 命令。顾名思义，它的作用是让您可以以 su（super user 或 root 的简写）的身份执行一些操作。 当您遇到拒绝访问（permission denied）的错误时，通常是因为此时您必须是根用户才能操作。然而，请再次确认您是真的要执行此操作。</p><p>有一件事情是您必须作为根用户才能做的，那就是向 <code>sysfs</code> 文件写入内容。系统被挂载在 <code>/sys</code> 下，<code>sysfs</code> 文件则暴露了一些内核（kernel）参数。 因此，您不需要借助任何专用的工具，就可以轻松地在运行期间配置系统内核。<strong>注意 Windows 和 macOS 没有这个文件</strong></p><p>例如，您笔记本电脑的屏幕亮度写在 <code>brightness</code> 文件中，它位于</p><pre><code>/sys/class/backlight</code></pre><p>通过将数值写入该文件，我们可以改变屏幕的亮度。现在，蹦到您脑袋里的第一个想法可能是：</p><pre><code>$ sudo find -L /sys/class/backlight -maxdepth 2 -name &#39;*brightness*&#39;/sys/class/backlight/thinkpad_screen/brightness$ cd /sys/class/backlight/thinkpad_screen$ sudo echo 3 &gt; brightnessAn error occurred while redirecting file &#39;brightness&#39;open: Permission denied</code></pre><p>出乎意料的是，我们还是得到了一个错误信息。毕竟，我们已经使用了 <code>sudo</code> 命令！关于 shell，有件事我们必须要知道。<code>|</code>、<code>&gt;</code>、和 <code>&lt;</code> 是通过 shell 执行的，而不是被各个程序单独执行。 <code>echo</code> 等程序并不知道 <code>|</code> 的存在，它们只知道从自己的输入输出流中进行读写。 对于上面这种情况， <em>shell</em> (权限为您的当前用户) 在设置 <code>sudo echo</code> 前尝试打开 brightness 文件并写入，但是系统拒绝了 shell 的操作因为此时 shell 不是根用户。</p><p>明白这一点后，我们可以这样操作：</p><pre><code>$ echo 3 | sudo tee brightness</code></pre><p>因为打开 <code>/sys</code> 文件的是 <code>tee</code> 这个程序，并且该程序以 <code>root</code> 权限在运行，因此操作可以进行。 这样您就可以在 <code>/sys</code> 中愉快地玩耍了，例如修改系统中各种LED的状态（路径可能会有所不同）：</p><pre class="line-numbers language-shell"><code class="language-shell">$ echo 1 | sudo tee /sys/class/leds/input6::scrolllock/brightness<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="接下来…"><a href="#接下来…" class="headerlink" title="接下来….."></a>接下来…..</h3><p>学到这里，您掌握的 shell 知识已经可以完成一些基础的任务了。您应该已经可以查找感兴趣的文件并使用大多数程序的基本功能了。 在下一场讲座中，我们会探讨如何利用 shell 及其他工具执行并自动化更复杂的任务。</p><h2 id="公网访问方式"><a href="#公网访问方式" class="headerlink" title="公网访问方式"></a>公网访问方式</h2><p>之前我以为我们只能内网访问，但是现在发现还可以公网访问该文件。经过我们优秀组长蒋浩懿的指点，方法如下：</p><p>首先输入我们的这样一串代码：</p><pre class="line-numbers language-shell"><code class="language-shell">ssh jump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着我们就需要输入公网的密码了：</p><pre class="line-numbers language-shell"><code class="language-shell">****(经过加密不予显示)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们接着就可以使用内网的连接方式了，不知道为什么ssh 43004不行：</p><pre class="line-numbers language-shell"><code class="language-shell">ssh lry@192.168.0.75<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着输入自己的密码就OK。</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>配置相应的机器学习环境真麻烦，我感觉又要配一整天……</p><h3 id="安装miniconda"><a href="#安装miniconda" class="headerlink" title="安装miniconda"></a>安装miniconda</h3><blockquote><p>参考博客：<a href="https://blog.csdn.net/qq_41795565/article/details/114181048#:~:text=%E6%89%BE%E5%88%B0MiniConda%20%E5%AE%98%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%89%BE%E5%88%B0,%E5%90%8E%E9%9D%A2%E5%85%A8%E9%83%A8yes%E9%80%9A%E8%BF%87%E5%AE%89%E8%A3%85%E3%80%82" target="_blank" rel="noopener">https://blog.csdn.net/qq_41795565/article/details/114181048#:~:text=%E6%89%BE%E5%88%B0MiniConda%20%E5%AE%98%E7%BD%91%E8%BF%9E%E6%8E%A5%E6%89%BE%E5%88%B0,%E5%90%8E%E9%9D%A2%E5%85%A8%E9%83%A8yes%E9%80%9A%E8%BF%87%E5%AE%89%E8%A3%85%E3%80%82</a></p></blockquote><p>指令：</p><pre class="line-numbers language-shell"><code class="language-shell"># step 1: 获取安装shell脚本文件wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh# step 2: 执行脚本文件安装bash Miniconda3-latest-Linux-x86_64.sh# step 3: 激活source ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>注意，第三步激活不同的人路径不一样，比如说我的路径就是~/.zshrc, 这一点请格外注意一下。</strong></li><li><a href="https://imgtu.com/i/4r6PQe" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/25/4r6PQe.md.png" alt="zshrc"></a></li><li>另外第二步的路径可以自己选，到时候让选location的时候注意自己输入路径就OK了。</li></ul><h3 id="接着安装我们深度学习其他环境"><a href="#接着安装我们深度学习其他环境" class="headerlink" title="接着安装我们深度学习其他环境"></a>接着安装我们深度学习其他环境</h3><p>我发现这一篇博客写得非常好，希望对各位有帮助，至少对我帮助非常大！</p><p><a href="https://bartek-blog.github.io/python/pytorch/conda/2018/11/12/install-pytorch-with-conda.html" target="_blank" rel="noopener">https://bartek-blog.github.io/python/pytorch/conda/2018/11/12/install-pytorch-with-conda.html</a></p><p>呜呜呜，不用装了不用装了，目前已经有配好的环境可供我使用了，各位请参考上面的博客，祝你们成功！</p><h2 id="下载和解压、压缩文件"><a href="#下载和解压、压缩文件" class="headerlink" title="下载和解压、压缩文件"></a>下载和解压、压缩文件</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>wget是linux下一个从网络上自动下载文件的常用自由工具。它支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。一般的使用方法是: wget + 空格 + 参数 + 要下载文件的url路径，例如：</p><p>wget -c <a href="http://apache.opencas.org/tomcat/tomcat-7/v7.0.67/bin/apache-tomcat-7.0.67.zip" target="_blank" rel="noopener">http://apache.opencas.org/tomcat/tomcat-7/v7.0.67/bin/apache-tomcat-7.0.67.zip</a><br>-c参数, 这个也非常常见, 可以断点续传, 如果不小心终止了, 可以继续使用命令接着下载。</p><p>Wget常用参数</p><p>-b：后台下载，Wget默认的是把文件下载到当前目录。</p><p>-O：将文件下载到指定的目录中。</p><p>-P：保存文件之前先创建指定名称的目录。</p><p>-t：尝试连接次数，当Wget无法与服务器建立连接时，尝试连接多少次。</p><p>-c：断点续传，如果下载中断，那么连接恢复时会从上次断点开始下载。</p><p>-r：使用递归下载</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>1.zip命令<br>zip -r myfile.zip ./*<br>将当前目录下的所有文件和文件夹全部压缩成myfile.zip文件,－r表示递归压缩子目录下所有文件.</p><p>2.unzip命令<br>unzip -o -d /home/sunny myfile.zip<br>把myfile.zip文件解压到 /home/sunny/<br>-o:不提示的情况下覆盖文件；<br>-d:-d /home/sunny 指明将文件解压缩到/home/sunny目录下；</p><p>3.其他<br>zip -d myfile.zip smart.txt<br>删除压缩文件中smart.txt文件<br>zip -m myfile.zip ./rpm_info.txt<br>向压缩文件中myfile.zip中添加rpm_info.txt文件</p><p>要使用 zip 来压缩文件，在 shell 提示下键入下面的命令：</p><p>zip -r filename.zip filesdir<br>在这个例子里，filename.zip 代表你创建的文件，filesdir 代表你想放置新 zip 文件的目录。-r 选项指定你想递归地（recursively）包括所有包括在 filesdir 目录中的文件。<br>要抽取 zip 文件的内容，键入以下命令：<br>unzip filename.zip</p><p>你可以使用 zip 命令同时处理多个文件和目录，方法是将它们逐一列出，并用空格间隔：</p><p>zip -r filename.zip file1 file2 file3 /usr/work/school<br>上面的命令把 file1、file2、 file3、以及 /usr/work/school 目录的内容（假设这个目录存在）压缩起来，然后放入 filename.zip 文件中。</p><h2 id="linux-如何以树形结构显示文件目录结构"><a href="#linux-如何以树形结构显示文件目录结构" class="headerlink" title="linux 如何以树形结构显示文件目录结构"></a>linux 如何以树形结构显示文件目录结构</h2><p>可以用 tree 命令</p><p>安装：</p><p>sudo apt-get install tree</p><p>功能说明：以树状图列出目录的内容。</p><p>如：</p><p>tree 以树状图显示所有文件</p><p>tree -L N 以树状图显示所有文件，子文件夹显示到第 N 层</p>]]></content>
      
      
      <categories>
          
          <category> 指令集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 显卡 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Pseudo-LiDAR的纯视觉3D物体检测算法</title>
      <link href="/2021/09/21/kang-nai-er-wang-yan-bo-shi-xian-shang-talk-ji-lu/"/>
      <url>/2021/09/21/kang-nai-er-wang-yan-bo-shi-xian-shang-talk-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>何琨老师给我们3D目标检测小组邀请到了康奈尔大学3D深度检测方面的博士生王岩博士来做线上talk，这里简单记录一些关于3D目标检测方面的讲的一些slides和一些笔记，当然，这些都是很杂乱的，不是很规矩，甚至有些可能是错的，但是这些都是很好的部分，以供之后进一步学习。</p><h2 id="会议主题：KunHe预定的会议"><a href="#会议主题：KunHe预定的会议" class="headerlink" title="会议主题：KunHe预定的会议"></a>会议主题：KunHe预定的会议</h2><p>会议号<code>********</code></p><p>3D检测</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373563371477362833.png/mid?sign=f85702658eb93a758c876da9646c875c&t=1632190721" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373563429191008897.jpg/mid?sign=af50831678201588b08538735b97e188&t=1632190755" alt="img"></p><p>如果我想用相机来帮助lidar，那是做不到的。</p><p>激光雷达通过物理来感觉深度，但是神经网络是感受预测深度。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373563531380989863.jpg/mid?sign=667b84d50d6b5996022f70d31fa50451&t=1632190816" alt="img"></p><p>这个预测的是非常准的，如果有了这个雷达和，我们可以预测出：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373563589480488871.jpg/mid?sign=4c50fe57275decebe21e91d23989ddef&t=1632190850" alt="img"></p><p>对于每个像素，我们有这个公式：</p><p>Intri 和 extri是相机的外参。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373563619159402641.jpg/mid?sign=77040c7546420a8218f598e0b027ae12&t=1632190868" alt="img"></p><p>uv就是点的坐标，而且那个是转换公式，每个pixel都可以生成一个点云坐标</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373563727473156717.jpg/mid?sign=b95cc6c5d5ecb5b35748c1a3e2294d33&t=1632190933" alt="img"></p><p>上图可以看出，我们把深度学习的和雷达预测的是差不多的。</p><p>卷积神经网络会有问题，它会和对应像素的相乘，它会将背景和前景的点加在了一起，所以就会有一个误差，将远距离的点和近距离的点加到了一起。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373563799363461032.jpg/mid?sign=81a3a539d2802bf0747c989eb8c0df8e&t=1632190975" alt="img"></p><p>可以看出这么一个图， 这个物体的点会扩散开了，原因我们将物体的点和背景的点加在了一起，点扩散开来了，所以深度图的是不适用于3D检测的</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373563989046683793.jpg/mid?sign=22790871074816fb6e942619394b6fd3&t=1632191088" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373563924269834862.jpg/mid?sign=71c44e31e3a8e7e450c28bba4e4af50e&t=1632191050" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373563900647579560.jpg/mid?sign=1af18889e667456278d386e92df1c895&t=1632191036" alt="img"></p><p>我们本来是得到深度图转化成point cloud，所以我们想要使用激光雷达的网络来处理伪激光雷达来处理bbox</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373564036979171239.jpg/mid?sign=4e6d2b9ca674952b474dc811771c9c5d&t=1632191117" alt="img"></p><p>可以看出来性能：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373564141299984530.jpg/mid?sign=16567d6d93a874dbf04561079906e120&t=1632191179" alt="img"></p><p>这个准确度从20升到了57了。提升了2.9倍。</p><p>这还是一些预测，右上是伪激光雷达，红色标记，绿色预测。</p><p>下边分别是激光雷达、伪激光雷达、深度图的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373564190457184897.jpg/mid?sign=735bba7a7ef84875a2008b614c7ab464&t=1632191209" alt="img"></p><p>伪激光雷达会用point net这种卷积。</p><p>双目都能predict对，其他的都不太好。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373564420523102044.jpg/mid?sign=cccbf12c722ec945801ff21e1940cc84&t=1632191346" alt="img"></p><p>该视频显示</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373564485031502446.jpg/mid?sign=638cd4bb3deac650d15eb2e6541f4037&t=1632191384" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373564507680744046.jpg/mid?sign=de38e35ff8878d8d7563f8a62bfdea79&t=1632191398" alt="img"></p><p>小总结，可以看出实际上本来差距是不太大的，主要差距是在于深度准不准确，而最主要的就是我们深度的准确度，就是hard难度。</p><p>双目摄像头的深度估计：</p><p>三角几何，p是三弟空间的一个点，而这个p1,p2是投影的带你，而</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373564616732648046.jpg/mid?sign=502e36f37c488c8075724d0e85ad7a41&t=1632191463" alt="img"></p><p>这个Z实际上就是深度。原理是相似三角形</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373564963601606801.jpg/mid?sign=fe21a47a82bd91e4639c39fff35c3f8d&t=1632191670" alt="img"></p><p>如何预测disparity：</p><p>只需要在x轴搜索，而y是不变的，这个disparity是用来估计深度的。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373565139561025372.jpg/mid?sign=d894be5c1af3b524d13a3f86599159f7&t=1632191774" alt="img"></p><p>单目深度估计：</p><p>两种方式：第一种有手机拍照片，由一些先验知识</p><p>第二种是一段video通过前后关系来预测深度。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373565208213397415.jpg/mid?sign=0ddb9a597597f2c62b6a765ffc786cbb&t=1632191815" alt="img"></p><p>了解了单目和双目来预测深度。下面如何提升这个深度估计。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373565719197126491.jpg/mid?sign=fd2f485c549d5b7a0a89c9e246ca3f66&t=1632192120" alt="img"></p><p>左图的pixel相对于右图的pixel移动了多少东西。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373565764193577105.jpg/mid?sign=0650569da5a79e02037c658fdb50296d&t=1632192146" alt="img"></p><p>前面也提到了，就是一个个的pixel的找不断计算出相似度，再找出最好的那个pixel</p><p>首先我们用到左图的神经网络得到feature map，然后build一个，一个是长和宽，另外的就是我们的相似度。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373565813787008935.jpg/mid?sign=7eb3b86f9285e96b83197cbaf65231a5&t=1632192176" alt="img"></p><p>深度和Disparity是有一个反比关系。如果预测错了一个disparity，那么我们就预测几百米的距离。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373566040547861102.jpg/mid?sign=51df53b8318786a6206ae7dd32a39e20&t=1632192311" alt="img"></p><p>m</p><p>可以看一下误差提升的还挺好，做了一个depth volume的创新</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373566288582240401.jpg/mid?sign=01b714c3e9c293ff9997d3ff5c0fa14e&t=1632192459" alt="img"></p><p>对于我们的结果来看，实际上是有挺大提升的。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373566359617019816.jpg/mid?sign=ed5d95d950492990e990b2922e866e6a&t=1632192501" alt="img"></p><p>moderate从56-64，提升8个点，提升还是非常准的。</p><h2 id="速度"><a href="#速度" class="headerlink" title="速度"></a><strong>速度</strong></h2><p>可以看出预测深度是非常慢了。可能我已经撞车才算出来警报</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373566470313044113.jpg/mid?sign=da8dee0514eddb5c2f784a17b58c3eec&t=1632192568" alt="img"></p><p>我们主要慢在这里，这个深度图深度估计，depth disparity：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373566587418058663.jpg/mid?sign=962b38dbc84336b4c8679883ce9368d8&t=1632192637" alt="img"></p><p>远距离估计不准是因为降维。</p><p>而这里用的都是一些很小的图片，对于4k,8k.</p><p>总结一下深度估计的问题，近距离点多，而远距离的点就比较少，而这样的话优化来看远距离的点优化的比较少。</p><p>而空间上，近距离地车很大，远距离的车就很小。</p><p>所以我们就想要跳过深度估计，而是仅仅直接得到point cloud。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373566712190190209.jpg/mid?sign=18453c1280a570268b19abbdfd9ca646&t=1632192712" alt="img"></p><p>可以看一下得到方式：</p><p>由之前得到的转换方式，直接copy过来就OK。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373566901621690203.jpg/mid?sign=eeff7f35175c3c3639d48d05478db681&t=1632192825" alt="img"></p><p>可以看一下性能：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373566980105511534.jpg/mid?sign=26ae9bcd5294b906b73e492aba2545b0&t=1632192871" alt="img"></p><p>对比结果：</p><p>用了最新技术后就取得了很大的提升，而easy部分就已经接近ladar了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373567031645118376.jpg/mid?sign=3e430f6f594d96cb4506e151fb45e8c7&t=1632192902" alt="img"></p><p>我们用更大的图片就不会增加3D卷积的时间。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373567166349381467.jpg/mid?sign=f2d84e67d5d00ba8088bc7ffd7a71b5f&t=1632192983" alt="img"></p><p>LiDAR激光雷达只能预测200米之内的，所以这个就有局限。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373567178546422382.jpg/mid?sign=5f608619a73d35b2c3c980e03ab7ed39&t=1632192990" alt="img"></p><p>业界也成功使用了这个方法。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373567258053649005.jpg/mid?sign=b62afe4c5cfc11642d107c38303c2b51&t=1632193037" alt="img"></p><p>之前大家做双目检测预测的是disparity，主要是做室内的，所以远的不太关心。但是无人驾驶需要远距离的预测也非常准所以才开始考虑这个问题。</p><p>前面讲的都是相机来预测物体。但是我们还可以使用到LiDAR.</p><p>虽然比较贵，但是我们可以考虑用到一个较为便宜的四线雷达，可以看出测试结果不太好。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373567747881247342.jpg/mid?sign=6643c5981bd30fbbe0bee01408f2a393&t=1632193335" alt="img"></p><p>看一下这个：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373567928437641052.jpg/mid?sign=c3d30582bc892819e8553d108b22d6bb&t=1632193437" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373568326141667144.jpg/origin?sign=45e07af3b4669ad766df804abeffd703&t=1632193674" alt="img"></p><p>一些可做方向：</p><p>\1. 缩小gap</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373568839927013288.jpg/mid?sign=d2ee7c37cd77d4732296cc9f0bead990&t=1632193980" alt="img"></p><p>\2. 高速上速度很快的话200米就不够了，所以这里就是关于不一样的深度距离。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373568860965637979.jpg/mid?sign=f09dcf3373b99df01fa8570b3c5fbbd6&t=1632193992" alt="img"></p><p>\3. 场景的问题</p><p>雨天呀，夜晚呀这种。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373569039676612519.jpg/mid?sign=394e6fd9b5b5f478a949c4cfdfa275a5&t=1632194099" alt="img"></p><p>\4. </p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373569084320850542.jpg/mid?sign=0dafe26179c772d30ad147340cd125cc&t=1632194125" alt="img"></p><p>做研究</p><p>研究方向</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373569391259886189.jpg/origin?sign=58cc1595de25c1f992237b3dacc9f21c&t=1632196398" alt="img"></p><p>深度估计</p><p>多跟不同方向的人讨论，然后就可以有一些很不错的合作者呀，思路呀。</p><p>阅读大量的文章，了解这个领域，多参加线上讨论会，可以直接问研究者问题。</p><p>找一些开源代码复现baseline，在上面改，基于别人工作</p><p>避免开始时就搭非常复杂的模型，然后浪费时间。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373569863353962331.jpg/origin?sign=b778bb310d5a60f756770853a429c3ba&t=1632196398" alt="img"></p><p>如何设计模型</p><p>分解别人模型，找到最终部分，以此开始，因为大量论文实际上提了很多点，但是有用的就1、2个点work</p><p>设计新方法，从最简单的开始</p><p>简化模型，找到最重要的点来写文章。模型越简单越容易被引用，可以往上加东西。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://wemeet-idea-prod-1258344699.file.myqcloud.com/wemeet_idea/200000001/144115231173702441/images/373570050872960840.jpg/origin?sign=f650d13d785b4b12ba2d312bab12dc7e&t=1632196398" alt="img"></p><p>准备英语和GPA，提升科研背景</p><p>申请材料：文章科研， 然后是推荐信（可能比文章重要），目前申美机会变大了。</p><p>从点云到3D目标检测这一块，提升已经不大了，已经快饱和了。</p><p>但是，从图像得到点云，提升就还是很有空间的。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> 线上talk </tag>
            
            <tag> 3D </tag>
            
            <tag> 康奈尔大学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初试RNN</title>
      <link href="/2021/09/20/chu-shi-rnn/"/>
      <url>/2021/09/20/chu-shi-rnn/</url>
      
        <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>昨天跟一帆学了一些关于RNN的内容，我们两个一起运行了官网的一些代码，后来发现机器翻译实际上效果不太好，可能模型的数据集太小了，训练欠拟合，没办法，即使是这么小的数据集我们也在kaggle上运行了20多分钟。我个人对于这些翻译还是感觉非常神奇的，居然这里面有两个网络，一个编码，一个解码。确实非常奇妙，NLP这些东西<del>我之后有时间</del>一定要认真研究一下。后来就是关于保存模型这些了，充分吸取我之前训练了那么多CNN但是最终没有保存模型的教训😭。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NLP From Scratch: Translation with a Sequence to Sequence Network and Attention</p><hr><p><strong>Author</strong>: <code>Sean Robertson &lt;https://github.com/spro/practical-pytorch&gt;</code>_</p><p>for better reading experience,  <a href="https://pytorch.org/tutorials/intermediate/seq2seq_translation_tutorial.html" target="_blank" rel="noopener"><code>here</code></a> </p><p>This is the third and final tutorial on doing “NLP From Scratch”, where we<br>write our own classes and functions to preprocess the data to do our NLP<br>modeling tasks. We hope after you complete this tutorial that you’ll proceed to<br>learn how <code>torchtext</code> can handle much of this preprocessing for you in the<br>three tutorials immediately following this one.</p><p>In this project we will be teaching a neural network to translate from<br>French to English.</p><p>::</p><pre><code>[KEY: &gt; input, = target, &lt; output]&gt; il est en train de peindre un tableau .= he is painting a picture .&lt; he is painting a picture .&gt; pourquoi ne pas essayer ce vin delicieux ?= why not try that delicious wine ?&lt; why not try that delicious wine ?&gt; elle n est pas poete mais romanciere .= she is not a poet but a novelist .&lt; she not not a poet but a novelist .&gt; vous etes trop maigre .= you re too skinny .&lt; you re all alone .</code></pre><p>… to varying degrees of success.</p><p>This is made possible by the simple but powerful idea of the <code>sequenceto sequence network &lt;https://arxiv.org/abs/1409.3215&gt;</code>__, in which two<br>recurrent neural networks work together to transform one sequence to<br>another. An encoder network condenses an input sequence into a vector,<br>and a decoder network unfolds that vector into a new sequence.</p><p>.. figure:: /_static/img/seq-seq-images/seq2seq.png<br>   :alt:</p><p>To improve upon this model we’ll use an <code>attentionmechanism &lt;https://arxiv.org/abs/1409.0473&gt;</code>__, which lets the decoder<br>learn to focus over a specific range of the input sequence.</p><p><strong>Recommended Reading:</strong></p><p>I assume you have at least installed PyTorch, know Python, and<br>understand Tensors:</p><ul><li><a href="https://pytorch.org/" target="_blank" rel="noopener">https://pytorch.org/</a> For installation instructions</li><li>:doc:<code>/beginner/deep_learning_60min_blitz</code> to get started with PyTorch in general</li><li>:doc:<code>/beginner/pytorch_with_examples</code> for a wide and deep overview</li><li>:doc:<code>/beginner/former_torchies_tutorial</code> if you are former Lua Torch user</li></ul><p>It would also be useful to know about Sequence to Sequence networks and<br>how they work:</p><ul><li><code>Learning Phrase Representations using RNN Encoder-Decoder forStatistical Machine Translation &lt;https://arxiv.org/abs/1406.1078&gt;</code>__</li><li><code>Sequence to Sequence Learning with NeuralNetworks &lt;https://arxiv.org/abs/1409.3215&gt;</code>__</li><li><code>Neural Machine Translation by Jointly Learning to Align andTranslate &lt;https://arxiv.org/abs/1409.0473&gt;</code>__</li><li><code>A Neural Conversational Model &lt;https://arxiv.org/abs/1506.05869&gt;</code>__</li></ul><p>You will also find the previous tutorials on<br>:doc:<code>/intermediate/char_rnn_classification_tutorial</code><br>and :doc:<code>/intermediate/char_rnn_generation_tutorial</code><br>helpful as those concepts are very similar to the Encoder and Decoder<br>models, respectively.</p><p><strong>Requirements</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> unicode_literals<span class="token punctuation">,</span> print_function<span class="token punctuation">,</span> division<span class="token keyword">from</span> io <span class="token keyword">import</span> open<span class="token keyword">import</span> unicodedata<span class="token keyword">import</span> string<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> Fdevice <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Loading-data-files"><a href="#Loading-data-files" class="headerlink" title="Loading data files"></a>Loading data files</h1><p>The data for this project is a set of many thousands of English to<br>French translation pairs.</p><p><code>This question on Open Data StackExchange &lt;https://opendata.stackexchange.com/questions/3888/dataset-of-sentences-translated-into-many-languages&gt;</code>__<br>pointed me to the open translation site <a href="https://tatoeba.org/" target="_blank" rel="noopener">https://tatoeba.org/</a> which has<br>downloads available at <a href="https://tatoeba.org/eng/downloads" target="_blank" rel="noopener">https://tatoeba.org/eng/downloads</a> - and better<br>yet, someone did the extra work of splitting language pairs into<br>individual text files here: <a href="https://www.manythings.org/anki/" target="_blank" rel="noopener">https://www.manythings.org/anki/</a></p><p>The English to French pairs are too big to include in the repo, so<br>download to <code>data/eng-fra.txt</code> before continuing. The file is a tab<br>separated list of translation pairs:</p><p>::</p><pre><code>I am cold.    J&#39;ai froid.</code></pre><p>.. Note::<br>   Download the data from<br>   <code>here &lt;https://download.pytorch.org/tutorial/data.zip&gt;</code>_<br>   and extract it to the current directory.</p><p>Similar to the character encoding used in the character-level RNN<br>tutorials, we will be representing each word in a language as a one-hot<br>vector, or giant vector of zeros except for a single one (at the index<br>of the word). Compared to the dozens of characters that might exist in a<br>language, there are many many more words, so the encoding vector is much<br>larger. We will however cheat a bit and trim the data to only use a few<br>thousand words per language.</p><p>.. figure:: /_static/img/seq-seq-images/word-encoding.png<br>   :alt:</p><p>We’ll need a unique index per word to use as the inputs and targets of<br>the networks later. To keep track of all this we will use a helper class<br>called <code>Lang</code> which has word → index (<code>word2index</code>) and index → word<br>(<code>index2word</code>) dictionaries, as well as a count of each word<br><code>word2count</code> which will be used to replace rare words later.</p><pre class="line-numbers language-python"><code class="language-python">SOS_token <span class="token operator">=</span> <span class="token number">0</span>EOS_token <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">Lang</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>word2index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>word2count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>index2word <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"SOS"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"EOS"</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>n_words <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># Count SOS and EOS</span>    <span class="token keyword">def</span> <span class="token function">addSentence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>addWord<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">addWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>word2index<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>word2index<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>n_words            self<span class="token punctuation">.</span>word2count<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>index2word<span class="token punctuation">[</span>self<span class="token punctuation">.</span>n_words<span class="token punctuation">]</span> <span class="token operator">=</span> word            self<span class="token punctuation">.</span>n_words <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>word2count<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The files are all in Unicode, to simplify we will turn Unicode<br>characters to ASCII, make everything lowercase, and trim most<br>punctuation.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Turn a Unicode string to plain ASCII, thanks to</span><span class="token comment" spellcheck="true"># https://stackoverflow.com/a/518232/2809427</span><span class="token keyword">def</span> <span class="token function">unicodeToAscii</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>        c <span class="token keyword">for</span> c <span class="token keyword">in</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">if</span> unicodedata<span class="token punctuation">.</span>category<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'Mn'</span>    <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Lowercase, trim, and remove non-letter characters</span><span class="token keyword">def</span> <span class="token function">normalizeString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> unicodeToAscii<span class="token punctuation">(</span>s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"([.!?])"</span><span class="token punctuation">,</span> r<span class="token string">" \1"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"[^a-zA-Z.!?]+"</span><span class="token punctuation">,</span> r<span class="token string">" "</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To read the data file we will split the file into lines, and then split<br>lines into pairs. The files are all English → Other Language, so if we<br>want to translate from Other Language → English I added the <code>reverse</code><br>flag to reverse the pairs.</p><pre class="line-numbers language-python"><code class="language-python">cd input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>/kaggle/input</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">readLangs</span><span class="token punctuation">(</span>lang1<span class="token punctuation">,</span> lang2<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Reading lines..."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Read the file and split into lines</span>    lines <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'engfratxt0/%s-%s.txt'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>lang1<span class="token punctuation">,</span> lang2<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\        read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Split every line into pairs and normalize</span>    pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>normalizeString<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> l<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> l <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Reverse pairs, make Lang instances</span>    <span class="token keyword">if</span> reverse<span class="token punctuation">:</span>        pairs <span class="token operator">=</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> pairs<span class="token punctuation">]</span>        input_lang <span class="token operator">=</span> Lang<span class="token punctuation">(</span>lang2<span class="token punctuation">)</span>        output_lang <span class="token operator">=</span> Lang<span class="token punctuation">(</span>lang1<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        input_lang <span class="token operator">=</span> Lang<span class="token punctuation">(</span>lang1<span class="token punctuation">)</span>        output_lang <span class="token operator">=</span> Lang<span class="token punctuation">(</span>lang2<span class="token punctuation">)</span>    <span class="token keyword">return</span> input_lang<span class="token punctuation">,</span> output_lang<span class="token punctuation">,</span> pairs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Since there are a <em>lot</em> of example sentences and we want to train<br>something quickly, we’ll trim the data set to only relatively short and<br>simple sentences. Here the maximum length is 10 words (that includes<br>ending punctuation) and we’re filtering to sentences that translate to<br>the form “I am” or “He is” etc. (accounting for apostrophes replaced<br>earlier).</p><pre class="line-numbers language-python"><code class="language-python">MAX_LENGTH <span class="token operator">=</span> <span class="token number">10</span>eng_prefixes <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">"i am "</span><span class="token punctuation">,</span> <span class="token string">"i m "</span><span class="token punctuation">,</span>    <span class="token string">"he is"</span><span class="token punctuation">,</span> <span class="token string">"he s "</span><span class="token punctuation">,</span>    <span class="token string">"she is"</span><span class="token punctuation">,</span> <span class="token string">"she s "</span><span class="token punctuation">,</span>    <span class="token string">"you are"</span><span class="token punctuation">,</span> <span class="token string">"you re "</span><span class="token punctuation">,</span>    <span class="token string">"we are"</span><span class="token punctuation">,</span> <span class="token string">"we re "</span><span class="token punctuation">,</span>    <span class="token string">"they are"</span><span class="token punctuation">,</span> <span class="token string">"they re "</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">filterPair</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAX_LENGTH <span class="token operator">and</span> \        len<span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAX_LENGTH <span class="token operator">and</span> \        p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>eng_prefixes<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">filterPairs</span><span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>pair <span class="token keyword">for</span> pair <span class="token keyword">in</span> pairs <span class="token keyword">if</span> filterPair<span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The full process for preparing the data is:</p><ul><li>Read text file and split into lines, split lines into pairs</li><li>Normalize text, filter by length and content</li><li>Make word lists from sentences in pairs</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">prepareData</span><span class="token punctuation">(</span>lang1<span class="token punctuation">,</span> lang2<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    input_lang<span class="token punctuation">,</span> output_lang<span class="token punctuation">,</span> pairs <span class="token operator">=</span> readLangs<span class="token punctuation">(</span>lang1<span class="token punctuation">,</span> lang2<span class="token punctuation">,</span> reverse<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Read %s sentence pairs"</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">)</span>    pairs <span class="token operator">=</span> filterPairs<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Trimmed to %s sentence pairs"</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Counting words..."</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> pair <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>        input_lang<span class="token punctuation">.</span>addSentence<span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        output_lang<span class="token punctuation">.</span>addSentence<span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Counted words:"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>input_lang<span class="token punctuation">.</span>name<span class="token punctuation">,</span> input_lang<span class="token punctuation">.</span>n_words<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output_lang<span class="token punctuation">.</span>name<span class="token punctuation">,</span> output_lang<span class="token punctuation">.</span>n_words<span class="token punctuation">)</span>    <span class="token keyword">return</span> input_lang<span class="token punctuation">,</span> output_lang<span class="token punctuation">,</span> pairsinput_lang<span class="token punctuation">,</span> output_lang<span class="token punctuation">,</span> pairs <span class="token operator">=</span> prepareData<span class="token punctuation">(</span><span class="token string">'eng'</span><span class="token punctuation">,</span> <span class="token string">'fra'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Reading lines...Read 135842 sentence pairsTrimmed to 10599 sentence pairsCounting words...Counted words:fra 4345eng 2803[&#39;c est un fondu de musique .&#39;, &#39;he is mad about music .&#39;]</code></pre><h1 id="The-Seq2Seq-Model"><a href="#The-Seq2Seq-Model" class="headerlink" title="The Seq2Seq Model"></a>The Seq2Seq Model</h1><p>A Recurrent Neural Network, or RNN, is a network that operates on a<br>sequence and uses its own output as input for subsequent steps.</p><p>A <code>Sequence to Sequence network &lt;https://arxiv.org/abs/1409.3215&gt;</code><strong>, or<br>seq2seq network, or <code>Encoder Decodernetwork &lt;https://arxiv.org/pdf/1406.1078v3.pdf&gt;</code></strong>, is a model<br>consisting of two RNNs called the encoder and decoder. The encoder reads<br>an input sequence and outputs a single vector, and the decoder reads<br>that vector to produce an output sequence.</p><p>.. figure:: /_static/img/seq-seq-images/seq2seq.png<br>   :alt:</p><p>Unlike sequence prediction with a single RNN, where every input<br>corresponds to an output, the seq2seq model frees us from sequence<br>length and order, which makes it ideal for translation between two<br>languages.</p><p>Consider the sentence “Je ne suis pas le chat noir” → “I am not the<br>black cat”. Most of the words in the input sentence have a direct<br>translation in the output sentence, but are in slightly different<br>orders, e.g. “chat noir” and “black cat”. Because of the “ne/pas”<br>construction there is also one more word in the input sentence. It would<br>be difficult to produce a correct translation directly from the sequence<br>of input words.</p><p>With a seq2seq model the encoder creates a single vector which, in the<br>ideal case, encodes the “meaning” of the input sequence into a single<br>vector — a single point in some N dimensional space of sentences.</p><h2 id="The-Encoder"><a href="#The-Encoder" class="headerlink" title="The Encoder"></a>The Encoder</h2><p>The encoder of a seq2seq network is a RNN that outputs some value for<br>every word from the input sentence. For every input word the encoder<br>outputs a vector and a hidden state, and uses the hidden state for the<br>next input word.</p><p>.. figure:: /_static/img/seq-seq-images/encoder-network.png<br>   :alt:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">EncoderRNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>EncoderRNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden_size <span class="token operator">=</span> hidden_size        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gru <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span><span class="token punctuation">:</span>        embedded <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> embedded        output<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>output<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token punctuation">,</span> hidden    <span class="token keyword">def</span> <span class="token function">initHidden</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="The-Decoder"><a href="#The-Decoder" class="headerlink" title="The Decoder"></a>The Decoder</h2><p>The decoder is another RNN that takes the encoder output vector(s) and<br>outputs a sequence of words to create the translation.</p><p>Simple Decoder<br>^^^^^^^^^^^^^^</p><p>In the simplest seq2seq decoder we use only last output of the encoder.<br>This last output is sometimes called the <em>context vector</em> as it encodes<br>context from the entire sequence. This context vector is used as the<br>initial hidden state of the decoder.</p><p>At every step of decoding, the decoder is given an input token and<br>hidden state. The initial input token is the start-of-string <code>&lt;SOS&gt;</code><br>token, and the first hidden state is the context vector (the encoder’s<br>last hidden state).</p><p>.. figure:: /_static/img/seq-seq-images/decoder-network.png<br>   :alt:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DecoderRNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>DecoderRNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden_size <span class="token operator">=</span> hidden_size        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>output_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gru <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>softmax <span class="token operator">=</span> nn<span class="token punctuation">.</span>LogSoftmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>output<span class="token punctuation">)</span>        output<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>output<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token punctuation">,</span> hidden    <span class="token keyword">def</span> <span class="token function">initHidden</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>I encourage you to train and observe the results of this model, but to<br>save space we’ll be going straight for the gold and introducing the<br>Attention Mechanism.</p><p>Attention Decoder<br>^^^^^^^^^^^^^^^^^</p><p>If only the context vector is passed between the encoder and decoder,<br>that single vector carries the burden of encoding the entire sentence.</p><p>Attention allows the decoder network to “focus” on a different part of<br>the encoder’s outputs for every step of the decoder’s own outputs. First<br>we calculate a set of <em>attention weights</em>. These will be multiplied by<br>the encoder output vectors to create a weighted combination. The result<br>(called <code>attn_applied</code> in the code) should contain information about<br>that specific part of the input sequence, and thus help the decoder<br>choose the right output words.</p><p>.. figure:: <a href="https://i.imgur.com/1152PYf.png" target="_blank" rel="noopener">https://i.imgur.com/1152PYf.png</a><br>   :alt:</p><p>Calculating the attention weights is done with another feed-forward<br>layer <code>attn</code>, using the decoder’s input and hidden state as inputs.<br>Because there are sentences of all sizes in the training data, to<br>actually create and train this layer we have to choose a maximum<br>sentence length (input length, for encoder outputs) that it can apply<br>to. Sentences of the maximum length will use all the attention weights,<br>while shorter sentences will only use the first few.</p><p>.. figure:: /_static/img/seq-seq-images/attention-decoder-network.png<br>   :alt:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AttnDecoderRNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">,</span> dropout_p<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span>MAX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>AttnDecoderRNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden_size <span class="token operator">=</span> hidden_size        self<span class="token punctuation">.</span>output_size <span class="token operator">=</span> output_size        self<span class="token punctuation">.</span>dropout_p <span class="token operator">=</span> dropout_p        self<span class="token punctuation">.</span>max_length <span class="token operator">=</span> max_length        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>self<span class="token punctuation">.</span>output_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>attn <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>max_length<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>attn_combine <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dropout_p<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gru <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>output_size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">,</span> hidden<span class="token punctuation">,</span> encoder_outputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        embedded <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        embedded <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>embedded<span class="token punctuation">)</span>        attn_weights <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>attn<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>embedded<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hidden<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        attn_applied <span class="token operator">=</span> torch<span class="token punctuation">.</span>bmm<span class="token punctuation">(</span>attn_weights<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 encoder_outputs<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>embedded<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> attn_applied<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>attn_combine<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>output<span class="token punctuation">)</span>        output<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>output<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span>        output <span class="token operator">=</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token punctuation">,</span> hidden<span class="token punctuation">,</span> attn_weights    <span class="token keyword">def</span> <span class="token function">initHidden</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="alert alert-info"><h4>Note</h4><p>There are other forms of attention that work around the length  limitation by using a relative position approach. Read about "local  attention" in `Effective Approaches to Attention-based Neural Machine  Translation <https: arxiv.org abs 1508.04025>`__.</https:></p></div><h1 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h1><h2 id="Preparing-Training-Data"><a href="#Preparing-Training-Data" class="headerlink" title="Preparing Training Data"></a>Preparing Training Data</h2><p>To train, for each pair we will need an input tensor (indexes of the<br>words in the input sentence) and target tensor (indexes of the words in<br>the target sentence). While creating these vectors we will append the<br>EOS token to both sequences.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">indexesFromSentence</span><span class="token punctuation">(</span>lang<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>lang<span class="token punctuation">.</span>word2index<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">tensorFromSentence</span><span class="token punctuation">(</span>lang<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    indexes <span class="token operator">=</span> indexesFromSentence<span class="token punctuation">(</span>lang<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    indexes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>EOS_token<span class="token punctuation">)</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>indexes<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>long<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tensorsFromPair</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">:</span>    input_tensor <span class="token operator">=</span> tensorFromSentence<span class="token punctuation">(</span>input_lang<span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    target_tensor <span class="token operator">=</span> tensorFromSentence<span class="token punctuation">(</span>output_lang<span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> target_tensor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Training-the-Model"><a href="#Training-the-Model" class="headerlink" title="Training the Model"></a>Training the Model</h2><p>To train we run the input sentence through the encoder, and keep track<br>of every output and the latest hidden state. Then the decoder is given<br>the <code>&lt;SOS&gt;</code> token as its first input, and the last hidden state of the<br>encoder as its first hidden state.</p><p>“Teacher forcing” is the concept of using the real target outputs as<br>each next input, instead of using the decoder’s guess as the next input.<br>Using teacher forcing causes it to converge faster but <code>when the trainednetwork is exploited, it may exhibitinstability &lt;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.378.4095&amp;rep=rep1&amp;type=pdf&gt;</code>__.</p><p>You can observe outputs of teacher-forced networks that read with<br>coherent grammar but wander far from the correct translation -<br>intuitively it has learned to represent the output grammar and can “pick<br>up” the meaning once the teacher tells it the first few words, but it<br>has not properly learned how to create the sentence from the translation<br>in the first place.</p><p>Because of the freedom PyTorch’s autograd gives us, we can randomly<br>choose to use teacher forcing or not with a simple if statement. Turn<br><code>teacher_forcing_ratio</code> up to use more of it.</p><pre class="line-numbers language-python"><code class="language-python">teacher_forcing_ratio <span class="token operator">=</span> <span class="token number">0.</span><span class="token number">5def</span> train<span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> target_tensor<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> encoder_optimizer<span class="token punctuation">,</span> decoder_optimizer<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> max_length<span class="token operator">=</span>MAX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">:</span>    encoder_hidden <span class="token operator">=</span> encoder<span class="token punctuation">.</span>initHidden<span class="token punctuation">(</span><span class="token punctuation">)</span>    encoder_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    decoder_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    input_length <span class="token operator">=</span> input_tensor<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    target_length <span class="token operator">=</span> target_tensor<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    encoder_outputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>max_length<span class="token punctuation">,</span> encoder<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>    loss <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> ei <span class="token keyword">in</span> range<span class="token punctuation">(</span>input_length<span class="token punctuation">)</span><span class="token punctuation">:</span>        encoder_output<span class="token punctuation">,</span> encoder_hidden <span class="token operator">=</span> encoder<span class="token punctuation">(</span>            input_tensor<span class="token punctuation">[</span>ei<span class="token punctuation">]</span><span class="token punctuation">,</span> encoder_hidden<span class="token punctuation">)</span>        encoder_outputs<span class="token punctuation">[</span>ei<span class="token punctuation">]</span> <span class="token operator">=</span> encoder_output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    decoder_input <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>SOS_token<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>    decoder_hidden <span class="token operator">=</span> encoder_hidden    use_teacher_forcing <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> teacher_forcing_ratio <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> use_teacher_forcing<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Teacher forcing: Feed the target as the next input        for di in range(target_length):            decoder_output, decoder_hidden, decoder_attention = decoder(                decoder_input, decoder_hidden, encoder_outputs)            loss += criterion(decoder_output, target_tensor[di])            decoder_input = target_tensor[di]  # Teacher forcing    else:        # Without teacher forcing: use its own predictions as the next input        for di in range(target_length):            decoder_output, decoder_hidden, decoder_attention = decoder(                decoder_input, decoder_hidden, encoder_outputs)            topv, topi = decoder_output.topk(1)            decoder_input = topi.squeeze().detach()  # detach from history as input            loss += criterion(decoder_output, target_tensor[di])            if decoder_input.item() == EOS_token:                break    loss.backward()    encoder_optimizer.step()    decoder_optimizer.step()    return loss.item() / target_length</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This is a helper function to print time elapsed and estimated time<br>remaining given the current time and progress %.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> timeimport mathdef asMinutes<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>s <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span>    s <span class="token operator">-=</span> m <span class="token operator">*</span> <span class="token number">60</span>    <span class="token keyword">return</span> <span class="token string">'%dm %ds'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">def</span> timeSince<span class="token punctuation">(</span>since<span class="token punctuation">,</span> percent<span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> now <span class="token operator">-</span> since    es <span class="token operator">=</span> s <span class="token operator">/</span> <span class="token punctuation">(</span>percent<span class="token punctuation">)</span>    rs <span class="token operator">=</span> es <span class="token operator">-</span> s    <span class="token keyword">return</span> <span class="token string">'%s (- %s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>asMinutes<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> asMinutes<span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The whole training process looks like this:</p><ul><li>Start a timer</li><li>Initialize optimizers and criterion</li><li>Create set of training pairs</li><li>Start empty losses array for plotting</li></ul><p>Then we call <code>train</code> many times and occasionally print the progress (%<br>of examples, time so far, estimated time) and average loss.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">trainIters</span><span class="token punctuation">(</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> n_iters<span class="token punctuation">,</span> print_every<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> plot_every<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    plot_losses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    print_loss_total <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># Reset every print_every</span>    plot_loss_total <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># Reset every plot_every</span>    encoder_optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>encoder<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span>    decoder_optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>decoder<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span>    training_pairs <span class="token operator">=</span> <span class="token punctuation">[</span>tensorsFromPair<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">)</span>                      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_iters<span class="token punctuation">)</span><span class="token punctuation">]</span>    criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>NLLLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> iter <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n_iters <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        training_pair <span class="token operator">=</span> training_pairs<span class="token punctuation">[</span>iter <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        input_tensor <span class="token operator">=</span> training_pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        target_tensor <span class="token operator">=</span> training_pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        loss <span class="token operator">=</span> train<span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> target_tensor<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span>                     decoder<span class="token punctuation">,</span> encoder_optimizer<span class="token punctuation">,</span> decoder_optimizer<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>        print_loss_total <span class="token operator">+=</span> loss        plot_loss_total <span class="token operator">+=</span> loss        <span class="token keyword">if</span> iter <span class="token operator">%</span> print_every <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            print_loss_avg <span class="token operator">=</span> print_loss_total <span class="token operator">/</span> print_every            print_loss_total <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s (%d %d%%) %.4f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>timeSince<span class="token punctuation">(</span>start<span class="token punctuation">,</span> iter <span class="token operator">/</span> n_iters<span class="token punctuation">)</span><span class="token punctuation">,</span>                                         iter<span class="token punctuation">,</span> iter <span class="token operator">/</span> n_iters <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> print_loss_avg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> iter <span class="token operator">%</span> plot_every <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            plot_loss_avg <span class="token operator">=</span> plot_loss_total <span class="token operator">/</span> plot_every            plot_losses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>plot_loss_avg<span class="token punctuation">)</span>            plot_loss_total <span class="token operator">=</span> <span class="token number">0</span>    showPlot<span class="token punctuation">(</span>plot_losses<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Plotting-results"><a href="#Plotting-results" class="headerlink" title="Plotting results"></a>Plotting results</h2><p>Plotting is done with matplotlib, using the array of loss values<br><code>plot_losses</code> saved while training.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>switch_backend<span class="token punctuation">(</span><span class="token string">'agg'</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>ticker <span class="token keyword">as</span> ticker<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">showPlot</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># this locator puts ticks at regular intervals</span>    loc <span class="token operator">=</span> ticker<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span>base<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>loc<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1><p>Evaluation is mostly the same as training, but there are no targets so<br>we simply feed the decoder’s predictions back to itself for each step.<br>Every time it predicts a word we add it to the output string, and if it<br>predicts the EOS token we stop there. We also store the decoder’s<br>attention outputs for display later.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> sentence<span class="token punctuation">,</span> max_length<span class="token operator">=</span>MAX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        input_tensor <span class="token operator">=</span> tensorFromSentence<span class="token punctuation">(</span>input_lang<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>        input_length <span class="token operator">=</span> input_tensor<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        encoder_hidden <span class="token operator">=</span> encoder<span class="token punctuation">.</span>initHidden<span class="token punctuation">(</span><span class="token punctuation">)</span>        encoder_outputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>max_length<span class="token punctuation">,</span> encoder<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>        <span class="token keyword">for</span> ei <span class="token keyword">in</span> range<span class="token punctuation">(</span>input_length<span class="token punctuation">)</span><span class="token punctuation">:</span>            encoder_output<span class="token punctuation">,</span> encoder_hidden <span class="token operator">=</span> encoder<span class="token punctuation">(</span>input_tensor<span class="token punctuation">[</span>ei<span class="token punctuation">]</span><span class="token punctuation">,</span>                                                     encoder_hidden<span class="token punctuation">)</span>            encoder_outputs<span class="token punctuation">[</span>ei<span class="token punctuation">]</span> <span class="token operator">+=</span> encoder_output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        decoder_input <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>SOS_token<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># SOS        decoder_hidden = encoder_hidden        decoded_words = []        decoder_attentions = torch.zeros(max_length, max_length)        for di in range(max_length):            decoder_output, decoder_hidden, decoder_attention = decoder(                decoder_input, decoder_hidden, encoder_outputs)            decoder_attentions[di] = decoder_attention.data            topv, topi = decoder_output.data.topk(1)            if topi.item() == EOS_token:                decoded_words.append('&lt;EOS>')                break            else:                decoded_words.append(output_lang.index2word[topi.item()])            decoder_input = topi.squeeze().detach()        return decoded_words, decoder_attentions[:di + 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>We can evaluate random sentences from the training set and print out the<br>input, target, and output to make some subjective quality judgements:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">evaluateRandomly</span><span class="token punctuation">(</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        pair <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        output_words<span class="token punctuation">,</span> attentions <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        output_sentence <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output_words<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> output_sentence<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Training-and-Evaluating"><a href="#Training-and-Evaluating" class="headerlink" title="Training and Evaluating"></a>Training and Evaluating</h1><p>With all these helper functions in place (it looks like extra work, but<br>it makes it easier to run multiple experiments) we can actually<br>initialize a network and start training.</p><p>Remember that the input sentences were heavily filtered. For this small<br>dataset we can use relatively small networks of 256 hidden nodes and a<br>single GRU layer. After about 40 minutes on a MacBook CPU we’ll get some<br>reasonable results.</p><p>.. Note::<br>   If you run this notebook you can train, interrupt the kernel,<br>   evaluate, and continue training later. Comment out the lines where the<br>   encoder and decoder are initialized and run <code>trainIters</code> again.</p><pre class="line-numbers language-python"><code class="language-python">hidden_size <span class="token operator">=</span> 256encoder1 <span class="token operator">=</span> EncoderRNN<span class="token punctuation">(</span>input_lang<span class="token punctuation">.</span>n_words<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>attn_decoder1 <span class="token operator">=</span> AttnDecoderRNN<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> output_lang<span class="token punctuation">.</span>n_words<span class="token punctuation">,</span> dropout_p<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>trainIters<span class="token punctuation">(</span>encoder1<span class="token punctuation">,</span> attn_decoder1<span class="token punctuation">,</span> <span class="token number">75000</span><span class="token punctuation">,</span> print_every<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1m 42s (- 23m 50s) (5000 6%) 2.89263m 20s (- 21m 44s) (10000 13%) 2.28444m 58s (- 19m 54s) (15000 20%) 1.95386m 37s (- 18m 13s) (20000 26%) 1.70868m 15s (- 16m 31s) (25000 33%) 1.51529m 53s (- 14m 50s) (30000 40%) 1.332411m 32s (- 13m 11s) (35000 46%) 1.221113m 11s (- 11m 32s) (40000 53%) 1.080514m 50s (- 9m 53s) (45000 60%) 0.964816m 29s (- 8m 14s) (50000 66%) 0.884618m 8s (- 6m 35s) (55000 73%) 0.779919m 47s (- 4m 56s) (60000 80%) 0.708521m 25s (- 3m 17s) (65000 86%) 0.654823m 5s (- 1m 38s) (70000 93%) 0.568424m 44s (- 0m 0s) (75000 100%) 0.5322</code></pre><pre class="line-numbers language-python"><code class="language-python">evaluateRandomly<span class="token punctuation">(</span>encoder1<span class="token punctuation">,</span> attn_decoder1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&gt; je reste avec toi .= i m staying with you .&lt; i m staying with you . &lt;EOS&gt;&gt; je ne suis plus ce que j etais .= i m not what i used to be .&lt; i m not what i have two . &lt;EOS&gt;&gt; il est derriere moi .= he s after me .&lt; he s after me . &lt;EOS&gt;&gt; tu es la meilleure .= you re the best .&lt; you re the best . &lt;EOS&gt;&gt; je vais a un concert la semaine prochaine .= i am going to a concert next week .&lt; i am going to go next next week . &lt;EOS&gt;&gt; je suis en pause dejeuner .= i m on my lunch break .&lt; i m on my lunch . &lt;EOS&gt;&gt; tu as tort dans ce cas .= you re wrong in this case .&lt; you re wrong in this case . &lt;EOS&gt;&gt; je m y habitue .= i m getting used to it .&lt; i m getting on it . &lt;EOS&gt;&gt; je suis dispose a faire mes excuses .= i m willing to apologize .&lt; i m willing to go all . &lt;EOS&gt;&gt; il est habile a trouver des pretextes .= he is clever at making excuses .&lt; he is at certain of us . &lt;EOS&gt;</code></pre><p>​    </p><h2 id="Visualizing-Attention"><a href="#Visualizing-Attention" class="headerlink" title="Visualizing Attention"></a>Visualizing Attention</h2><p>A useful property of the attention mechanism is its highly interpretable<br>outputs. Because it is used to weight specific encoder outputs of the<br>input sequence, we can imagine looking where the network is focused most<br>at each time step.</p><p>You could simply run <code>plt.matshow(attentions)</code> to see attention output<br>displayed as a matrix, with the columns being input steps and rows being<br>output steps:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">%</span>matplotlib inlineoutput_words<span class="token punctuation">,</span> attentions <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>    encoder1<span class="token punctuation">,</span> attn_decoder1<span class="token punctuation">,</span> <span class="token string">"elle a cinq ans de moins que moi ."</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>matshow<span class="token punctuation">(</span>attentions<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;matplotlib.image.AxesImage at 0x7fd35181a810&gt;</code></pre><p>​<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="seq2seq_translation_files/seq2seq_translation_43_1.png" alt="png"><br>​    </p><p>For a better viewing experience we will do the extra work of adding axes<br>and labels:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">showAttention</span><span class="token punctuation">(</span>input_sentence<span class="token punctuation">,</span> output_words<span class="token punctuation">,</span> attentions<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Set up figure with colorbar</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>    cax <span class="token operator">=</span> ax<span class="token punctuation">.</span>matshow<span class="token punctuation">(</span>attentions<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'bone'</span><span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>cax<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Set up axes</span>    ax<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span> <span class="token operator">+</span> input_sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span>                       <span class="token punctuation">[</span><span class="token string">'&lt;EOS>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_yticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span> <span class="token operator">+</span> output_words<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Show label at every tick</span>    ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>ticker<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>ticker<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">evaluateAndShowAttention</span><span class="token punctuation">(</span>input_sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    output_words<span class="token punctuation">,</span> attentions <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>        encoder1<span class="token punctuation">,</span> attn_decoder1<span class="token punctuation">,</span> input_sentence<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'input ='</span><span class="token punctuation">,</span> input_sentence<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output ='</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output_words<span class="token punctuation">)</span><span class="token punctuation">)</span>    showAttention<span class="token punctuation">(</span>input_sentence<span class="token punctuation">,</span> output_words<span class="token punctuation">,</span> attentions<span class="token punctuation">)</span>evaluateAndShowAttention<span class="token punctuation">(</span><span class="token string">"elle a cinq ans de moins que moi ."</span><span class="token punctuation">)</span>evaluateAndShowAttention<span class="token punctuation">(</span><span class="token string">"elle est trop petit ."</span><span class="token punctuation">)</span>evaluateAndShowAttention<span class="token punctuation">(</span><span class="token string">"je ne crains pas de mourir ."</span><span class="token punctuation">)</span>evaluateAndShowAttention<span class="token punctuation">(</span><span class="token string">"c est un jeune directeur plein de talent ."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>input = elle a cinq ans de moins que moi .output = she s five years younger than i am . &lt;EOS&gt;input = elle est trop petit .output = she is too slow . &lt;EOS&gt;input = je ne crains pas de mourir .output = i m not afraid that to die . &lt;EOS&gt;/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:10: UserWarning: FixedFormatter should only be used together with FixedLocator  # Remove the CWD from sys.path while we load stuff./opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:11: UserWarning: FixedFormatter should only be used together with FixedLocator  # This is added back by InteractiveShellApp.init_path()input = c est un jeune directeur plein de talent .output = he s a talented young . &lt;EOS&gt;</code></pre><h1 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h1><ul><li><p>Try with a different dataset</p><ul><li>Another language pair</li><li>Human → Machine (e.g. IOT commands)</li><li>Chat → Response</li><li>Question → Answer</li></ul></li><li><p>Replace the embeddings with pre-trained word embeddings such as word2vec or<br>GloVe</p></li><li><p>Try with more layers, more hidden units, and more sentences. Compare<br>the training time and results.</p></li><li><p>If you use a translation file where pairs have two of the same phrase<br>(<code>I am test \t I am test</code>), you can use this as an autoencoder. Try<br>this:</p><ul><li>Train as an autoencoder</li><li>Save only the Encoder network</li><li>Train a new Decoder for translation from there</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python">evaluateAndShowAttention<span class="token punctuation">(</span><span class="token string">"je vous aime"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>input = je vous aimeoutput = i m losing it &lt;EOS&gt;/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:10: UserWarning: FixedFormatter should only be used together with FixedLocator  # Remove the CWD from sys.path while we load stuff./opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:11: UserWarning: FixedFormatter should only be used together with FixedLocator  # This is added back by InteractiveShellApp.init_path()</code></pre><pre class="line-numbers language-python"><code class="language-python">evaluateAndShowAttention<span class="token punctuation">(</span><span class="token string">"elle a cinq ans de moins que moi"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>input = elle a cinq ans de moins que moioutput = she s five years younger than i am . &lt;EOS&gt;/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:10: UserWarning: FixedFormatter should only be used together with FixedLocator  # Remove the CWD from sys.path while we load stuff./opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:11: UserWarning: FixedFormatter should only be used together with FixedLocator  # This is added back by InteractiveShellApp.init_path()</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 模型保存</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>encoder1<span class="token punctuation">,</span> <span class="token string">'/kaggle/working/encoder1.pkl'</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>attn_decoder1<span class="token punctuation">,</span> <span class="token string">'/kaggle/working/attn_decoder1.pkl'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> NLP </tag>
            
            <tag> seq2seq_translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex常用公式（龟速更新）</title>
      <link href="/2021/09/18/latex-chang-yong-gong-shi-gui-su-geng-xin/"/>
      <url>/2021/09/18/latex-chang-yong-gong-shi-gui-su-geng-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>实际上latex公式就像markdown一样，不需要格外去记，但是想找的时候有时候并不容易找。所以这里就使用这个来记录一下latex有关公式，以防忘记。</p><p>另外这一篇博文其实整理的极为详细了：<a href="https://blog.csdn.net/NSJim/article/details/109045914" target="_blank" rel="noopener">https://blog.csdn.net/NSJim/article/details/109045914</a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>使用<code>$</code>，即行中公式时，数学公式与<code>$</code>连接处不要有空格，否则公式不会显示。即<code>$</code>  数学公式  <code>$</code> 不显示公式。</li><li>使用<code>$$</code>，即居中公式时，数学公式与<code>$$</code>连接处可以有空格。</li><li>使用<code>$$</code>时，上方要空一行。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 指令集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
            <tag> 公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>backbone neck and head</title>
      <link href="/2021/09/16/backbone-neck-and-head/"/>
      <url>/2021/09/16/backbone-neck-and-head/</url>
      
        <content type="html"><![CDATA[<p>基于深度学习的现在目标检测算法中有三个组件：Backbone、Neck和Head，乍一看很让人不理解：</p><ul><li>Backbone, 译作骨干网络，主要指用于特征提取的，已在大型数据集(例如ImageNet|COCO等)上完成预训练，拥有预训练参数的卷积神经网络，例如：ResNet-50、Darknet53等</li><li>Head，译作检测头，主要用于预测目标的种类和位置(bounding boxes)</li><li>在Backone和Head之间，会添加一些用于收集不同阶段中特征图的网络层，通常称为Neck。</li></ul><p>简而言之，基于深度学习的目标检测模型的结构是这样的：输入-&gt;主干-&gt;脖子-&gt;头-&gt;输出。主干网络提取特征，脖子提取一些更复杂的特征，然后头部计算预测输出</p><p><a href="https://imgtu.com/i/4u9aYF" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/16/4u9aYF.png" alt="目标检测的网络结构"></a></p><p>作者：LabVIEW_Python<br>链接：<a href="https://www.jianshu.com/p/014e76d3b614" target="_blank" rel="noopener">https://www.jianshu.com/p/014e76d3b614</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> 名词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文之YOLO系列</title>
      <link href="/2021/09/16/lun-wen-zhi-yolo-xi-lie/"/>
      <url>/2021/09/16/lun-wen-zhi-yolo-xi-lie/</url>
      
        <content type="html"><![CDATA[<p>本博客记录了自己的一些YOLO论文的阅读。</p><h2 id="YOLOv1"><a href="#YOLOv1" class="headerlink" title="YOLOv1"></a>YOLOv1</h2><blockquote><p>论文地址：<a href="https://arxiv.org/abs/1506.02640" target="_blank" rel="noopener">https://arxiv.org/abs/1506.02640</a></p><p>论文翻译版：<a href="https://zhuanlan.zhihu.com/p/35416826" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35416826</a></p><p>就随便记录一些想法。</p></blockquote><h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>作者大致吹了一下，我看得早了，没有记录。</p><h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><p>前面的也看过去了，没有来得及记录，知道后来看到了关于several benefits over traditional methods of object detection的一些东西才开始记录。</p><p>First,  YOLO is very fast. Since they frame detection as a regression problem, they don’t need a pipeline. The simply run their neural network on a new image at test time to predict. 他们可以实时处理图片。小于25milliseconds的延迟。然后另外就是2倍的平均准确率比起其他的系统。在Titan X GPU上可以处理45 frames per second. 一个快速的版本可以处理超过150fps。</p><p>Second, 不同于传统的滑动窗口与区域检测技术，YOLO更加具有全局性（<del>我瞎编的</del>）？就是更容易连起上下比较连贯的（contextual）图像信息。特意提到了关于Fast RCNN,它会将一些背景块（background patches）错误的认为是物体目标（objects）。因为FastRCNN不能够看到更加大块的物体信息。关于这种的错误率比Fast RCNN<strong>少了一半</strong>！<strong><del>小小吐槽一下，果然大家发论文都会格外强调别人的缺点，放大自己的优点……</del></strong></p><blockquote><p>coordinate   n.坐标,套装  v.使协调，搭配   contextual 上下文的 ，连贯的  patches n.块，补丁</p></blockquote><p>Third, 更好的泛化能力，这个段落最好懂。在自然图像上训练然后再艺术品上测试的时候，YOLO outperforms top detection methods like DPM and R-CNN <strong>by a wide margin</strong>.看来RCNN反复被鞭尸……</p><p>Last， 终于开始承认自己的不足了：准确率落后于SOTA，lags behind stoa detection systems in accuracy.  尽管可以快速认出物体但是很困难精确定位到一些物体，尤其是小物体（stuggles to precisely localize some objects, especially small ones.)  , 作者也说到以后会做一些进一步的tradeoffs。</p><h3 id="2-Unified-Detection"><a href="#2-Unified-Detection" class="headerlink" title="2. Unified Detection"></a>2. Unified Detection</h3><ul><li>将图像分为S×S的网格区域（grids)，如果一个物体中心再某格中则该grid负责预测该物体。</li></ul><blockquote><p>simultaneously adv.同时地，一壁</p></blockquote><ul><li>每个grid cells预测B个bboxes于confidence scores(reflect how confident the model is that the box contains an object and also how accurate it thinks the box is that it predicts )</li><li>每个bbox包含5个predictions: x, y, w, h and confidence. The (x, y) coordinates represent the center of the box. The  width and height are predicted relative to the whole image. Finally the confidence prediction  represents the IOU(Intersection over union between predicted box and the  ground box)</li><li>每个grid cell单元格只选取一个bbox来预测内含物体的类别，regardless of the number of boxes B.</li><li>最后测试环节我们使用类别概率（the conditional class probabilities）和框概率（ and the individual box confidence predictions）的乘积来评估：<ul><li>$$Pr(Class | Object) * Pr(Object) * IOU(truth, pred)  = Pr(Class_i) * IOU(truth, pred)$$​</li><li>这个scores可以正好的涵盖了类别出现在该box还有预测的框的适应能力。（encode both the probability of that class appearing in the box and how well the predicted box fits the object）</li></ul></li></ul><p><a href="https://imgtu.com/i/4MhVzD" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/17/4MhVzD.png" alt="Figure 2: The Model"></a></p><p>Our system models detection as a regression problem. It divides the image into an S × S grid and for each<br>grid cell predicts B bounding boxes, confidence for those boxes, and C class probabilities. These predictions are encoded as an S × S × (B ∗ 5 + C) tensor.</p><ul><li><p>以上的话说得非常明显了，指的是我们每个grid cell都会负责一个预测的区域，然后这里分为S×S个grid cell, 最后得到的tensor形状为 S × S × (B ∗ 5 + C) ，这样一来我们的最终结果就得到了。</p></li><li><p>当然最后也给出了对于不同数据集的不同S， C，B的取值：For evaluating YOLO on PASCAL VOC, we use S = 7, B = 2. PASCAL VOC has 20 labelled classes so C = 20. Our final prediction is a 7 × 7 × 30 tensor.</p></li></ul><h3 id="2-1-Network-Design"><a href="#2-1-Network-Design" class="headerlink" title="2.1 Network Design"></a>2.1 Network Design</h3><ul><li>Evaluate it on the PASCAL VOC detection dataset.</li><li>the initial  convolutional layers of the  network extract features from the image  while the fully connected layers predict the out put probabilities and coordinates</li><li>inspired by the GoogLeNet model for image classification. The network has 24 convolutional layers followed by 2 fully connected layers.</li><li>No Inception modules!</li></ul><p><a href="https://imgtu.com/i/4l6uCD" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/18/4l6uCD.png" alt="NetWork"></a></p><ul><li>The final output of the network is the 7×7×30 tensor of predictions.</li></ul><p>输入图像大小为448<em>448，经过若干个卷积层与池化层，变为7</em>7<em>1024张量（图一中倒数第三个立方体），最后经过两层全连接层，输出张量维度为7</em>7<em>30，这就是Yolo v1的整个神经网络结构，和一般的卷积物体分类网络没有太多区别，最大的不同就是：分类网络最后的全连接层，一般连接于一个一维向量，向量的不同位代表不同类别，而这里的输出向量是一个三维的张量（7</em>7*30）。上图中Yolo的backbone网络结构，受启发于GoogLeNet，也是v2、v3中Darknet的先锋。本质上来说没有什么特别，没有使用BN层，用了一层Dropout。除了最后一层的输出使用了线性激活函数，其他层全部使用Leaky Relu激活函数。网络结构没有特别的东西，不再赘述。</p><h3 id="2-2Training"><a href="#2-2Training" class="headerlink" title="2.2Training"></a>2.2Training</h3><blockquote><p><strong>denote</strong> v.标志， 表示    </p><p><strong>penalize</strong>  v.惩罚</p><p><strong>fine-grained</strong>: (chiefly of wood) having a fine or delicate arrangement of fibers.</p><ul><li><p>(chiefly of rock) consisting of small particles.</p></li><li><p>involving great attention to detail.</p><p>*”fine-grained analysis”*</p></li></ul><p><strong>parametrize</strong> v. describe or represent in terms of a parameter or parameters.  *”the nuclear charge distribution can be parameterized directly using a suitable mathematical form”*</p><p><strong>align</strong> v. 1.对齐place or arrange (things) in a straight line.  2. give support to (a person, organization, or cause).</p><p><strong>diverge</strong>  v. (of a road, route, or line) separate from another route, especially a main one, and go in a different direction.  *”the flight path diverged from the original flight plan”*</p><p><strong>early on</strong>: phrase of early, at an initial stage in a particular time or period. *”they discovered early on that the published data were wrong”*</p><p><strong>remedy</strong>: v. set right (an undesirable situation).*”by the time a problem becomes patently obvious, it may be almost too late to remedy it”*</p><p><strong>coefficient:</strong> n. a numerical or constant quantity placed before and multiplying the variable in an algebraic expression (e.g. 4 in 4x y).</p><p><strong>saturation</strong>: n. (饱和)the state or process that occurs when no more of something can be absorbed, combined with, or added. *”the springs on the left slope of the hill lie below the level of permanent saturation”*</p></blockquote><ul><li>这里看到了pretraining, 预训练这个概念，所以查了查，看<a href="https://blog.csdn.net/qq_41821678/article/details/106113870" target="_blank" rel="noopener">这里</a></li><li>首先作者花了一周的时间训练前20个卷积层并且在ImageNet 2012验证集上获得了单一裁剪图像88%的top-5准确率，与Caffe模型池中的GoogLeNet模型相当。</li><li>接着对该预训练模型迁移到我们的目标检测中去(convert the model to perform detection)</li><li>因为目标检测一些”fine-grained”视觉信息，所以我们把这个输入图像分辨率从224×224提升至448×448</li><li>模型的最后一层预测类概率和边界框坐标。我们通过图像宽度和高度来规范边界框的宽度和高度，使它们落在0和1之间。我们将边界框x和y坐标参数化为特定网格单元位置的偏移量，所以它们的值被限定在在0和1之间。</li><li>模型的最后一层使用线性激活函数，而所有其它的层使用下面的leaky rectified activation：</li><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-e75e88cd05e31c1c0c2575397cf8a46a_1440w.jpg" alt="leaky linear activation"></li><li>我们对模型输出的平方和误差(sum-squared error)进行优化。我们选择使用平方和误差，是因为它易于优化(optimize)，但是它并不完全符合(not perfectly align with)最大化平均精度（average precision）的目标。它给分类误差(classification)与定位(localization)误差的权重是一样的，这点可能并不理想。另外，每个图像都有很多网格单元并没有包含任何目标，这将这些单元格的“置信度”分数推向零，通常压制了包含目标的单元格的梯度。这可能导致模型不稳定，从而导致训练在早期就发散。</li><li>为了弥补这个情况（to remedy this)，我们选择增加我们的定位误差损失，然后降低我们的分类损失。我们使用了两个parameters， $λ<em>{coord} = 5, \lambda</em>{noobj} = .5$</li><li>平方和误差对大框和小框的误差权衡是一样的，而我们的错误指标应该要体现出，大框的小偏差的重要性不如小框的小偏差的重要性(<em>small deviations in large boxes matter less than in small boxes</em>)。为了部分解决(<em>partially address this</em>)这个问题，我们直接预测边界框宽度和高度的平方根(the square root)，而不是宽度和高度。</li><li>YOLO每个grid cell预测很多个bbox，训练时我们不是所有的bbox都会负责物体，而是只有一个会负责物体的检测，这里就会选用我们和GT的IOU最高的bbox承担检测物体的任务。</li><li>损失函数我们使用这个multi-part的loss function:<a href="https://imgtu.com/i/43icpq" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/19/43icpq.png" alt="Loss Function"></a></li></ul><ul><li>这里的loss function比较复杂，<strong>同时也是非常重要的请认真研究一下</strong>，我们可以看出这里的符号花体$1_{i}^{obj}$denotes  if object appears in cell $i$, and $1_{ij}^{obj}$ denotes that the $j$th bbox predictor in cell $i$​ is “responsible” for that prediction.</li><li>和组长讨论了讨论，注意，这里论文里的损失函数这个公式没有任何废话，全都是非常关键的符号。这些东西和前面很多你看着比较晕、或者看的比较不理解的地方都联系上了，可以说这个是“非常有道理”的一个损失函数。同时也是经过精心设计、很巧妙地一个函数。</li><li>虽然我目前没有完全理解，但是理解了个大部分，剩下的部分可能目前还有一些困难，需要进一步的了解，另外，关于我们localization error 和 classification error的部分仍然需要进一步去探究（<del>这部分我找到了四篇文章<a href="https://stats.stackexchange.com/questions/481332/yolo-v1-why-we-weigh-localization-error-more-than-classification-error" target="_blank" rel="noopener">1</a>, <a href="https://stats.stackexchange.com/questions/481956/yolo-v1-how-gradients-in-grids-with-no-objects-overpower" target="_blank" rel="noopener">2</a>, <a href="https://stackoverflow.com/questions/49535301/understanding-the-loss-function-in-yolo-v1-research-paper" target="_blank" rel="noopener">3</a>， 个人认为第<a href="https://medium.com/adventures-with-deep-learning/yolo-v1-part3-78f22bd97de4" target="_blank" rel="noopener">4</a>篇更具有可读性</del>），以及该损失函数$C_i$究竟代表什么这些东西， 最后的关于$p_i(c)$的这个损失函数，都有待进一步去研究讨论。</li><li>最终终于理解了！这里面主要是又看了看上边的第四篇文章以及我们的这一篇<a href="https://www.cnblogs.com/sddai/p/14760055.html" target="_blank" rel="noopener">中文博客</a>, 这一篇博客主要带给我的收获就是关于这个C实际上代表的才是置信度，而p代表的才是我们的那个关于每一类的那个概率的预测。其他的就是再读一遍前前后后关于这个函数的介绍以及前面的一些东西，顿时就有了一种茅塞顿开的感觉，这种感觉还是非常好的🎈</li></ul><ul><li><p>解决了loss function 的问题之后后面就是有关训练的过程了，实际上这方面还是非常简单的，这里直接摘录原文就🆗</p></li><li><blockquote><p>We train the network for about 135 epochs on the train-<br>ing and validation data sets from PASCAL VOC 2007 and 2012</p><p>When testing on 2012 we also include the VOC 2007<br>test data for training. Throughout training we use a batch<br>size of 64, a momentum of 0.9 and a decay of 0.0005.<br>Our learning rate schedule is as follows: For the first<br>epochs we slowly raise the learning rate from  $10^{−3}$ to  $10^{−2}$.<br>If we start at a high learning rate our model often diverges<br>due to unstable gradients. We continue training with $10^{−2}$<br>for 75 epochs, then 10−3 for 30 epochs, and finally $10^{−4}$<br>for 30 epochs.<br>To avoid overfitting we use dropout and extensive data<br>augmentation. A dropout layer with rate = .5 after the first<br>connected layer prevents co-adaptation between layers [18].<br>For data augmentation we introduce random scaling and<br>translations of up to 20% of the original image size. We<br>also randomly adjust the exposure and saturation of the im-<br>age by up to a factor of 1.5 in the HSV color space.</p></blockquote></li></ul><h3 id="2-3Inference"><a href="#2-3Inference" class="headerlink" title="2.3Inference"></a>2.3Inference</h3><blockquote><p><strong>inference</strong>: n. a conclusion reached on the basis of evidence and reasoning.   *”researchers are entrusted with drawing inferences from the data”*</p><p><strong>spatial:</strong> adj. relating to or occupying space.  *”the spatial distribution of population”*</p></blockquote><ul><li>YOLO非常快，因为它只需要一个网络的评估，不像是RCNN系列的算法。</li><li>另外作者还特意提到了，每一个物体最后基本上都会有一个grid cell来负责预测， 但是有时候，比如说物体本身比较大的时候或者是一些横跨多个grid cell的时候，就会有着许多的grid cell来预测这个框，这样的话我们可以选用NMS！</li><li>NMS, Non-maximal suppression可以用来剪掉多余的多个检测框。但是这里可以看出实际上NMS就是个补充而已，并不是一个我们说是必须的，就像在R-CNN或是DPM这里一样。非极大抑制最多增加2-3%mAP这种。</li></ul><h3 id="Limitations-of-YOLO"><a href="#Limitations-of-YOLO" class="headerlink" title="Limitations of YOLO"></a>Limitations of YOLO</h3><blockquote><p><strong>constraints</strong>: n. a limitation or restriction. *”time constraints make it impossible to do everything”*</p><p><strong>aspect ratio:</strong> n. 长宽比</p><p><strong>generalize：</strong> v. 1. make a general or broad statement by inferring from specific cases. *”it is not easy to generalize about the poor”* 2. make (something) more widespread or widely applicable. *”attempts to generalize an elite education”*</p><p><strong>configurations:</strong> n.  (配置)an arrangement of elements in a particular form, figure, or combination *”the broad configuration of the economy remains capitalist”* </p><p><strong>coarse:</strong> adj. rough or loose in texture or grain.</p><p><strong>off-the-shelf：</strong> adj. (现成的)not designed or made to order but taken from existing stock or supplies.  <strong>“off-the-shelf software packages”</strong></p></blockquote><blockquote><p><strong>So What Does Aspect Ratio(长宽比) Mean?</strong></p><p>An aspect ratio is an attribute that describes the relationship between the width and height of an image. Aspect ratio is expressed by the symbolic notation: X:Y. The values of X and Y are not the actual width and height of the image, but describe the relationship between them.</p></blockquote><ul><li>因为YOLO对于我们的预测bbox的约束(strong spatial constraints)还是很强的，每个grid cell只可以预测两个bbox(B通常为2)并且只可以预测一个种类，也就是一个物体。这就约束了我们相邻的一些物体，对于离得很近的物体，它的预测就比较难办。该模型因此也很难检测我们的成群的小物体，比如说成群的鸟（flocks of bird)</li><li>另外一个问题，就是我们的关于学习相关的bbox是根据的我们的数据，那么我们肯定会对一些不寻常长宽比（aspect ratio）或是配置（configuration）不太寻常的物体很难识别清楚.</li><li>另外一点就是我们的模型仍旧使用相对比较粗糙的特征来训练bbox，因为我们有着太多的downsampling层在这里了，如果过分下采样的话我们的模型容易预测的不是很好，这一点当然可以理解，但是论文的意思似乎是另一个方面的意思，这几个需要进一步的去思考。</li><li>最后一点我们训练loss平等对待小bbox和大bbox， 主要error来源是错误的位置。</li></ul><p>总结YOLOv1要点：</p><ul><li><p>YOLO: 45 FPS，Fast YOLO: 155 FPS</p></li><li><p>将图像分成S*S的网格，每个网格预测B个bbox，对每个bbox预测其置信度confidence（IOU）</p></li><li><p>每个网格预测C个条件类别概率，C是类别数目，之预测一组C个条件概率，无论B的取值为多少</p></li><li><p>对VOC，S=7，B=2，C=20，网络输出为7<em>7</em>30，其中30=20+（xywh+confidence）*B</p></li><li><p>24卷积+2全连接</p></li><li><p>训练和测试阶段的分辨率不同：detection需要细粒度的视觉信息，因此把输入分辨率从224<em>224提高到448</em>448</p></li><li><p>leaky RELU</p></li><li><p>lambda参数对loss进行加权：增加bounding box坐标产生的loss，减少不包含物体的预测结果loss，为两个loss添加权重</p></li><li><p>预测bounding box的h，w的平方根，而不是直接预测bbox，平方和将大box和小box的error看做平等的</p></li><li><p>数据增强和NMS</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLO </tag>
            
            <tag> 论文解读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>faster rcnn的编解码过程</title>
      <link href="/2021/09/16/faster-rcnn-de-bian-jie-ma-guo-cheng/"/>
      <url>/2021/09/16/faster-rcnn-de-bian-jie-ma-guo-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>————————————————<br>版权声明：本文为CSDN博主「shuyeah」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_43227526/article/details/108018271" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43227526/article/details/108018271</a></p></blockquote><h1 id="Faster-RCNN网络的解码过程和编码过程"><a href="#Faster-RCNN网络的解码过程和编码过程" class="headerlink" title="Faster RCNN网络的解码过程和编码过程"></a>Faster RCNN网络的解码过程和编码过程</h1><h2 id="Faster-RCNN网络的整体思路："><a href="#Faster-RCNN网络的整体思路：" class="headerlink" title="Faster RCNN网络的整体思路："></a>Faster RCNN网络的整体思路：</h2><p>Faster RCNN网络是一种two-stage的目标检测算法。<br>算法实现思路首先将输入的图片resize成短边为600的大小，传入到主干特征提取网络中，（主干特征提取网络可以使用ResNet、VGG、AlexNet等），提取到的特征层可以看做是在原图像上划分不同的网格(例如，输入图片大小为600×600，得到特征层大小为38×38，可以看做在原图片上划分成38×38的网格)。RPN网络（区域建议网络）可以看做是一个3×3的卷积进行特征提取，将特征提取的结果分别经过一个1×1的卷积通道数是9，还有一个1×1的卷积通道数是36。这两个卷积输出的结果分别表示的是每一个网格对应9个先验框，每一个先验框中是否包含物体还有每一个先验框的调整参数。<br>调整以后的先验框称为建议框，也就是粗略的筛选，接着将建议框输入到Roipooling网络中进行精细的筛选。利用建议框在共享特征层上进行截取，讲解去到的局部特征层resize成相同的大小，用分类bbox_pred网络和回归网络cls_pred，判断建议框中是否存在物体还有建议框的调整参数，得到最终的预测结果。</p><h2 id="1、解码过程-预测过程"><a href="#1、解码过程-预测过程" class="headerlink" title="1、解码过程(预测过程)"></a>1、解码过程(预测过程)</h2><h3 id="解码过程分为两部分："><a href="#解码过程分为两部分：" class="headerlink" title="解码过程分为两部分："></a>解码过程分为两部分：</h3><p>对先验框进行调整的解码过程</p><p>对建议框进行调整的解码过程</p><h4 id="1-对先验框进行调整"><a href="#1-对先验框进行调整" class="headerlink" title="1.对先验框进行调整"></a>1.对先验框进行调整</h4><p>RPN网络的输出结果进行解码，对先验框进行调整得到建议框。<br>首先提取原始图片的宽高、复制原始图片。把图片的较短边固定为600 大小，对图片进行resize操作，并且进行归一化预处理操作，将原始图片转化成numpy 的格式。<br>在函数detection_out函数中将rpn网络的输出结果进行解码：首先通过置信度对先验框进行筛选；在函数中调用decode_boxes函数解码，decode_boxes函数首先提取出先验框的中心点坐标和宽高，然后对rpn网络的输出结果中的调整参数解码，作用于先验框，得到调整以后的先验框。把先验框的格式转化成左上角和右下角坐标的格式堆叠，完成解码。<br>对于建议框，用置信度和iou重合程度来筛选，返回的结果转化成小数的形式存放在R中。</p><h4 id="2-对建议框进行调整"><a href="#2-对建议框进行调整" class="headerlink" title="2.对建议框进行调整"></a>2.对建议框进行调整</h4><p>利用classifier网络的输出结果对建议框进行调整得到最终的预测框。<br>R中存放的是建议框，每次输入到ROI_Pooling网络的建议框数量为32，不能被32整除的用0来补全。<br>用置信度对建议框筛选，用建议框和共享特征层得到最终的预测框结果。classifier网络输出结果中的调整参数解码，计算出中点坐标和宽高的调整参数，作用于建议框，得到最终的预测框。<br>将最终预测框的结果转化为小数形式，用非极大值抑制进行筛选，结果存放在result中。</p><h2 id="2、编码过程（训练过程）"><a href="#2、编码过程（训练过程）" class="headerlink" title="2、编码过程（训练过程）"></a>2、编码过程（训练过程）</h2><p>编码过程分为两部分：</p><p>rpn网络的训练过程<br>classifier网络的训练过程<br>在训练过程用到编码过程。<br>在解码过程中是对先验框进行调整得到建议框，然后对建议框进行调整得到最终的预测框。<br>训练过程就需要将真实框编码成建议框网络（RPN）和classifier网络的预测结果的格式。</p><h4 id="1-rpn网络的训练过程"><a href="#1-rpn网络的训练过程" class="headerlink" title="1.rpn网络的训练过程"></a>1.rpn网络的训练过程</h4><p>在函数assign_boxes中，首先计算先验框的个数，<br>构建一个0矩阵，第一个维度是先验框的个数、第二个维度是先验框的位置和先验框中是都存在物体。计算真实框和所有先验框的重合程度，保留重合程度较高的先验框作为正样本，（这些先验框和真实框的重合程度较高，可以通过调整得到真实框）。<br>在函数encode_boxes中，利用筛选后的先验框和真实框进行编码。得到RPN网络应有的预测结果。</p><p>这里编码和解码过程可以看做一个逆过程，乘/除、指数/对数</p><p>然后平衡正负样本，负样本的数量远大于正样本的数量，这里舍弃一部分的负样本，将正负样本的数量规定在一个常数值。</p><h4 id="2-classifier网络的训练过程"><a href="#2-classifier网络的训练过程" class="headerlink" title="2.classifier网络的训练过程"></a>2.classifier网络的训练过程</h4><p>利用建议框和共享特征层得到最终的预测结果。<br>计算建议框和真实框的重合程度，重合程度大于0.5视为正样本，重合程度0.1&lt;x&lt;0.5视为负样本，x&lt;0.5的情况舍弃样本。<br>在函数calc_iou中，把建议框和真实框进行编码，得到classifier网络应有的预测结果。在平衡正负样本，将正负样本输入到网络中进行训练。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> Faster RCNN </tag>
            
            <tag> cv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我看今天谁还敢买小米旗舰！</title>
      <link href="/2021/09/16/wo-kan-jin-tian-shui-huan-gan-mai-xiao-mi-qi-jian/"/>
      <url>/2021/09/16/wo-kan-jin-tian-shui-huan-gan-mai-xiao-mi-qi-jian/</url>
      
        <content type="html"><![CDATA[<p>昨天凌晨我和我室友聊天，突然聊到了小米的一些问题，然后突然一位来了几句“我看今天谁还敢买小米旗舰！！！”，他一顿破音我们赶忙让他小点声，毕竟凌晨一点多了，<del>我们可不敢再被隔壁宿舍举报一次</del>。然后另一位室友就让我们看了一下所谓的“小米圣经”。woc，这声调配上这样槽点满满的小米，简直了，我们宿舍狂笑不止。而后我今天又温习了这一“经典”，连带着看了许许多多的其他UP主依次为素材创作的其他的作品，简直笑死了。而后看到了有关的一些文字记录，觉得这么有意思的东西非常值得记录下来，就转载了别人记录的原文，如下：</p><p>我真的是服了小米了！</p><p>他 今 原本我今天晚上一点事都没有</p><p>今天晚上偶然我的朋友跟我 问我</p><p>K40的（MIUI）12.5.5 的那个</p><p>公12.10（口误）</p><p>那个增强版为什么还没上？ </p><p>好嘛！我打开小米社区一看</p><p>发现它莫名其妙弹了个通知</p><p>跟我说这个</p><p>K40开发版内测申请已通过</p><p>我想着哎？我没有</p><p>这个K40开发版内测的权限</p><p>我没有给他报名啊？</p><p>然后我就点进来一看，看到哎？</p><p>我莫名其妙多出来一个K40的内测</p><p>然后我看一下</p><p>哎不对啊</p><p>我小米10至尊版的开发版公测呢？</p><p>为什么没有了呀？</p><p>为什么这里全变成申请了呀？</p><p>我原本300多的内测分怎么变成55了呀？</p><p>完蛋了呀！</p><p>然后我这边看了一下我的信息，</p><p>我们遗憾的通知您</p><p>由于您在2021年未完成内测考核</p><p>您在该上面内测资格已被取消</p><p>是！取消了没关系</p><p>问题是！ </p><p>我根本没有Note8Pro的手机</p><p>我曾经有一台Note8Pro的手机</p><p>后来我把它二手出掉了！</p><p>现在是怎么样，</p><p>我忘记取消了</p><p>满意了吗！</p><p>我忘记取消了但是我之前有</p><p>之前这个小米社区3.0时候,</p><p>它好像内测只允许三台设备</p><p>我就把我12345678</p><p>我是我在小米这里买了不止十</p><p>我在小米这里可能买了十几、二十台手机</p><p>在以前开发版</p><p>随便刷的时候</p><p>我把我的每一台小米设备看到了吗！</p><p>这19,000的消费金额！</p><p>看到了吗！</p><p>这么多的线上门店我买我</p><p>实话说我确实是米粉！我就是个傻逼！</p><p>满意了吗！</p><p>我他妈刷开发版刷了，数</p><p>没刷没刷没刷有（口误）</p><p>五六十次二三十次都有了！</p><p>我把小米10全系列买了一遍！</p><p>10、10Pro、10S、10Ultra我全买了</p><p>这是我的第二台10Ultra</p><p>我就想老老实实用开发版公测养个老</p><p>你小米牛逼！</p><p>好吧！把我内测分300多的内测分</p><p>给我硬生生扣到55，牛逼！</p><p>你知道我怎么刷</p><p>啊？我一看通知我没完成任务</p><p>那我之前为什么</p><p>我之前没完成任务的时候</p><p>你不把我开发版内测版加到我这么刷上来啊？</p><p>跑到现在这个时候跑到今天！</p><p>今天8月16号</p><p>开始跟我说内测资格未审核通过</p><p>找客服又找不到这个什么垃圾</p><p>小米社区3.0App啊!</p><p>连个客服通道都没有啊？</p><p>我就好奇了?</p><p>我花这么多的钱买一个小米</p><p>你米用垃圾就算了!</p><p>我刷开发板养老</p><p>因为开发板比稳定版稳定!</p><p>我忍了好吗?</p><p>但是你现在是怎么样？</p><p>你直接他妈绝我后!</p><p>我公测资格没了你看到了吗？</p><p>雷军！</p><p>金凡！</p><p>看到了吗！ </p><p>什么弱智啊！啊？</p><p>我今天就要说小米的不好了，好吧我。</p><p>我、我觉得我有</p><p>我觉得我可以我就有资格说小米不好！</p><p>看到这四千多的米金了吗？啊？</p><p>我真的不是，不是我吹！</p><p>我买小米的设备真的买了非常的多！</p><p>我真的非常支持小米！</p><p>你看今年8月16日</p><p>我小米平板虽然是在京东预定的，</p><p>但我起码也是支持了一下雷总的。</p><p>所谓的高端梦</p><p>小米11我也买了，我还买了两台</p><p>结果你给我烧wifi</p><p>这个我也就算了</p><p>毕竟我现在用的是10Ultra</p><p>好吧我来我们来看一下，</p><p>看第一个，星辰看到没有！</p><p>星辰，我有资格说吧？</p><p>我有资格，</p><p>说我有、我有资格评价一下小米吧！</p><p>我是个米粉吧！我不是那什么大黑的！</p><p>星辰！</p><p>看看升级们还要多少</p><p>要1000！</p><p>看到了吗？</p><p>1,000！</p><p>看到没米金抽奖160的幸运值！</p><p>我那天我不知道在抽什么风。</p><p>我就拿着这二十米金</p><p>因为我当时有一万多的米金！</p><p>我就点啊点啊点到幸运值160！</p><p>送我记得我抽了差不多20个指甲刀！</p><p>看到了吗！</p><p>这20个指甲刀也像个弱智一样的！</p><p>这指甲刀一把九块九！</p><p>你买了，你要付一分钱的邮费！</p><p>不，你要付一分钱的钱！</p><p>一分钱的钱算了！</p><p>你线下小米之家兑换不了是吧！</p><p>你线上买这个指甲刀！</p><p>还要额外付10块钱运费！</p><p>而且这个优惠卷还不能叠到一起！</p><p>就是说我花10.01块钱</p><p>买你一把九块九的指甲刀</p><p>你当我是傻子吗？</p><p>我们再点开来这个设备积分！</p><p>我第一次点开来我整个人都傻了！</p><p>你知道吗？</p><p>超99.9%的用户！</p><p>我都怀疑，我就这么《简简单单》买几台设备！</p><p>怎么可能超99%的用户！</p><p>我真的是！我服了我！</p><p>那一点一点我支持小米支持了这么久，</p><p>你现在倒好！</p><p>这个小米特权！</p><p>随随便便就把我开发版给停掉了！</p><p>你自己看我！</p><p>我的小米10Ultra</p><p>不是开发版吗？</p><p>难道是假的吗？</p><p>我说怎么收不到更新推送？</p><p>你自己偷偷摸摸的把我的开发版权限</p><p>取消掉了！</p><p>取消掉就算了！</p><p>我300多的内测分！</p><p>你还给我硬生生的调到50！</p><p>啊？很有意思吗！</p><p>你自己看看你设置的什么弱智东西啊！</p><p>修改头像加20分！修改昵称加20分！</p><p>修改个性签名加20分！</p><p>点赞每日3天5次再加1分！</p><p>我竟然把这上面这前面三个全部做完！</p><p>你能给我加多少分一天？</p><p>一天是不是加16分？</p><p>你跟我算一下</p><p>300减55除以16</p><p>我要做多少天？</p><p>我就真的服了这些小米了！</p><p>为什么你之前的东西不帮我处理好？</p><p>偏偏这个时候来帮我处理！</p><p>帮我把这个东西封禁掉！</p><p>如果不是我看到！</p><p>我这所谓的什么K40开发版内测通过</p><p>我严重怀疑你们这个什么组织？</p><p>就是有bug！</p><p>把我其他那个全删了！</p><p>唯独给我留了一个我没有K40</p><p>你有毒吧你们！</p><p>我还能点进去！</p><p>55分的内测分我能点进去？</p><p>那我为什么不能拥有小米10至尊版的开发版公测啊！</p><p>我本来就有小米10至尊版的开发版公测！</p><p>点进去内测分不足300？</p><p>我本来就有350多360多！</p><p>我就用个开发版养老怎么了？</p><p>以前不是可以用开发版吗现在不可以！</p><p>啊？</p><p>你申请小米这个社区3.0多久了？</p><p>有一个月了吧？</p><p>一个月了现在才开始！</p><p>你没有完成这个月的任务！</p><p>所以我要把你内测取消了！</p><p>我还要扣你的分！</p><p>让你没法再继续申请！</p><p>你是傻的吗？</p><p>一堆人刷开发版就是为了养老！</p><p>谁来光顾你这鬼东西啊！</p><p>什么东西都，什么东西都往公测里面加！</p><p>什么东西都往内测里面加！</p><p>你看看这些提案！</p><p>建议中心、反馈中心都是什么东西？</p><p>超级壁纸息屏显示，支持显示步数信息！</p><p>我要这个东西来干什么！</p><p>我他妈一个后台一回左飞一回右飞！</p><p>我要你一个超级壁纸姓名！</p><p>支持显示步数干什么？</p><p>啊？</p><p>还有这个增加90Hz刷新率！</p><p>我用10Ultra我就喜欢122Hz！</p><p>你喜欢90Hz</p><p>你自己都是开发版的</p><p>你为什么不敢Root？</p><p>刷一个面具进去不就能90Hz知道吗？</p><p>还有这个内存融合技术好！</p><p>这个是很好用！</p><p>你看看隔壁iQOO什么的，</p><p>他内存融合是什么可以调的！</p><p>你给的是什么？</p><p>弄的时候你就给2G！</p><p>两个G的内存融合！</p><p>我觉得你就给三个G！</p><p>敢情你8+3=11是吗?</p><p>11G内存打得过其他人是吗?</p><p>做又做不完,就提供一个开关!</p><p>还不给用户选择.</p><p>我服了!</p><p>你看看这些题案都是什么鬼东西?</p><p>相机支持自动检测并打开微距模式</p><p>我真的烦死小米10Ultra这个微距模式了！</p><p>我他妈！对准15厘米的时候能打开微距模式！</p><p>那个照片糊的像一坨屎一样！</p><p>它还好意思调出来微距模式！</p><p>好意思吗？</p><p>不是我说，我忍这个MIUI很久了好吗！</p><p>你卡、卡、卡你垃圾！垃圾！</p><p>我默默的在支持你，我不离不弃。</p><p>好吗？你，你大家对你，你用垃圾！</p><p>你用这个系统垃圾，口出笔阀的时候</p><p>行，我支持你。</p><p>我觉得你会改，</p><p>我继续支持一下你的旗舰10Ultra！</p><p>好，然后我买的10Ultra是怎么样呢？</p><p>拍照5秒一卡！</p><p>夜景模式在那里转圈圈转了一分钟！</p><p>一张照片都没保存下来！</p><p>拍照8K,</p><p>五分钟它就发热给我弄没了！</p><p>我视频呢？</p><p>别人的888怎么不会这样？</p><p>你的888就会这样！</p><p>难怪你发一个什么黑鲨2Pro</p><p>世界第一的散热背夹！</p><p>你自己拍8K视频5分钟就没了！</p><p>你要个散热背夹</p><p>难道你拍视频的时候还要后面粘个散热背夹吗？</p><p>我跟你说的建议中心立案的1万多条立项，</p><p>能有1,000多条是用于这个系统bug的</p><p>我都给你今晚磕个头！</p><p>我跟你说金凡！</p><p>这是在你用12.5上面说的那个什么啊！</p><p>我们给优先，优先给应用机制！</p><p>你用9不是早就用了吗？啊！</p><p>我真的是服了我！</p><p>真的我很生气非常生气！</p><p>那小米就是个垃圾！</p><p>我看今天谁敢买小米（奇迹）旗舰！ 作者：我觉彳㝵彳亍 <a href="https://www.bilibili.com/read/cv12777949" target="_blank" rel="noopener">https://www.bilibili.com/read/cv12777949</a> 出处：bilibili</p><p>有关视频请看：<a href="https://www.bilibili.com/video/BV1kU4y1E7y4/?spm_id_from=autoNext" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1kU4y1E7y4/?spm_id_from=autoNext</a></p>]]></content>
      
      
      <categories>
          
          <category> 互联网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小米 </tag>
            
            <tag> 互联网 </tag>
            
            <tag> 手机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas</title>
      <link href="/2021/09/11/pandas/"/>
      <url>/2021/09/11/pandas/</url>
      
        <content type="html"><![CDATA[<p>pandas是本书后续内容的首选库。它含有使数据清洗和分析工作变得更快更简单的数据结构和操作工具。pandas经常和其它工具一同使用，如数值计算工具NumPy和SciPy，分析库statsmodels和scikit-learn，和数据可视化库matplotlib。pandas是基于NumPy数组构建的，特别是基于数组的函数和不使用for循环的数据处理。</p><p>虽然pandas采用了大量的NumPy编码风格，但二者最大的不同是pandas是专门为处理表格和混杂数据设计的。而NumPy更适合处理统一的数值数组数据。</p><p>自从2010年pandas开源以来，pandas逐渐成长为一个非常大的库，应用于许多真实案例。开发者社区已经有了800个独立的贡献者，他们在解决日常数据问题的同时为这个项目提供贡献。</p><p>在本书后续部分中，我将使用下面这样的pandas引入约定：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，只要你在代码中看到pd.，就得想到这是pandas。因为Series和DataFrame用的次数非常多，所以将其引入本地命名空间中会更方便：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span> DataFrame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5-1-pandas的数据结构介绍"><a href="#5-1-pandas的数据结构介绍" class="headerlink" title="5.1 pandas的数据结构介绍"></a>5.1 pandas的数据结构介绍</h1><p>要使用pandas，你首先就得熟悉它的两个主要数据结构：Series和DataFrame。虽然它们并不能解决所有问题，但它们为大多数应用提供了一种可靠的、易于使用的基础。</p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>Series是一种类似于一维数组的对象，它由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。仅由一组数据即可产生最简单的Series：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token number">4</span><span class="token number">1</span>    <span class="token number">7</span><span class="token number">2</span>   <span class="token operator">-</span><span class="token number">5</span><span class="token number">3</span>    <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Series的字符串表现形式为：索引在左边，值在右边。由于我们没有为数据指定索引，于是会自动创建一个0到N-1（N为数据的长度）的整数型索引。你可以通过Series 的values和index属性获取其数组表示形式和索引对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>valuesOut<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>index  <span class="token comment" spellcheck="true"># like range(4)</span>Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> RangeIndex<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常，我们希望所创建的Series带有一个可以对各个数据点进行标记的索引：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d    <span class="token number">4</span>b    <span class="token number">7</span>a   <span class="token operator">-</span><span class="token number">5</span>c    <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">.</span>indexOut<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与普通NumPy数组相比，你可以通过索引的方式选取Series中的单个或一组值：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">5</span>In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c    <span class="token number">3</span>a   <span class="token operator">-</span><span class="token number">5</span>d    <span class="token number">6</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[‘c’, ‘a’, ‘d’]是索引列表，即使它包含的是字符串而不是整数。</p><p>使用NumPy函数或类似NumPy的运算（如根据布尔型数组进行过滤、标量乘法、应用数学函数等）都会保留索引值的链接：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span>obj2 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d    <span class="token number">6</span>b    <span class="token number">7</span>c    <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 <span class="token operator">*</span> <span class="token number">2</span>Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span>d    <span class="token number">12</span>b    <span class="token number">14</span>a   <span class="token operator">-</span><span class="token number">10</span>c     <span class="token number">6</span>dtype<span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d     <span class="token number">403.428793</span>b    <span class="token number">1096.633158</span>a       <span class="token number">0.006738</span>c      <span class="token number">20.085537</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以将Series看成是一个定长的有序字典，因为它是索引值到数据值的一个映射。它可以用在许多原本需要字典参数的函数中：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'b'</span> <span class="token keyword">in</span> obj2Out<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span>In <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'e'</span> <span class="token keyword">in</span> obj2Out<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果数据被存放在一个Python字典中，也可以直接通过这个字典来创建Series：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sdata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Ohio'</span><span class="token punctuation">:</span> <span class="token number">35000</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">:</span> <span class="token number">71000</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">:</span> <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token string">'Utah'</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>sdata<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Ohio      <span class="token number">35000</span>Oregon    <span class="token number">16000</span>Texas     <span class="token number">71000</span>Utah       <span class="token number">5000</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只传入一个字典，则结果Series中的索引就是原字典的键（有序排列）。你可以传入排好序的字典的键以改变顺序：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>sdata<span class="token punctuation">,</span> index<span class="token operator">=</span>states<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> California        NaNOhio          <span class="token number">35000.0</span>Oregon        <span class="token number">16000.0</span>Texas         <span class="token number">71000.0</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，sdata中跟states索引相匹配的那3个值会被找出来并放到相应的位置上，但由于”California”所对应的sdata值找不到，所以其结果就为NaN（即“非数字”（not a number），在pandas中，它用于表示缺失或NA值）。因为‘Utah’不在states中，它被从结果中除去。</p><p>我将使用缺失（missing）或NA表示缺失数据。pandas的isnull和notnull函数可用于检测缺失数据：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>obj4<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> California     <span class="token boolean">True</span>Ohio          <span class="token boolean">False</span>Oregon        <span class="token boolean">False</span>Texas         <span class="token boolean">False</span>dtype<span class="token punctuation">:</span> boolIn <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span>obj4<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> California    <span class="token boolean">False</span>Ohio           <span class="token boolean">True</span>Oregon         <span class="token boolean">True</span>Texas          <span class="token boolean">True</span>dtype<span class="token punctuation">:</span> bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Series也有类似的实例方法：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> California     <span class="token boolean">True</span>Ohio          <span class="token boolean">False</span>Oregon        <span class="token boolean">False</span>Texas         <span class="token boolean">False</span>dtype<span class="token punctuation">:</span> bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我将在第7章详细讲解如何处理缺失数据。</p><p>对于许多应用而言，Series最重要的一个功能是，它会根据运算的索引标签自动对齐数据：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Ohio      <span class="token number">35000</span>Oregon    <span class="token number">16000</span>Texas     <span class="token number">71000</span>Utah       <span class="token number">5000</span>dtype<span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4Out<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> California        NaNOhio          <span class="token number">35000.0</span>Oregon        <span class="token number">16000.0</span>Texas         <span class="token number">71000.0</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 <span class="token operator">+</span> obj4Out<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> California         NaNOhio           <span class="token number">70000.0</span>Oregon         <span class="token number">32000.0</span>Texas         <span class="token number">142000.0</span>Utah               NaNdtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据对齐功能将在后面详细讲解。如果你使用过数据库，你可以认为是类似join的操作。</p><p>Series对象本身及其索引都有一个name属性，该属性跟pandas其他的关键功能关系非常密切：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'population'</span>In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4<span class="token punctuation">.</span>index<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'state'</span>In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4Out<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> stateCalifornia        NaNOhio          <span class="token number">35000.0</span>Oregon        <span class="token number">16000.0</span>Texas         <span class="token number">71000.0</span>Name<span class="token punctuation">:</span> population<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Series的索引可以通过赋值的方式就地修改：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token number">4</span><span class="token number">1</span>    <span class="token number">7</span><span class="token number">2</span>   <span class="token operator">-</span><span class="token number">5</span><span class="token number">3</span>    <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> <span class="token string">'Jeff'</span><span class="token punctuation">,</span> <span class="token string">'Ryan'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Bob      <span class="token number">4</span>Steve    <span class="token number">7</span>Jeff    <span class="token operator">-</span><span class="token number">5</span>Ryan     <span class="token number">3</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。DataFrame中的数据是以一个或多个二维块存放的（而不是列表、字典或别的一维数据结构）。有关DataFrame内部的技术细节远远超出了本书所讨论的范围。</p><blockquote><p>笔记：虽然DataFrame是以二维结构保存数据的，但你仍然可以轻松地将其表示为更高维度的数据（层次化索引的表格型结构，这是pandas中许多高级数据处理功能的关键要素，我们会在第8章讨论这个问题）。</p></blockquote><p>建DataFrame的办法有很多，最常用的一种是直接传入一个由等长列表或NumPy数组组成的字典：</p><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'state'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'year'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2003</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'pop'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果DataFrame会自动加上索引（跟Series一样），且全部列会被有序排列：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    pop   state  year<span class="token number">0</span>  <span class="token number">1.5</span>    Ohio  <span class="token number">2000</span><span class="token number">1</span>  <span class="token number">1.7</span>    Ohio  <span class="token number">2001</span><span class="token number">2</span>  <span class="token number">3.6</span>    Ohio  <span class="token number">2002</span><span class="token number">3</span>  <span class="token number">2.4</span>  Nevada  <span class="token number">2001</span><span class="token number">4</span>  <span class="token number">2.9</span>  Nevada  <span class="token number">2002</span><span class="token number">5</span>  <span class="token number">3.2</span>  Nevada  <span class="token number">2003</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你使用的是Jupyter notebook，pandas DataFrame对象会以对浏览器友好的HTML表格的方式呈现。</p><p>对于特别大的DataFrame，head方法会选取前五行：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    pop   state  year<span class="token number">0</span>  <span class="token number">1.5</span>    Ohio  <span class="token number">2000</span><span class="token number">1</span>  <span class="token number">1.7</span>    Ohio  <span class="token number">2001</span><span class="token number">2</span>  <span class="token number">3.6</span>    Ohio  <span class="token number">2002</span><span class="token number">3</span>  <span class="token number">2.4</span>  Nevada  <span class="token number">2001</span><span class="token number">4</span>  <span class="token number">2.9</span>  Nevada  <span class="token number">2002</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果指定了列序列，则DataFrame的列就会按照指定顺序进行排列：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    year   state  pop<span class="token number">0</span>  <span class="token number">2000</span>    Ohio  <span class="token number">1.5</span><span class="token number">1</span>  <span class="token number">2001</span>    Ohio  <span class="token number">1.7</span><span class="token number">2</span>  <span class="token number">2002</span>    Ohio  <span class="token number">3.6</span><span class="token number">3</span>  <span class="token number">2001</span>  Nevada  <span class="token number">2.4</span><span class="token number">4</span>  <span class="token number">2002</span>  Nevada  <span class="token number">2.9</span><span class="token number">5</span>  <span class="token number">2003</span>  Nevada  <span class="token number">3.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果传入的列在数据中找不到，就会在结果中产生缺失值：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'debt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                       index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                              <span class="token string">'five'</span><span class="token punctuation">,</span> <span class="token string">'six'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop debtone    <span class="token number">2000</span>    Ohio  <span class="token number">1.5</span>  NaNtwo    <span class="token number">2001</span>    Ohio  <span class="token number">1.7</span>  NaNthree  <span class="token number">2002</span>    Ohio  <span class="token number">3.6</span>  NaNfour   <span class="token number">2001</span>  Nevada  <span class="token number">2.4</span>  NaNfive   <span class="token number">2002</span>  Nevada  <span class="token number">2.9</span>  NaNsix    <span class="token number">2003</span>  Nevada  <span class="token number">3.2</span>  NaNIn <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">.</span>columnsOut<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'debt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过类似字典标记的方式或属性的方式，可以将DataFrame的列获取为一个Series：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one        Ohiotwo        Ohiothree      Ohiofour     Nevadafive     Nevadasix      NevadaName<span class="token punctuation">:</span> state<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> objectIn <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">.</span>yearOut<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one      <span class="token number">2000</span>two      <span class="token number">2001</span>three    <span class="token number">2002</span>four     <span class="token number">2001</span>five     <span class="token number">2002</span>six      <span class="token number">2003</span>Name<span class="token punctuation">:</span> year<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>笔记：IPython提供了类似属性的访问（即frame2.year）和tab补全。<br>frame2[column]适用于任何列的名，但是frame2.column只有在列名是一个合理的Python变量名时才适用。</p></blockquote><p>注意，返回的Series拥有原DataFrame相同的索引，且其name属性也已经被相应地设置好了。</p><p>行也可以通过位置或名称的方式进行获取，比如用loc属性（稍后将对此进行详细讲解）：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> year     <span class="token number">2002</span>state    Ohiopop       <span class="token number">3.6</span>debt      NaNName<span class="token punctuation">:</span> three<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列可以通过赋值的方式进行修改。例如，我们可以给那个空的”debt”列赋上一个标量值或一组值：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16.5</span>In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debtone    <span class="token number">2000</span>    Ohio  <span class="token number">1.5</span>  <span class="token number">16.5</span>two    <span class="token number">2001</span>    Ohio  <span class="token number">1.7</span>  <span class="token number">16.5</span>three  <span class="token number">2002</span>    Ohio  <span class="token number">3.6</span>  <span class="token number">16.5</span>four   <span class="token number">2001</span>  Nevada  <span class="token number">2.4</span>  <span class="token number">16.5</span>five   <span class="token number">2002</span>  Nevada  <span class="token number">2.9</span>  <span class="token number">16.5</span>six    <span class="token number">2003</span>  Nevada  <span class="token number">3.2</span>  <span class="token number">16.5</span>In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debtone    <span class="token number">2000</span>    Ohio  <span class="token number">1.5</span>   <span class="token number">0.0</span>two    <span class="token number">2001</span>    Ohio  <span class="token number">1.7</span>   <span class="token number">1.0</span>three  <span class="token number">2002</span>    Ohio  <span class="token number">3.6</span>   <span class="token number">2.0</span>four   <span class="token number">2001</span>  Nevada  <span class="token number">2.4</span>   <span class="token number">3.0</span>five   <span class="token number">2002</span>  Nevada  <span class="token number">2.9</span>   <span class="token number">4.0</span>six    <span class="token number">2003</span>  Nevada  <span class="token number">3.2</span>   <span class="token number">5.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将列表或数组赋值给某个列时，其长度必须跟DataFrame的长度相匹配。如果赋值的是一个Series，就会精确匹配DataFrame的索引，所有的空位都将被填上缺失值：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> val <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token string">'five'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> valIn <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debtone    <span class="token number">2000</span>    Ohio  <span class="token number">1.5</span>   NaNtwo    <span class="token number">2001</span>    Ohio  <span class="token number">1.7</span>  <span class="token operator">-</span><span class="token number">1.2</span>three  <span class="token number">2002</span>    Ohio  <span class="token number">3.6</span>   NaNfour   <span class="token number">2001</span>  Nevada  <span class="token number">2.4</span>  <span class="token operator">-</span><span class="token number">1.5</span>five   <span class="token number">2002</span>  Nevada  <span class="token number">2.9</span>  <span class="token operator">-</span><span class="token number">1.7</span>six    <span class="token number">2003</span>  Nevada  <span class="token number">3.2</span>   NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为不存在的列赋值会创建出一个新列。关键字del用于删除列。</p><p>作为del的例子，我先添加一个新的布尔值的列，state是否为’Ohio’：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'eastern'</span><span class="token punctuation">]</span> <span class="token operator">=</span> frame2<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">'Ohio'</span>In <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debt  easternone    <span class="token number">2000</span>    Ohio  <span class="token number">1.5</span>   NaN     <span class="token boolean">True</span>two    <span class="token number">2001</span>    Ohio  <span class="token number">1.7</span>  <span class="token operator">-</span><span class="token number">1.2</span>     <span class="token boolean">True</span>three  <span class="token number">2002</span>    Ohio  <span class="token number">3.6</span>   NaN     <span class="token boolean">True</span>four   <span class="token number">2001</span>  Nevada  <span class="token number">2.4</span>  <span class="token operator">-</span><span class="token number">1.5</span>    <span class="token boolean">False</span>five   <span class="token number">2002</span>  Nevada  <span class="token number">2.9</span>  <span class="token operator">-</span><span class="token number">1.7</span>    <span class="token boolean">False</span>six    <span class="token number">2003</span>  Nevada  <span class="token number">3.2</span>   NaN    <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：不能用frame2.eastern创建新的列。</p></blockquote><p>del方法可以用来删除这列：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">del</span> frame2<span class="token punctuation">[</span><span class="token string">'eastern'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">.</span>columnsOut<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'debt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：通过索引方式返回的列只是相应数据的视图而已，并不是副本。因此，对返回的Series所做的任何就地修改全都会反映到源DataFrame上。通过Series的copy方法即可指定复制列。</p></blockquote><p>另一种常见的数据形式是嵌套字典：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pop <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Nevada'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">2001</span><span class="token punctuation">:</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">:</span> <span class="token number">2.9</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>        <span class="token string">'Ohio'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">2000</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">:</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">:</span> <span class="token number">3.6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果嵌套字典传给DataFrame，pandas就会被解释为：外层字典的键作为列，内层键则作为行索引：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>pop<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3Out<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       Nevada  Ohio<span class="token number">2000</span>     NaN   <span class="token number">1.5</span><span class="token number">2001</span>     <span class="token number">2.4</span>   <span class="token number">1.7</span><span class="token number">2002</span>     <span class="token number">2.9</span>   <span class="token number">3.6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以使用类似NumPy数组的方法，对DataFrame进行转置（交换行和列）：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3<span class="token punctuation">.</span>TOut<span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         <span class="token number">2000</span>  <span class="token number">2001</span>  <span class="token number">2002</span>Nevada   NaN   <span class="token number">2.4</span>   <span class="token number">2.9</span>Ohio     <span class="token number">1.5</span>   <span class="token number">1.7</span>   <span class="token number">3.6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内层字典的键会被合并、排序以形成最终的索引。如果明确指定了索引，则不会这样：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>pop<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2003</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       Nevada  Ohio<span class="token number">2001</span>     <span class="token number">2.4</span>   <span class="token number">1.7</span><span class="token number">2002</span>     <span class="token number">2.9</span>   <span class="token number">3.6</span><span class="token number">2003</span>     NaN   NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由Series组成的字典差不多也是一样的用法：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pdata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Ohio'</span><span class="token punctuation">:</span> frame3<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>          <span class="token string">'Nevada'</span><span class="token punctuation">:</span> frame3<span class="token punctuation">[</span><span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>pdata<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       Nevada  Ohio<span class="token number">2000</span>     NaN   <span class="token number">1.5</span><span class="token number">2001</span>     <span class="token number">2.4</span>   <span class="token number">1.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表5-1列出了DataFrame构造函数所能接受的各种数据。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://upload-images.jianshu.io/upload_images/7178691-106835b28c0cea5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果设置了DataFrame的index和columns的name属性，则这些信息也会被显示出来：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3<span class="token punctuation">.</span>index<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'year'</span><span class="token punctuation">;</span> frame3<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'state'</span>In <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3Out<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> state  Nevada  Ohioyear<span class="token number">2000</span>      NaN   <span class="token number">1.5</span><span class="token number">2001</span>      <span class="token number">2.4</span>   <span class="token number">1.7</span><span class="token number">2002</span>      <span class="token number">2.9</span>   <span class="token number">3.6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟Series一样，values属性也会以二维ndarray的形式返回DataFrame中的数据：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3<span class="token punctuation">.</span>valuesOut<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> nan<span class="token punctuation">,</span>  <span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2.4</span><span class="token punctuation">,</span>  <span class="token number">1.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2.9</span><span class="token punctuation">,</span>  <span class="token number">3.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果DataFrame各列的数据类型不同，则值数组的dtype就会选用能兼容所有列的数据类型：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">.</span>valuesOut<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> nan<span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2002</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> nan<span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2002</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2003</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">,</span> nan<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>object<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h2><p>pandas的索引对象负责管理轴标签和其他元数据（比如轴名称等）。构建Series或DataFrame时，所用到的任何数组或其他序列的标签都会被转换成一个Index：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> index <span class="token operator">=</span> obj<span class="token punctuation">.</span>indexIn <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> indexOut<span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> index<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Index对象是不可变的，因此用户不能对其进行修改：</p><pre class="line-numbers language-python"><code class="language-python">index<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d'</span>  <span class="token comment" spellcheck="true"># TypeError</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不可变可以使Index对象在多个数据结构之间安全共享：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span> labels <span class="token operator">=</span> pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> labelsOut<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span>labels<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token number">1.51</span>   <span class="token operator">-</span><span class="token number">2.52</span>    <span class="token number">0.</span>0dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">.</span>index <span class="token keyword">is</span> labelsOut<span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：虽然用户不需要经常使用Index的功能，但是因为一些操作会生成包含被索引化的数据，理解它们的工作原理是很重要的。</p></blockquote><p>除了类似于数组，Index的功能也类似一个固定大小的集合：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3Out<span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> state  Nevada  Ohioyear               <span class="token number">2000</span>      NaN   <span class="token number">1.5</span><span class="token number">2001</span>      <span class="token number">2.4</span>   <span class="token number">1.7</span><span class="token number">2002</span>      <span class="token number">2.9</span>   <span class="token number">3.6</span>In <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3<span class="token punctuation">.</span>columnsOut<span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'state'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'Ohio'</span> <span class="token keyword">in</span> frame3<span class="token punctuation">.</span>columnsOut<span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span>In <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2003</span> <span class="token keyword">in</span> frame3<span class="token punctuation">.</span>indexOut<span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与python的集合不同，pandas的Index可以包含重复的标签：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dup_labels <span class="token operator">=</span> pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dup_labelsOut<span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>选择重复的标签，会显示所有的结果。</p><p>每个索引都有一些方法和属性，它们可用于设置逻辑并回答有关该索引所包含的数据的常见问题。表5-2列出了这些函数。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://upload-images.jianshu.io/upload_images/7178691-5499d14f0e2cd639.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h1 id="5-2-基本功能"><a href="#5-2-基本功能" class="headerlink" title="5.2 基本功能"></a>5.2 基本功能</h1><p>本节中，我将介绍操作Series和DataFrame中的数据的基本手段。后续章节将更加深入地挖掘pandas在数据分析和处理方面的功能。本书不是pandas库的详尽文档，主要关注的是最重要的功能，那些不大常用的内容（也就是那些更深奥的内容）就交给你自己去摸索吧。</p><h2 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h2><p>pandas对象的一个重要方法是reindex，其作用是创建一个新对象，它的数据符合新的索引。看下面的例子：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5.3</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d    <span class="token number">4.</span><span class="token number">5b</span>    <span class="token number">7.</span><span class="token number">2a</span>   <span class="token operator">-</span><span class="token number">5.</span><span class="token number">3c</span>    <span class="token number">3.</span>6dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用该Series的reindex将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a   <span class="token operator">-</span><span class="token number">5.</span><span class="token number">3b</span>    <span class="token number">7.</span><span class="token number">2c</span>    <span class="token number">3.</span><span class="token number">6d</span>    <span class="token number">4.</span><span class="token number">5e</span>    NaNdtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于时间序列这样的有序数据，重新索引时可能需要做一些插值处理。method选项即可达到此目的，例如，使用ffill可以实现前向值填充：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>      blue2    purple4    yellowdtype<span class="token punctuation">:</span> objectIn <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'ffill'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>      blue1      blue2    purple3    purple4    yellow5    yellowdtype<span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>借助DataFrame，reindex可以修改（行）索引和列。只传递一个序列时，会重新索引结果的行：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                      index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                      columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Ohio  Texas  Californiaa     <span class="token number">0</span>      <span class="token number">1</span>           <span class="token number">2c</span>     <span class="token number">3</span>      <span class="token number">4</span>           <span class="token number">5d</span>     <span class="token number">6</span>      <span class="token number">7</span>           8In <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Ohio  Texas  Californiaa   <span class="token number">0.0</span>    <span class="token number">1.0</span>         <span class="token number">2.</span><span class="token number">0b</span>   NaN    NaN         NaNc   <span class="token number">3.0</span>    <span class="token number">4.0</span>         <span class="token number">5.</span><span class="token number">0d</span>   <span class="token number">6.0</span>    <span class="token number">7.0</span>         <span class="token number">8.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列可以用columns关键字重新索引：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>columns<span class="token operator">=</span>states<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Texas  Utah  Californiaa      <span class="token number">1</span>   NaN           <span class="token number">2c</span>      <span class="token number">4</span>   NaN           <span class="token number">5d</span>      <span class="token number">7</span>   NaN           <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表5-3列出了reindex函数的各参数及说明。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://upload-images.jianshu.io/upload_images/7178691-efa3dbd4b83c61ec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="丢弃指定轴上的项"><a href="#丢弃指定轴上的项" class="headerlink" title="丢弃指定轴上的项"></a>丢弃指定轴上的项</h2><p>丢弃某条轴上的一个或多个项很简单，只要有一个索引数组或列表即可。由于需要执行一些数据整理和集合逻辑，所以drop方法返回的是一个在指定轴上删除了指定值的新对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">0.0</span>b    <span class="token number">1.0</span>c    <span class="token number">2.0</span>d    <span class="token number">3.0</span>e    <span class="token number">4.0</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> new_obj <span class="token operator">=</span> obj<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> new_objOut<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">0.0</span>b    <span class="token number">1.0</span>d    <span class="token number">3.0</span>e    <span class="token number">4.0</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">0.0</span>b    <span class="token number">1.0</span>e    <span class="token number">4.0</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于DataFrame，可以删除任意轴上的索引值。为了演示，先新建一个DataFrame例子：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                     index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                     columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        <span class="token number">0</span>    <span class="token number">1</span>      <span class="token number">2</span>     3Colorado    <span class="token number">4</span>    <span class="token number">5</span>      <span class="token number">6</span>     7Utah        <span class="token number">8</span>    <span class="token number">9</span>     <span class="token number">10</span>    11New York   <span class="token number">12</span>   <span class="token number">13</span>     <span class="token number">14</span>    <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用标签序列调用drop会从行标签（axis 0）删除值：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourUtah        <span class="token number">8</span>    <span class="token number">9</span>     <span class="token number">10</span>    11New York   <span class="token number">12</span>   <span class="token number">13</span>     <span class="token number">14</span>    <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过传递axis=1或axis=’columns’可以删除列的值：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  three  fourOhio        <span class="token number">0</span>      <span class="token number">2</span>     <span class="token number">3</span>Colorado    <span class="token number">4</span>      <span class="token number">6</span>     <span class="token number">7</span>Utah        <span class="token number">8</span>     <span class="token number">10</span>    <span class="token number">11</span>New York   <span class="token number">12</span>     <span class="token number">14</span>    <span class="token number">15</span>In <span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token string">'columns'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  threeOhio        <span class="token number">0</span>      <span class="token number">2</span>Colorado    <span class="token number">4</span>      <span class="token number">6</span>Utah        <span class="token number">8</span>     <span class="token number">10</span>New York   <span class="token number">12</span>     <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>许多函数，如drop，会修改Series或DataFrame的大小或形状，可以就地修改对象，不会返回新的对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">0.0</span>b    <span class="token number">1.0</span>d    <span class="token number">3.0</span>e    <span class="token number">4.0</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小心使用inplace，它会销毁所有被删除的数据。</p><h2 id="索引、选取和过滤"><a href="#索引、选取和过滤" class="headerlink" title="索引、选取和过滤"></a>索引、选取和过滤</h2><p>Series索引（obj[…]）的工作方式类似于NumPy数组的索引，只不过Series的索引值不只是整数。下面是几个例子：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">0.0</span>b    <span class="token number">1.0</span>c    <span class="token number">2.0</span>d    <span class="token number">3.0</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1.0</span>In <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1.0</span>In <span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c    <span class="token number">2.0</span>d    <span class="token number">3.0</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span>b    <span class="token number">1.0</span>a    <span class="token number">0.0</span>d    <span class="token number">3.0</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b    <span class="token number">1.0</span>d    <span class="token number">3.0</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>obj <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">0.0</span>b    <span class="token number">1.0</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用标签的切片运算与普通的Python切片运算不同，其末端是包含的：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span>b    <span class="token number">1.0</span>c    <span class="token number">2.0</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用切片可以对Series的相应部分进行设置：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>In <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">0.0</span>b    <span class="token number">5.0</span>c    <span class="token number">5.0</span>d    <span class="token number">3.0</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用一个值或序列对DataFrame进行索引其实就是获取一个或多个列：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                     index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                     columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        <span class="token number">0</span>    <span class="token number">1</span>      <span class="token number">2</span>     3Colorado    <span class="token number">4</span>    <span class="token number">5</span>      <span class="token number">6</span>     7Utah        <span class="token number">8</span>    <span class="token number">9</span>     <span class="token number">10</span>    11New York   <span class="token number">12</span>   <span class="token number">13</span>     <span class="token number">14</span>    15In <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Ohio         1Colorado     5Utah         9New York    13Name<span class="token punctuation">:</span> two<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           three  oneOhio          <span class="token number">2</span>    0Colorado      <span class="token number">6</span>    4Utah         <span class="token number">10</span>    8New York     <span class="token number">14</span>   <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种索引方式有几个特殊的情况。首先通过切片或布尔型数组选取数据：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        <span class="token number">0</span>    <span class="token number">1</span>      <span class="token number">2</span>     3Colorado    <span class="token number">4</span>    <span class="token number">5</span>      <span class="token number">6</span>     7In <span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourColorado    <span class="token number">4</span>    <span class="token number">5</span>      <span class="token number">6</span>     7Utah        <span class="token number">8</span>    <span class="token number">9</span>     <span class="token number">10</span>    11New York   <span class="token number">12</span>   <span class="token number">13</span>     <span class="token number">14</span>    <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选取行的语法data[:2]十分方便。向[ ]传递单一的元素或列表，就可选择列。</p><p>另一种用法是通过布尔型DataFrame（比如下面这个由标量比较运算得出的）进行索引：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">&lt;</span> 5Out<span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             one    two  three   fourOhio       <span class="token boolean">True</span>   <span class="token boolean">True</span>   <span class="token boolean">True</span>   TrueColorado   <span class="token boolean">True</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  FalseUtah      <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  FalseNew York  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  FalseIn <span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>data <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> 0In <span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        <span class="token number">0</span>    <span class="token number">0</span>      <span class="token number">0</span>     0Colorado    <span class="token number">0</span>    <span class="token number">5</span>      <span class="token number">6</span>     7Utah        <span class="token number">8</span>    <span class="token number">9</span>     <span class="token number">10</span>    11New York   <span class="token number">12</span>   <span class="token number">13</span>     <span class="token number">14</span>    <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这使得DataFrame的语法与NumPy二维数组的语法很像。</p><h2 id="用loc和iloc进行选取"><a href="#用loc和iloc进行选取" class="headerlink" title="用loc和iloc进行选取"></a>用loc和iloc进行选取</h2><p>对于DataFrame的行的标签索引，我引入了特殊的标签运算符loc和iloc。它们可以让你用类似NumPy的标记，使用轴标签（loc）或整数索引（iloc），从DataFrame选择行和列的子集。</p><p>作为一个初步示例，让我们通过标签选择一行和多列：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> two      5three    6Name<span class="token punctuation">:</span> Colorado<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后用iloc和整数进行选取：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> four    11one      8two      9Name<span class="token punctuation">:</span> Utah<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one       8two       9three    10four     11Name<span class="token punctuation">:</span> Utah<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           four  one  twoColorado     <span class="token number">7</span>    <span class="token number">0</span>    5Utah        <span class="token number">11</span>    <span class="token number">8</span>    <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这两个索引函数也适用于一个标签或多个标签的切片：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">141</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">141</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Ohio        0Colorado    5Utah        9Name<span class="token punctuation">:</span> two<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>three <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  threeColorado    <span class="token number">0</span>    <span class="token number">5</span>      6Utah        <span class="token number">8</span>    <span class="token number">9</span>     10New York   <span class="token number">12</span>   <span class="token number">13</span>     <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，在pandas中，有多个方法可以选取和重新组合数据。对于DataFrame，表5-4进行了总结。后面会看到，还有更多的方法进行层级化索引。</p><blockquote><p>笔记：在一开始设计pandas时，我觉得用frame[:, col]选取列过于繁琐（也容易出错），因为列的选择是非常常见的操作。我做了些取舍，将花式索引的功能（标签和整数）放到了ix运算符中。在实践中，这会导致许多边缘情况，数据的轴标签是整数，所以pandas团队决定创造loc和iloc运算符分别处理严格基于标签和整数的索引。<br>ix运算符仍然可用，但并不推荐。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://upload-images.jianshu.io/upload_images/7178691-64354f2ab777bd8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表5-4 DataFrame的索引选项"></p><h2 id="整数索引"><a href="#整数索引" class="headerlink" title="整数索引"></a>整数索引</h2><p>处理整数索引的pandas对象常常难住新手，因为它与Python内置的列表和元组的索引语法不同。例如，你可能不认为下面的代码会出错：</p><pre class="line-numbers language-python"><code class="language-python">ser <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>serser<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，pandas可以勉强进行整数索引，但是会导致小bug。我们有包含0,1,2的索引，但是引入用户想要的东西（基于标签或位置的索引）很难：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> serOut<span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token number">0.01</span>    <span class="token number">1.02</span>    <span class="token number">2.</span>0dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外，对于非整数索引，不会产生歧义：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了进行统一，如果轴索引含有整数，数据选取总会使用标签。为了更准确，请使用loc（标签）或iloc（整数）：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token number">0.</span>0dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token number">0.01</span>    <span class="token number">1.</span>0dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token number">0.</span>0dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="算术运算和数据对齐"><a href="#算术运算和数据对齐" class="headerlink" title="算术运算和数据对齐"></a>算术运算和数据对齐</h2><p>pandas最重要的一个功能是，它可以对不同索引的对象进行算术运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是该索引对的并集。对于有数据库经验的用户，这就像在索引标签上进行自动外连接。看一个简单的例子：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7.3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s1Out<span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">7.3</span>c   <span class="token operator">-</span><span class="token number">2.5</span>d    <span class="token number">3.4</span>e    <span class="token number">1.5</span>dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s2Out<span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a   <span class="token operator">-</span><span class="token number">2.1</span>c    <span class="token number">3.6</span>e   <span class="token operator">-</span><span class="token number">1.5</span>f    <span class="token number">4.0</span>g    <span class="token number">3.1</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将它们相加就会产生：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s1 <span class="token operator">+</span> s2Out<span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">5.2</span>c    <span class="token number">1.1</span>d    NaNe    <span class="token number">0.0</span>f    NaNg    NaNdtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动的数据对齐操作在不重叠的索引处引入了NA值。缺失值会在算术运算过程中传播。</p><p>对于DataFrame，对齐操作会同时发生在行和列上：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">155</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'bcd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'bde'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1Out<span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b    c    dOhio      <span class="token number">0.0</span>  <span class="token number">1.0</span>  <span class="token number">2.0</span>Texas     <span class="token number">3.0</span>  <span class="token number">4.0</span>  <span class="token number">5.0</span>Colorado  <span class="token number">6.0</span>  <span class="token number">7.0</span>  <span class="token number">8.0</span>In <span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2Out<span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b     d     eUtah    <span class="token number">0.0</span>   <span class="token number">1.0</span>   <span class="token number">2.0</span>Ohio    <span class="token number">3.0</span>   <span class="token number">4.0</span>   <span class="token number">5.0</span>Texas   <span class="token number">6.0</span>   <span class="token number">7.0</span>   <span class="token number">8.0</span>Oregon  <span class="token number">9.0</span>  <span class="token number">10.0</span>  <span class="token number">11.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把它们相加后将会返回一个新的DataFrame，其索引和列为原来那两个DataFrame的并集：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 <span class="token operator">+</span> df2Out<span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b   c     d   eColorado  NaN NaN   NaN NaNOhio      <span class="token number">3.0</span> NaN   <span class="token number">6.0</span> NaNOregon    NaN NaN   NaN NaNTexas     <span class="token number">9.0</span> NaN  <span class="token number">12.0</span> NaNUtah      NaN NaN   NaN NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为’c’和’e’列均不在两个DataFrame对象中，在结果中以缺省值呈现。行也是同样。</p><p>如果DataFrame对象相加，没有共用的列或行标签，结果都会是空：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">161</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1Out<span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    A<span class="token number">0</span>  <span class="token number">1</span><span class="token number">1</span>  <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2Out<span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    B<span class="token number">0</span>  <span class="token number">3</span><span class="token number">1</span>  <span class="token number">4</span>In <span class="token punctuation">[</span><span class="token number">164</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 <span class="token operator">-</span> df2Out<span class="token punctuation">[</span><span class="token number">164</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     A   B<span class="token number">0</span> NaN NaN<span class="token number">1</span> NaN NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在算术方法中填充值"><a href="#在算术方法中填充值" class="headerlink" title="在算术方法中填充值"></a>在算术方法中填充值</h2><p>在对不同索引的对象进行算术运算时，你可能希望当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值（比如0）：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">165</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                    columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                    columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcde'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">167</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nanIn <span class="token punctuation">[</span><span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1Out<span class="token punctuation">[</span><span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a    b     c     d<span class="token number">0</span>  <span class="token number">0.0</span>  <span class="token number">1.0</span>   <span class="token number">2.0</span>   <span class="token number">3.0</span><span class="token number">1</span>  <span class="token number">4.0</span>  <span class="token number">5.0</span>   <span class="token number">6.0</span>   <span class="token number">7.0</span><span class="token number">2</span>  <span class="token number">8.0</span>  <span class="token number">9.0</span>  <span class="token number">10.0</span>  <span class="token number">11.0</span>In <span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2Out<span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a     b     c     d     e<span class="token number">0</span>   <span class="token number">0.0</span>   <span class="token number">1.0</span>   <span class="token number">2.0</span>   <span class="token number">3.0</span>   <span class="token number">4.0</span><span class="token number">1</span>   <span class="token number">5.0</span>   NaN   <span class="token number">7.0</span>   <span class="token number">8.0</span>   <span class="token number">9.0</span><span class="token number">2</span>  <span class="token number">10.0</span>  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14.0</span><span class="token number">3</span>  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18.0</span>  <span class="token number">19.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将它们相加时，没有重叠的位置就会产生NA值：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 <span class="token operator">+</span> df2Out<span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a     b     c     d   e<span class="token number">0</span>   <span class="token number">0.0</span>   <span class="token number">2.0</span>   <span class="token number">4.0</span>   <span class="token number">6.0</span> NaN<span class="token number">1</span>   <span class="token number">9.0</span>   NaN  <span class="token number">13.0</span>  <span class="token number">15.0</span> NaN<span class="token number">2</span>  <span class="token number">18.0</span>  <span class="token number">20.0</span>  <span class="token number">22.0</span>  <span class="token number">24.0</span> NaN<span class="token number">3</span>   NaN   NaN   NaN   NaN NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用df1的add方法，传入df2以及一个fill_value参数：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1<span class="token punctuation">.</span>add<span class="token punctuation">(</span>df2<span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a     b     c     d     e0   <span class="token number">0.0</span>   <span class="token number">2.0</span>   <span class="token number">4.0</span>   <span class="token number">6.0</span>   <span class="token number">4.01</span>   <span class="token number">9.0</span>   <span class="token number">5.0</span>  <span class="token number">13.0</span>  <span class="token number">15.0</span>   <span class="token number">9.02</span>  <span class="token number">18.0</span>  <span class="token number">20.0</span>  <span class="token number">22.0</span>  <span class="token number">24.0</span>  <span class="token number">14.03</span>  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18.0</span>  <span class="token number">19.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表5-5列出了Series和DataFrame的算术方法。它们每个都有一个副本，以字母r开头，它会翻转参数。因此这两个语句是等价的：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">172</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">/</span> df1Out<span class="token punctuation">[</span><span class="token number">172</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           a         b         c         d0       inf  <span class="token number">1.000000</span>  <span class="token number">0.500000</span>  <span class="token number">0.3333331</span>  <span class="token number">0.250000</span>  <span class="token number">0.200000</span>  <span class="token number">0.166667</span>  <span class="token number">0.1428572</span>  <span class="token number">0.125000</span>  <span class="token number">0.111111</span>  <span class="token number">0.100000</span>  <span class="token number">0.</span>090909In <span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1<span class="token punctuation">.</span>rdiv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           a         b         c         d0       inf  <span class="token number">1.000000</span>  <span class="token number">0.500000</span>  <span class="token number">0.3333331</span>  <span class="token number">0.250000</span>  <span class="token number">0.200000</span>  <span class="token number">0.166667</span>  <span class="token number">0.1428572</span>  <span class="token number">0.125000</span>  <span class="token number">0.111111</span>  <span class="token number">0.100000</span>  <span class="token number">0.090909</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://upload-images.jianshu.io/upload_images/7178691-16857a1021f98d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表5-5 灵活的算术方法"></p><p>与此类似，在对Series或DataFrame重新索引时，也可以指定一个填充值：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">174</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>columns<span class="token operator">=</span>df2<span class="token punctuation">.</span>columns<span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">174</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a    b     c     d  e0  <span class="token number">0.0</span>  <span class="token number">1.0</span>   <span class="token number">2.0</span>   <span class="token number">3.0</span>  <span class="token number">01</span>  <span class="token number">4.0</span>  <span class="token number">5.0</span>   <span class="token number">6.0</span>   <span class="token number">7.0</span>  <span class="token number">02</span>  <span class="token number">8.0</span>  <span class="token number">9.0</span>  <span class="token number">10.0</span>  <span class="token number">11.0</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="DataFrame和Series之间的运算"><a href="#DataFrame和Series之间的运算" class="headerlink" title="DataFrame和Series之间的运算"></a>DataFrame和Series之间的运算</h2><p>跟不同维度的NumPy数组一样，DataFrame和Series之间算术运算也是有明确规定的。先来看一个具有启发性的例子，计算一个二维数组与其某行之间的差：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">7</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">11</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr <span class="token operator">-</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们从arr减去arr[0]，每一行都会执行这个操作。这就叫做广播（broadcasting），附录A将对此进行详细讲解。DataFrame和Series之间的运算差不多也是如此：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                      columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'bde'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                      index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series <span class="token operator">=</span> frame<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b     d     eUtah    <span class="token number">0.0</span>   <span class="token number">1.0</span>   <span class="token number">2.</span>0Ohio    <span class="token number">3.0</span>   <span class="token number">4.0</span>   <span class="token number">5.</span>0Texas   <span class="token number">6.0</span>   <span class="token number">7.0</span>   <span class="token number">8.</span>0Oregon  <span class="token number">9.0</span>  <span class="token number">10.0</span>  <span class="token number">11.</span>0In <span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seriesOut<span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b    <span class="token number">0.</span><span class="token number">0d</span>    <span class="token number">1.</span><span class="token number">0e</span>    <span class="token number">2.</span>0Name<span class="token punctuation">:</span> Utah<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，DataFrame和Series之间的算术运算会将Series的索引匹配到DataFrame的列，然后沿着行一直向下广播：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame <span class="token operator">-</span> seriesOut<span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b    d    eUtah    <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.</span>0Ohio    <span class="token number">3.0</span>  <span class="token number">3.0</span>  <span class="token number">3.</span>0Texas   <span class="token number">6.0</span>  <span class="token number">6.0</span>  <span class="token number">6.</span>0Oregon  <span class="token number">9.0</span>  <span class="token number">9.0</span>  <span class="token number">9.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果某个索引值在DataFrame的列或Series的索引中找不到，则参与运算的两个对象就会被重新索引以形成并集：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame <span class="token operator">+</span> series2Out<span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b   d     e   fUtah    <span class="token number">0.0</span> NaN   <span class="token number">3.0</span> NaNOhio    <span class="token number">3.0</span> NaN   <span class="token number">6.0</span> NaNTexas   <span class="token number">6.0</span> NaN   <span class="token number">9.0</span> NaNOregon  <span class="token number">9.0</span> NaN  <span class="token number">12.0</span> NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你希望匹配行且在列上广播，则必须使用算术运算方法。例如：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">186</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series3 <span class="token operator">=</span> frame<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b     d     eUtah    <span class="token number">0.0</span>   <span class="token number">1.0</span>   <span class="token number">2.0</span>Ohio    <span class="token number">3.0</span>   <span class="token number">4.0</span>   <span class="token number">5.0</span>Texas   <span class="token number">6.0</span>   <span class="token number">7.0</span>   <span class="token number">8.0</span>Oregon  <span class="token number">9.0</span>  <span class="token number">10.0</span>  <span class="token number">11.0</span>In <span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series3Out<span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Utah       <span class="token number">1.0</span>Ohio       <span class="token number">4.0</span>Texas      <span class="token number">7.0</span>Oregon    <span class="token number">10.0</span>Name<span class="token punctuation">:</span> d<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>series3<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b    d    eUtah   <span class="token operator">-</span><span class="token number">1.0</span>  <span class="token number">0.0</span>  <span class="token number">1.0</span>Ohio   <span class="token operator">-</span><span class="token number">1.0</span>  <span class="token number">0.0</span>  <span class="token number">1.0</span>Texas  <span class="token operator">-</span><span class="token number">1.0</span>  <span class="token number">0.0</span>  <span class="token number">1.0</span>Oregon <span class="token operator">-</span><span class="token number">1.0</span>  <span class="token number">0.0</span>  <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入的轴号就是希望匹配的轴。在本例中，我们的目的是匹配DataFrame的行索引（axis=’index’ or axis=0）并进行广播。</p><h2 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h2><p>NumPy的ufuncs（元素级数组方法）也可用于操作pandas对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'bde'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                      index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                b         d         eUtah   <span class="token operator">-</span><span class="token number">0.204708</span>  <span class="token number">0.478943</span> <span class="token operator">-</span><span class="token number">0.519439</span>Ohio   <span class="token operator">-</span><span class="token number">0.555730</span>  <span class="token number">1.965781</span>  <span class="token number">1.393406</span>Texas   <span class="token number">0.092908</span>  <span class="token number">0.281746</span>  <span class="token number">0.769023</span>Oregon  <span class="token number">1.246435</span>  <span class="token number">1.007189</span> <span class="token operator">-</span><span class="token number">1.296221</span>In <span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                b         d         eUtah    <span class="token number">0.204708</span>  <span class="token number">0.478943</span>  <span class="token number">0.519439</span>Ohio    <span class="token number">0.555730</span>  <span class="token number">1.965781</span>  <span class="token number">1.393406</span>Texas   <span class="token number">0.092908</span>  <span class="token number">0.281746</span>  <span class="token number">0.769023</span>Oregon  <span class="token number">1.246435</span>  <span class="token number">1.007189</span>  <span class="token number">1.296221</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一个常见的操作是，将函数应用到由各列或行所形成的一维数组上。DataFrame的apply方法即可实现此功能：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">193</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>f<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b    <span class="token number">1.</span><span class="token number">802165d</span>    <span class="token number">1.</span><span class="token number">684034e</span>    <span class="token number">2.</span>689627dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的函数f，计算了一个Series的最大值和最小值的差，在frame的每列都执行了一次。结果是一个Series，使用frame的列作为索引。</p><p>如果传递axis=’columns’到apply，这个函数会在每行执行：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>f<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token string">'columns'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span><span class="token punctuation">:</span>Utah      <span class="token number">0.</span>998382Ohio      <span class="token number">2.</span>521511Texas     <span class="token number">0.</span>676115Oregon    <span class="token number">2.</span>542656dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>许多最为常见的数组统计功能都被实现成DataFrame的方法（如sum和mean），因此无需使用apply方法。</p><p>传递到apply的函数不是必须返回一个标量，还可以返回由多个值组成的Series：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">196</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>f<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b         d         emin <span class="token operator">-</span><span class="token number">0.555730</span>  <span class="token number">0.281746</span> <span class="token operator">-</span><span class="token number">1.</span>296221max  <span class="token number">1.246435</span>  <span class="token number">1.965781</span>  <span class="token number">1.393406</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>元素级的Python函数也是可以用的。假如你想得到frame中各个浮点值的格式化字符串，使用applymap即可：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span> format <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'%.2f'</span> <span class="token operator">%</span> xIn <span class="token punctuation">[</span><span class="token number">199</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>applymap<span class="token punctuation">(</span>format<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">199</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b     d      eUtah    <span class="token operator">-</span><span class="token number">0.20</span>  <span class="token number">0.48</span>  <span class="token operator">-</span><span class="token number">0.</span>52Ohio    <span class="token operator">-</span><span class="token number">0.56</span>  <span class="token number">1.97</span>   <span class="token number">1.</span>39Texas    <span class="token number">0.09</span>  <span class="token number">0.28</span>   <span class="token number">0.</span>77Oregon   <span class="token number">1.25</span>  <span class="token number">1.01</span>  <span class="token operator">-</span><span class="token number">1.30</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之所以叫做applymap，是因为Series有一个用于应用元素级函数的map方法：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>format<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Utah      <span class="token operator">-</span><span class="token number">0.</span>52Ohio       <span class="token number">1.</span>39Texas      <span class="token number">0.</span>77Oregon    <span class="token operator">-</span><span class="token number">1.</span>30Name<span class="token punctuation">:</span> e<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h2><p>根据条件对数据集排序（sorting）也是一种重要的内置运算。要对行或列索引进行排序（按字典顺序），可使用sort_index方法，它将返回一个已排序的新对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a    <span class="token number">1b</span>    <span class="token number">2c</span>    <span class="token number">3d</span>    0dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于DataFrame，则可以根据任意一个轴上的索引进行排序：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">203</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                      index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                      columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        d  a  b  cone    <span class="token number">4</span>  <span class="token number">5</span>  <span class="token number">6</span>  7three  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span>  3In <span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a  b  c  dthree  <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  0one    <span class="token number">5</span>  <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据默认是按升序排序的，但也可以降序排序：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">206</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">206</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        d  c  b  athree  <span class="token number">0</span>  <span class="token number">3</span>  <span class="token number">2</span>  <span class="token number">1</span>one    <span class="token number">4</span>  <span class="token number">7</span>  <span class="token number">6</span>  <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若要按值对Series进行排序，可使用其sort_values方法：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">207</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>   <span class="token operator">-</span><span class="token number">3</span><span class="token number">3</span>    <span class="token number">2</span><span class="token number">0</span>    <span class="token number">4</span><span class="token number">1</span>    <span class="token number">7</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在排序时，任何缺失值默认都会被放到Series的末尾：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">209</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span>   <span class="token operator">-</span><span class="token number">3.0</span><span class="token number">5</span>    <span class="token number">2.0</span><span class="token number">0</span>    <span class="token number">4.0</span><span class="token number">2</span>    <span class="token number">7.0</span><span class="token number">1</span>    NaN<span class="token number">3</span>    NaNdtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当排序一个DataFrame时，你可能希望根据一个或多个列中的值进行排序。将一个或多个列的名字传递给sort_values的by选项即可达到该目的：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">211</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">4</span><span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">7</span><span class="token number">2</span>  <span class="token number">0</span> <span class="token operator">-</span><span class="token number">3</span><span class="token number">3</span>  <span class="token number">1</span>  <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b<span class="token number">2</span>  <span class="token number">0</span> <span class="token operator">-</span><span class="token number">3</span><span class="token number">3</span>  <span class="token number">1</span>  <span class="token number">2</span><span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">4</span><span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要根据多个列进行排序，传入名称的列表即可：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b<span class="token number">2</span>  <span class="token number">0</span> <span class="token operator">-</span><span class="token number">3</span><span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">4</span><span class="token number">3</span>  <span class="token number">1</span>  <span class="token number">2</span><span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>排名会从1开始一直到数组中有效数据的数量。接下来介绍Series和DataFrame的rank方法。默认情况下，rank是通过“为各组分配一个平均排名”的方式破坏平级关系的：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>rank<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token number">6.5</span><span class="token number">1</span>    <span class="token number">1.0</span><span class="token number">2</span>    <span class="token number">6.5</span><span class="token number">3</span>    <span class="token number">4.5</span><span class="token number">4</span>    <span class="token number">3.0</span><span class="token number">5</span>    <span class="token number">2.0</span><span class="token number">6</span>    <span class="token number">4.5</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以根据值在原数据中出现的顺序给出排名：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">217</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">217</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token number">6.0</span><span class="token number">1</span>    <span class="token number">1.0</span><span class="token number">2</span>    <span class="token number">7.0</span><span class="token number">3</span>    <span class="token number">4.0</span><span class="token number">4</span>    <span class="token number">3.0</span><span class="token number">5</span>    <span class="token number">2.0</span><span class="token number">6</span>    <span class="token number">5.0</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，条目0和2没有使用平均排名6.5，它们被设成了6和7，因为数据中标签0位于标签2的前面。</p><p>你也可以按降序进行排名：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Assign tie values the maximum rank in the group</span>In <span class="token punctuation">[</span><span class="token number">218</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>rank<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">218</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token number">2.0</span><span class="token number">1</span>    <span class="token number">7.0</span><span class="token number">2</span>    <span class="token number">2.0</span><span class="token number">3</span>    <span class="token number">4.0</span><span class="token number">4</span>    <span class="token number">5.0</span><span class="token number">5</span>    <span class="token number">6.0</span><span class="token number">6</span>    <span class="token number">4.0</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表5-6列出了所有用于破坏平级关系的method选项。DataFrame可以在行或列上计算排名：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">219</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4.3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                       <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a    b    c<span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">4.3</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">7.0</span>  <span class="token number">5.0</span><span class="token number">2</span>  <span class="token number">0</span> <span class="token operator">-</span><span class="token number">3.0</span>  <span class="token number">8.0</span><span class="token number">3</span>  <span class="token number">1</span>  <span class="token number">2.0</span> <span class="token operator">-</span><span class="token number">2.5</span>In <span class="token punctuation">[</span><span class="token number">221</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">.</span>rank<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'columns'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">221</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a    b    c<span class="token number">0</span>  <span class="token number">2.0</span>  <span class="token number">3.0</span>  <span class="token number">1.0</span><span class="token number">1</span>  <span class="token number">1.0</span>  <span class="token number">3.0</span>  <span class="token number">2.0</span><span class="token number">2</span>  <span class="token number">2.0</span>  <span class="token number">1.0</span>  <span class="token number">3.0</span><span class="token number">3</span>  <span class="token number">2.0</span>  <span class="token number">3.0</span>  <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://upload-images.jianshu.io/upload_images/7178691-7edfab5b4a147581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表5-6 排名时用于破坏平级关系的方法"></p><h2 id="带有重复标签的轴索引"><a href="#带有重复标签的轴索引" class="headerlink" title="带有重复标签的轴索引"></a>带有重复标签的轴索引</h2><p>直到目前为止，我所介绍的所有范例都有着唯一的轴标签（索引值）。虽然许多pandas函数（如reindex）都要求标签唯一，但这并不是强制性的。我们来看看下面这个简单的带有重复索引值的Series：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">222</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">223</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">223</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">0</span>a    <span class="token number">1</span>b    <span class="token number">2</span>b    <span class="token number">3</span>c    <span class="token number">4</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>索引的is_unique属性可以告诉你它的值是否是唯一的：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>index<span class="token punctuation">.</span>is_uniqueOut<span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于带有重复值的索引，数据选取的行为将会有些不同。如果某个索引对应多个值，则返回一个Series；而对应单个值的，则返回一个标量值：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">225</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">225</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">0</span>a    <span class="token number">1</span>dtype<span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">226</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">226</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样会使代码变复杂，因为索引的输出类型会根据标签是否有重复发生变化。</p><p>对DataFrame的行进行索引时也是如此：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">227</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">228</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">228</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           <span class="token number">0</span>         <span class="token number">1</span>         <span class="token number">2</span>a  <span class="token number">0.274992</span>  <span class="token number">0.228913</span>  <span class="token number">1.352917</span>a  <span class="token number">0.886429</span> <span class="token operator">-</span><span class="token number">2.001637</span> <span class="token operator">-</span><span class="token number">0.371843</span>b  <span class="token number">1.669025</span> <span class="token operator">-</span><span class="token number">0.438570</span> <span class="token operator">-</span><span class="token number">0.539741</span>b  <span class="token number">0.476985</span>  <span class="token number">3.248944</span> <span class="token operator">-</span><span class="token number">1.021228</span>In <span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           <span class="token number">0</span>         <span class="token number">1</span>         <span class="token number">2</span>b  <span class="token number">1.669025</span> <span class="token operator">-</span><span class="token number">0.438570</span> <span class="token operator">-</span><span class="token number">0.539741</span>b  <span class="token number">0.476985</span>  <span class="token number">3.248944</span> <span class="token operator">-</span><span class="token number">1.021228</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-3-汇总和计算描述统计"><a href="#5-3-汇总和计算描述统计" class="headerlink" title="5.3 汇总和计算描述统计"></a>5.3 汇总和计算描述统计</h1><p>pandas对象拥有一组常用的数学和统计方法。它们大部分都属于约简和汇总统计，用于从Series中提取单个值（如sum或mean）或从DataFrame的行或列中提取一个Series。跟对应的NumPy数组方法相比，它们都是基于没有缺失数据的假设而构建的。看一个简单的DataFrame：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.4</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7.1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                    <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                   index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                   columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     one  twoa  <span class="token number">1.40</span>  NaNb  <span class="token number">7.10</span> <span class="token operator">-</span><span class="token number">4.5</span>c   NaN  NaNd  <span class="token number">0.75</span> <span class="token operator">-</span><span class="token number">1.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用DataFrame的sum方法将会返回一个含有列的和的Series：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one    <span class="token number">9.25</span>two   <span class="token operator">-</span><span class="token number">5.80</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入axis=’columns’或axis=1将会按行进行求和运算：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a    <span class="token number">1.40</span>b    <span class="token number">2.60</span>c     NaNd   <span class="token operator">-</span><span class="token number">0.55</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NA值会自动被排除，除非整个切片（这里指的是行或列）都是NA。通过skipna选项可以禁用该功能：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'columns'</span><span class="token punctuation">,</span> skipna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a      NaNb    <span class="token number">1.300</span>c      NaNd   <span class="token operator">-</span><span class="token number">0.275</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表5-7列出了这些约简方法的常用选项。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://upload-images.jianshu.io/upload_images/7178691-af35e3809278410e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>有些方法（如idxmin和idxmax）返回的是间接统计（比如达到最小值或最大值的索引）：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> one    btwo    ddtype<span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一些方法则是累计型的：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     one  twoa  <span class="token number">1.40</span>  NaNb  <span class="token number">8.50</span> <span class="token operator">-</span><span class="token number">4.5</span>c   NaN  NaNd  <span class="token number">9.25</span> <span class="token operator">-</span><span class="token number">5.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一种方法，它既不是约简型也不是累计型。describe就是一个例子，它用于一次性产生多个汇总统计：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             one       twocount  <span class="token number">3.000000</span>  <span class="token number">2.000000</span>mean   <span class="token number">3.083333</span> <span class="token operator">-</span><span class="token number">2.900000</span>std    <span class="token number">3.493685</span>  <span class="token number">2.262742</span>min    <span class="token number">0.750000</span> <span class="token operator">-</span><span class="token number">4.500000</span><span class="token number">25</span><span class="token operator">%</span>    <span class="token number">1.075000</span> <span class="token operator">-</span><span class="token number">3.700000</span><span class="token number">50</span><span class="token operator">%</span>    <span class="token number">1.400000</span> <span class="token operator">-</span><span class="token number">2.900000</span><span class="token number">75</span><span class="token operator">%</span>    <span class="token number">4.250000</span> <span class="token operator">-</span><span class="token number">2.100000</span>max    <span class="token number">7.100000</span> <span class="token operator">-</span><span class="token number">1.300000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于非数值型数据，describe会产生另外一种汇总统计：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">238</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">239</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">239</span><span class="token punctuation">]</span><span class="token punctuation">:</span> count     <span class="token number">16</span>unique     <span class="token number">3</span>top        afreq       <span class="token number">8</span>dtype<span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表5-8列出了所有与描述统计相关的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://upload-images.jianshu.io/upload_images/7178691-11fa967f658ac314.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="相关系数与协方差"><a href="#相关系数与协方差" class="headerlink" title="相关系数与协方差"></a>相关系数与协方差</h2><p>有些汇总统计（如相关系数和协方差）是通过参数对计算出来的。我们来看几个DataFrame，它们的数据来自Yahoo!Finance的股票价格和成交量，使用的是pandas-datareader包（可以用conda或pip安装）：</p><pre class="line-numbers language-python"><code class="language-python">conda install pandas<span class="token operator">-</span>datareader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我使用pandas_datareader模块下载了一些股票数据：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas_datareader<span class="token punctuation">.</span>data <span class="token keyword">as</span> weball_data <span class="token operator">=</span> <span class="token punctuation">{</span>ticker<span class="token punctuation">:</span> web<span class="token punctuation">.</span>get_data_yahoo<span class="token punctuation">(</span>ticker<span class="token punctuation">)</span>            <span class="token keyword">for</span> ticker <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'AAPL'</span><span class="token punctuation">,</span> <span class="token string">'IBM'</span><span class="token punctuation">,</span> <span class="token string">'MSFT'</span><span class="token punctuation">,</span> <span class="token string">'GOOG'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>price <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>ticker<span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'Adj Close'</span><span class="token punctuation">]</span>                     <span class="token keyword">for</span> ticker<span class="token punctuation">,</span> data <span class="token keyword">in</span> all_data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>volume <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>ticker<span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'Volume'</span><span class="token punctuation">]</span>                      <span class="token keyword">for</span> ticker<span class="token punctuation">,</span> data <span class="token keyword">in</span> all_data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：此时Yahoo! Finance已经不存在了，因为2017年Yahoo!被Verizon收购了。参阅pandas-datareader文档，可以学习最新的功能。</p></blockquote><p>现在计算价格的百分数变化，时间序列的操作会在第11章介绍：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">242</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns <span class="token operator">=</span> price<span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                 AAPL      GOOG       IBM      MSFTDate                                              <span class="token number">2016</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">-</span><span class="token number">0.000680</span>  <span class="token number">0.001837</span>  <span class="token number">0.002072</span> <span class="token operator">-</span><span class="token number">0.003483</span><span class="token number">2016</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">18</span> <span class="token operator">-</span><span class="token number">0.000681</span>  <span class="token number">0.019616</span> <span class="token operator">-</span><span class="token number">0.026168</span>  <span class="token number">0.007690</span><span class="token number">2016</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">19</span> <span class="token operator">-</span><span class="token number">0.002979</span>  <span class="token number">0.007846</span>  <span class="token number">0.003583</span> <span class="token operator">-</span><span class="token number">0.002255</span><span class="token number">2016</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">-</span><span class="token number">0.000512</span> <span class="token operator">-</span><span class="token number">0.005652</span>  <span class="token number">0.001719</span> <span class="token operator">-</span><span class="token number">0.004867</span><span class="token number">2016</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">21</span> <span class="token operator">-</span><span class="token number">0.003930</span>  <span class="token number">0.003011</span> <span class="token operator">-</span><span class="token number">0.012474</span>  <span class="token number">0.042096</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Series的corr方法用于计算两个Series中重叠的、非NA的、按索引对齐的值的相关系数。与此类似，cov用于计算协方差：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">[</span><span class="token string">'MSFT'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>corr<span class="token punctuation">(</span>returns<span class="token punctuation">[</span><span class="token string">'IBM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0.49976361144151144</span>In <span class="token punctuation">[</span><span class="token number">245</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">[</span><span class="token string">'MSFT'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cov<span class="token punctuation">(</span>returns<span class="token punctuation">[</span><span class="token string">'IBM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">245</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">8.8706554797035462e-05</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为MSTF是一个合理的Python属性，我们还可以用更简洁的语法选择列：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">246</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">.</span>MSFT<span class="token punctuation">.</span>corr<span class="token punctuation">(</span>returns<span class="token punctuation">.</span>IBM<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">246</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0.49976361144151144</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另一方面，DataFrame的corr和cov方法将以DataFrame的形式分别返回完整的相关系数或协方差矩阵：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           AAPL      GOOG       IBM      MSFTAAPL  <span class="token number">1.000000</span>  <span class="token number">0.407919</span>  <span class="token number">0.386817</span>  <span class="token number">0.389695</span>GOOG  <span class="token number">0.407919</span>  <span class="token number">1.000000</span>  <span class="token number">0.405099</span>  <span class="token number">0.465919</span>IBM   <span class="token number">0.386817</span>  <span class="token number">0.405099</span>  <span class="token number">1.000000</span>  <span class="token number">0.499764</span>MSFT  <span class="token number">0.389695</span>  <span class="token number">0.465919</span>  <span class="token number">0.499764</span>  <span class="token number">1.000000</span>In <span class="token punctuation">[</span><span class="token number">248</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">.</span>cov<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">248</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           AAPL      GOOG       IBM      MSFTAAPL  <span class="token number">0.000277</span>  <span class="token number">0.000107</span>  <span class="token number">0.000078</span>  <span class="token number">0.000095</span>GOOG  <span class="token number">0.000107</span>  <span class="token number">0.000251</span>  <span class="token number">0.000078</span>  <span class="token number">0.000108</span>IBM   <span class="token number">0.000078</span>  <span class="token number">0.000078</span>  <span class="token number">0.000146</span>  <span class="token number">0.000089</span>MSFT  <span class="token number">0.000095</span>  <span class="token number">0.000108</span>  <span class="token number">0.000089</span>  <span class="token number">0.000215</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用DataFrame的corrwith方法，你可以计算其列或行跟另一个Series或DataFrame之间的相关系数。传入一个Series将会返回一个相关系数值Series（针对各列进行计算）：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">249</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">.</span>corrwith<span class="token punctuation">(</span>returns<span class="token punctuation">.</span>IBM<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">249</span><span class="token punctuation">]</span><span class="token punctuation">:</span> AAPL    <span class="token number">0.386817</span>GOOG    <span class="token number">0.405099</span>IBM     <span class="token number">1.000000</span>MSFT    <span class="token number">0.499764</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入一个DataFrame则会计算按列名配对的相关系数。这里，我计算百分比变化与成交量的相关系数：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">.</span>corrwith<span class="token punctuation">(</span>volume<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">:</span> AAPL   <span class="token operator">-</span><span class="token number">0.075565</span>GOOG   <span class="token operator">-</span><span class="token number">0.007067</span>IBM    <span class="token operator">-</span><span class="token number">0.204849</span>MSFT   <span class="token operator">-</span><span class="token number">0.092950</span>dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入axis=’columns’即可按行进行计算。无论如何，在计算相关系数之前，所有的数据项都会按标签对齐。</p><h2 id="唯一值、值计数以及成员资格"><a href="#唯一值、值计数以及成员资格" class="headerlink" title="唯一值、值计数以及成员资格"></a>唯一值、值计数以及成员资格</h2><p>还有一类方法可以从一维Series的值中抽取信息。看下面的例子：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">251</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个函数是unique，它可以得到Series中的唯一值数组：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">252</span><span class="token punctuation">]</span><span class="token punctuation">:</span> uniques <span class="token operator">=</span> obj<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">253</span><span class="token punctuation">]</span><span class="token punctuation">:</span> uniquesOut<span class="token punctuation">[</span><span class="token number">253</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>object<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>返回的唯一值是未排序的，如果需要的话，可以对结果再次进行排序（uniques.sort()）。相似的，value_counts用于计算一个Series中各值出现的频率：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">254</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">254</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c    <span class="token number">3</span>a    <span class="token number">3</span>b    <span class="token number">2</span>d    <span class="token number">1</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了便于查看，结果Series是按值频率降序排列的。value_counts还是一个顶级pandas方法，可用于任何数组或序列：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>obj<span class="token punctuation">.</span>values<span class="token punctuation">,</span> sort<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a    <span class="token number">3</span>b    <span class="token number">2</span>c    <span class="token number">3</span>d    <span class="token number">1</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>isin用于判断矢量化集合的成员资格，可用于过滤Series中或DataFrame列中数据的子集：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    c<span class="token number">1</span>    a<span class="token number">2</span>    d<span class="token number">3</span>    a<span class="token number">4</span>    a<span class="token number">5</span>    b<span class="token number">6</span>    b<span class="token number">7</span>    c<span class="token number">8</span>    cdtype<span class="token punctuation">:</span> objectIn <span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mask <span class="token operator">=</span> obj<span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">258</span><span class="token punctuation">]</span><span class="token punctuation">:</span> maskOut<span class="token punctuation">[</span><span class="token number">258</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>     <span class="token boolean">True</span><span class="token number">1</span>    <span class="token boolean">False</span><span class="token number">2</span>    <span class="token boolean">False</span><span class="token number">3</span>    <span class="token boolean">False</span><span class="token number">4</span>    <span class="token boolean">False</span><span class="token number">5</span>     <span class="token boolean">True</span><span class="token number">6</span>     <span class="token boolean">True</span><span class="token number">7</span>     <span class="token boolean">True</span><span class="token number">8</span>     <span class="token boolean">True</span>dtype<span class="token punctuation">:</span> boolIn <span class="token punctuation">[</span><span class="token number">259</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">259</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0</span>    c<span class="token number">5</span>    b<span class="token number">6</span>    b<span class="token number">7</span>    c<span class="token number">8</span>    cdtype<span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与isin类似的是Index.get_indexer方法，它可以给你一个索引数组，从可能包含重复值的数组到另一个不同值的数组：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">:</span> to_match <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">261</span><span class="token punctuation">]</span><span class="token punctuation">:</span> unique_vals <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">262</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span>unique_vals<span class="token punctuation">)</span><span class="token punctuation">.</span>get_indexer<span class="token punctuation">(</span>to_match<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">262</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表5-9给出了这几个方法的一些参考信息。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="http://upload-images.jianshu.io/upload_images/7178691-b53c4a9d65a2db32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表5-9 唯一值、值计数、成员资格方法"></p><p>有时，你可能希望得到DataFrame中多个相关列的一张柱状图。例如：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">263</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Qu1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                      <span class="token string">'Qu2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>                      <span class="token string">'Qu3'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Qu1  Qu2  Qu3<span class="token number">0</span>    <span class="token number">1</span>    <span class="token number">2</span>    <span class="token number">1</span><span class="token number">1</span>    <span class="token number">3</span>    <span class="token number">3</span>    <span class="token number">5</span><span class="token number">2</span>    <span class="token number">4</span>    <span class="token number">1</span>    <span class="token number">2</span><span class="token number">3</span>    <span class="token number">3</span>    <span class="token number">2</span>    <span class="token number">4</span><span class="token number">4</span>    <span class="token number">4</span>    <span class="token number">3</span>    <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将pandas.value_counts传给该DataFrame的apply函数，就会出现：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">265</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result <span class="token operator">=</span> data<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">266</span><span class="token punctuation">]</span><span class="token punctuation">:</span> resultOut<span class="token punctuation">[</span><span class="token number">266</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Qu1  Qu2  Qu3<span class="token number">1</span>  <span class="token number">1.0</span>  <span class="token number">1.0</span>  <span class="token number">1.0</span><span class="token number">2</span>  <span class="token number">0.0</span>  <span class="token number">2.0</span>  <span class="token number">1.0</span><span class="token number">3</span>  <span class="token number">2.0</span>  <span class="token number">2.0</span>  <span class="token number">0.0</span><span class="token number">4</span>  <span class="token number">2.0</span>  <span class="token number">0.0</span>  <span class="token number">2.0</span><span class="token number">5</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，结果中的行标签是所有列的唯一值。后面的频率值是每个列中这些值的相应计数。</p><h1 id="5-4-总结"><a href="#5-4-总结" class="headerlink" title="5.4 总结"></a>5.4 总结</h1><p>在下一章，我们将讨论用pandas读取（或加载）和写入数据集的工具。</p><p>之后，我们将更深入地研究使用pandas进行数据清洗、规整、分析和可视化工具。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理实验报告</title>
      <link href="/2021/09/10/wu-li-shi-yan-bao-gao/"/>
      <url>/2021/09/10/wu-li-shi-yan-bao-gao/</url>
      
        <content type="html"><![CDATA[<h2 id="物理实验报告"><a href="#物理实验报告" class="headerlink" title="物理实验报告"></a>物理实验报告</h2>]]></content>
      
      
      <categories>
          
          <category> 写给自己的散文诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Musical reviews of 以后要做的事</title>
      <link href="/2021/09/09/musical-reviews-of-yi-hou-yao-zuo-de-shi/"/>
      <url>/2021/09/09/musical-reviews-of-yi-hou-yao-zuo-de-shi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a69c5d2f77b5e63ffa28f288983b5171930cfbb5d97ed15f5cdac9c11d35e006"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu ! enter some words to prove</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 写给自己的散文诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写给自己的散文诗 </tag>
            
            <tag> 林俊杰 </tag>
            
            <tag> 乐评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dian团队初体验</title>
      <link href="/2021/09/08/dian-tuan-dui-chu-ti-yan/"/>
      <url>/2021/09/08/dian-tuan-dui-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>本来我是怀着很忐忑的心情来的，甚至来都不敢单独过来😑，和别的新来的同学@高一帆约定好了才开始过来。感觉从面试到之后的讲座再到后来的发布任务蒋学长都有些严厉hhh……但是到了之后感觉蒋学长还是非常平易近人的！很耐心的给我们解释了我们的人员注册和我们的有关项目安排情况。另外就是给我们安排座位来坐，幸运的我坐到了蒋组长（<del>以下统称蒋神</del>）的对面。我觉得我坐的位置算是非常好了，非常靠里，这样一来我偷偷写作业就没人能发现了😅。</p><h2 id="显示屏"><a href="#显示屏" class="headerlink" title="显示屏"></a>显示屏</h2><p>显示屏是最大的惊喜！！没有之一！没有想到我们每个人都能有一个显示屏，我之前一直吐槽我pro13的小小的显示屏，只有13.3寸，让人体验不是很好，我就厚颜无耻的选了一个“看起来”不错的。</p><p><a href="https://imgtu.com/i/hHjqgA" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/08/hHjqgA.jpg" alt="就是画质有些……"></a></p><p>可是当我连好HDMI线的时候，发现这个显示屏的画质着实……emmm，显示屏确实变大了，但是这画质……能有1080p嘛🙄。不过总比没有好，<del>毕竟敲个代码嘛，没有必要用到这么好的显示屏</del>.这篇博客就是在Dian团队在这一块显示屏上写的。</p><p>整体来说这个显示屏还是让人可以接受的，还算是挺满意了。</p><h2 id="以后的一些安排（防遗忘）"><a href="#以后的一些安排（防遗忘）" class="headerlink" title="以后的一些安排（防遗忘）"></a>以后的一些安排（防遗忘）</h2><p>这里先记一下吧大概：</p><ul><li>我们的人员注册需要到后来的相互评测之后才能开始</li><li>卡的注册激活需要等到明天才可以开始</li><li>我们的辉瑞雷电项目需要等到10月，这倒是一个好消息，因为听蒋学长说团队里面能够有这样比较大块的时间来学习，这样的时间是很宝贵的，毕竟平时会比较忙，有各种各样的相关项目之类的。</li><li>项目组还是很忙的</li><li><strong>平时是可以在这里写作业的！我来之前以为这里只能做Dian的任务……</strong></li><li>注意我们尽量要去参加每周的例会，这个很重要。每年好像有2次不参加的理由？好像是。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 写给自己的散文诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写给自己的散文诗 </tag>
            
            <tag> Dian团队 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谭志虎院长访谈</title>
      <link href="/2021/09/06/tan-zhi-hu-yuan-chang-fang-tan/"/>
      <url>/2021/09/06/tan-zhi-hu-yuan-chang-fang-tan/</url>
      
        <content type="html"><![CDATA[<h1 id="“探科访计”谭志虎副院长访谈"><a href="#“探科访计”谭志虎副院长访谈" class="headerlink" title="“探科访计”谭志虎副院长访谈"></a>“探科访计”谭志虎副院长访谈</h1><hr><p>7月10号上午，计算机科学与技术学院赴华中科技大学“探科访计”暑期社会实践队队长逯润雨、副队长姜昱以及安全员杨释然来到华中科技大学南一楼谭副院长办公室对谭院长进行了相关访谈。</p><h2 id="访谈筹备"><a href="#访谈筹备" class="headerlink" title="访谈筹备"></a>访谈筹备</h2><p>事先完全没有想到访谈过程会如此顺利，采访前还担心会不会谭院长不愿意接受我们的邀请，但是张辅导员鼓励我们去和院长交流，说谭副院长还是很欢迎本科生找他去交流的。果然第一天晚上联系，第二天就确定并开始了访谈。院长很爽快的抽出了将近一上午的时间接受我们的访谈并且还很细致入微讲解我们学院未来的规划与打算、我们毕业生的一些建议与去向政策、院里对学生意见的重视。这足可见谭副院长的平易近人以及对于我们本科生学习生活的重视。最后也给了我们一个惊喜，（这个惊喜作为彩蛋放到下一篇文末）当然事先我们也做了充足的筹备，列出了一些方面计划：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021071012362688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="访谈谭志虎副院长"></p><p>当然，以上也只是一些方面。我们访谈并未按照这些方面来，而是相对很轻松的聊到哪里讲哪里。谭院长可谓健谈，也可能是这都是他自己亲自参与并实施的规划，谭院长很乐意与我们分享目前院里的一些问题与计划。也希望我们学生能够是一个很关键的一环，一起来完善我们学院的建设。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710123855479.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="学院课程体系结构"><a href="#学院课程体系结构" class="headerlink" title="学院课程体系结构"></a>学院课程体系结构</h2><h3 id="早年课程变化"><a href="#早年课程变化" class="headerlink" title="早年课程变化"></a>早年课程变化</h3><p>谭副院长从本科到硕士，再到博士都是在华科读的，和上次采访的邵教授一样，都是是土生土长的华中大人。对于华科的变迁、课程的变化可以说是非常熟悉了。谈到早年自己学习的课程与当前课程变化，谭教授讲到实际上变化并没有特别大，基础课都是没怎么变化的。微积分、大学物理这些都是变化不大的。可能思政课会少一点（毕竟“理论是不断完善的”）。而IT中国这种课程相比之下更加多元化了，开眼界的课程，之前都是本院的教授在讲，而后到我们这里也会邀请到各个工业界、学术界的大牛来开讲座了。</p><h3 id="教学体系目前改进以及计划"><a href="#教学体系目前改进以及计划" class="headerlink" title="教学体系目前改进以及计划"></a>教学体系目前改进以及计划</h3><h4 id="现存问题"><a href="#现存问题" class="headerlink" title="现存问题"></a>现存问题</h4><p>我们这一届还有“模电”这门被广大学长学姐们吐槽的课程，谈到这门课程，谭院长认为上几届反响不好的原因实际上有以下几点：1. 认为这一门课没有用，计算机用不到。  2. 对于学到的知识不满意，认为或许是老师讲得不够用心？没有学到真正的知识。  3. 占用专业课时间。</p><p>实际上谭院长也说到了，我们大学不会说这一门课有没有用，本就不是完全面向就业的，大学不是技校培训机构，大学主要还是研究导向型的。实际上的确，院长承认这门课对于我们就业方面的确用处不大，但是我们本来就不是为了就业在开课程。这个在我们大学里面许多方面都用得到，比如说我们机甲大师、机器人方面，电信、机械那里做得就很不错。如果我们没有数电方面的知识，实际上就很占劣势的。只会代码综合能力不够强。当然这只是举一个例子，这个模电或是其他“没用学科”学习实际上很大程度上可以提高我们一些眼界、一些综合方面的能力。当然模电实际上很多学校也去掉了，除了清华和我们校一些少数学校，由于我们这一届在培养计划内，所以没有办法去掉，也就是我们还需要学😅。下一届可能就会考虑去掉。</p><p>另外我们还反映了计卓班级“一元多元分析学”这方面的问题，计卓班级实际上没有必要学习这门课程，可以学微积分，但是再深一步数学分析就相当不可取了，难度大而且确实对于计算机专业微积分完全可以满足要求了。谭院长说这是启明学院的要求，他可以帮助我们去交涉一下。（然而我们已经学完了😭）</p><h4 id="20级目前一些改进"><a href="#20级目前一些改进" class="headerlink" title="20级目前一些改进"></a>20级目前一些改进</h4><p>虽然20级培养计划已经确定，但是课程顺序可以继续调整。谭院长将我们数据结构前移至大一下，以及将许多的大三要学的专业课往前移，以减轻我们大三大四去实习的压力。另外也讲到了许多选修课程，选修课也是成体系的，有着3条选修课的主线，一个是人工智能AI方面是人工智能导论到机器学习再到nlp、cv、神经网络图论方向，还有一个大数据分析、大数据展开的一条线，以及嵌入式的一条线。我们很幸运这些我们都可以自由选择。当然这些课程由于是新开课程，难免会有许多不足之处，但是课程体系都是一步一步完善的，相信会在尝试中一步一步变好。</p><p>谈到洛谷题，实际上刷洛谷题就是为了提升自己的编程能力。这个对于我们找工作会有很大的帮助，我们在这个时候接触学习算法题到为后来为就业刷剑指offer这些节省了不少时间。同时提高了我们的编程水平。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710123855465.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="未来计划"><a href="#未来计划" class="headerlink" title="未来计划"></a>未来计划</h4><p>实际上我们20届也相当于一个过渡的过程，以后学院会删减有关课程，为了减轻后期负担也会将一些课程前放。</p><p>谭院长谈到了软件工程这门课，他打算让我们这门课与大创项目联系起来，让我们自由组队真正做一个较为复杂的项目工程。分工合作，最后也能有一个成功的项目经历。方便以后找工作面试时讲解展示自己的经历。</p><p>另外有关慕课课程体系。谭院长讲到了为什么哈工大的慕课体系这么受欢迎，原因就在于以下几点：1. 哈工大3个校区不同学院都合力认真办。 2. 将学院老师最好一面展示出来，许多其他大学老师都是很机械的念ppt主要因为他们是到棚里拍摄，条件不是很好，同时摄影公司也图方便省事，仅仅追求录了视频。没有追求质量。而哈工大老师是自由演讲，并不是让老师在那里念PPT。  </p><p>而我们计算机组成原理的慕课就是很成功的，没有给老师什么限制，让老师随意发挥，这样能够最大发挥出老师的能力。也是有慕课这部分的的原因，我们的后面的计算机组成原理谭院长也主编编写了一本书，受到了广大好评。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710134715611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>我们这一届还有模电一些课程、</li><li>我们过渡（只是前移）</li><li>未来计划课程的删减和</li><li>逐步纠错的过程</li><li>学院成体系的结构课程<ul><li>软件工程<ul><li>和大创联系到一起，让我们组队真正做一个项目</li><li>每个人都有项目经历、大学四年有着一个成功的项目可以方便以后找工作面试讲解展示</li></ul></li><li>慕课<ul><li>哈工大的例子即兴演讲、把老师最好一面充分展示、哈工大是很多院、校区合作的结果</li><li>一些不好的：念PPT、时间紧在棚里很机械</li><li>我们计组慕课就是相对而言很成功、老师可以随意发挥（也是因为慕课所以后面计组才有出书之类的</li></ul></li></ul></li></ol><h3 id="教材书体系"><a href="#教材书体系" class="headerlink" title="教材书体系"></a>教材书体系</h3><p>另外就是我们的教科书体系计划。存储、计算机系统结构这一块儿是我们学院的强项，而我们学院也经过多年对于这方面的教学体系也是非常成熟完备，所以我们学院以此为始来打造属于我们华中大的教材体系，是非常合适的。</p><h4 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h4><p>这是谭院长亲自担任主编的一本书，也是我们目前学院教材体系第一本成型出版并投入市场广受好评的一本书。谈到这本书编写的缘由，谭院长刚开始是帮另一位院长重印书籍完善的时候帮其写了两章，后来那位院长由于种种原因没有重印。目前市面上的两本主流书一本陈旧晦涩难懂、一本太过简略只有细节，用于教学都不太好。而之后恰巧出版社看到我们学院的计算机组成原理慕课在慕课平台上广受好评，于是就主动联系了谭院长约稿出书，谭院长这个时候反正已经写了两章，干脆一不做二不休，就编写了整本书。期间谭院长也表示收到了许多学生的帮助编写。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710143306399.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>本书在3月1号版之后也是得到了许许多多同行们的赞誉与采用，书销量已经达到3万本，京东上广受好评。已经有50多所学校采用这一本书教学，这无疑是非常好的一个成绩。谭院长透露本书已经被出版社评为季度好书，也准备在评年度好书。收到同行的赞誉的同时，也收到了许多有价值的反馈，谭院长也纠正了100多个书中的错误，准备再版。</p><h4 id="操作系统原理"><a href="#操作系统原理" class="headerlink" title="操作系统原理"></a>操作系统原理</h4><p>这里又要提到我们之前采访过的邵志远教授了。谭院长告诉我们，邵志远教授负责本书的编写。据谭院长说邵教授前些日子翻译了一本英文操作系统书籍，出版社觉得邵教授文笔很不错。邵教授暑假筹备编写操作系统原理这一书籍。（这也让我们想到上次去采访邵教授的时候他正在对着显示屏编写代码，不知道是不是我们即将到来的操作系统原理呢？）</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710142753486.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h4><p>而数字电路书籍也正处于编写之中，这一系列计算机系统的课程：数字逻辑、汇编语言再到我们的计组以及之后的系统结构、接口技术形成我们学院的王牌课程体系。学院愿景是非常好的。也希望我们享受到学院体系同时也能为其完善出一份力！</p><ol><li><p>计组的的编写（</p><ul><li>缘由 （重印写了两章、印刷社慕课</li><li>现有两本书不怎么样（哈工大陈旧晦涩、另外一本文科一样非常粗糙、完全没有细节）、学院这方面很成熟有体系，教学上很完备。</li><li>与实验结合非常好、细节非常完备</li><li>书销量、市场好50各学校（京东 3万册、评季度好书、准备评年度</li><li>地大的问题（大一学、基础不牢、无程序设计基础和电路、汇编基础都没有</li><li>用户反馈准备改进，纠正了100个错误</li></ul></li><li><p>邵教授操作系统</p><ul><li>他觉得目前教材不好</li><li>翻译了一本英文操作系统，出版社觉得文笔好（我们上次采访就在那儿写代码（没想到深藏不露啊））</li><li>操作系统原理暑假筹备编写</li></ul></li></ol><ol start="3"><li><p>数字电路书正在编写</p></li><li><p>整个体系结构的流程变化（希望数字电路、计组、硬件设计成为华科特色体系，这方面本就是我们优势：存储计算机系统结构这一块儿。</p></li></ol><h3 id="课程评价"><a href="#课程评价" class="headerlink" title="课程评价"></a>课程评价</h3><p>有关课程评价方面，谭院长也有许多自己的看法：一个是教务处的网上评教系统，另一个是院长自己主持的期末质量问卷：</p><ol><li>网上评教<ul><li>客观评价</li><li>评教本身存在一定问题：指标太多、教务处与学生重心不同</li></ul></li><li>期末质量问卷</li></ol><ul><li>不要赶时间就随意，希望同学们可以认真编写</li><li>尽量电脑写，手机打字不舒服</li><li>人身攻击不可取</li><li>有意见直接提（他会找不满意的老师谈话）</li><li>好的老师勇于夸赞，院长会给老师发这些好的评价、老师受鼓舞，形成良性循环。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710123855467.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="本科生未来打算"><a href="#本科生未来打算" class="headerlink" title="本科生未来打算"></a>本科生未来打算</h2><h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><h4 id="华储班"><a href="#华储班" class="headerlink" title="华储班"></a>华储班</h4><p>实习的话，谭院长谈到了华为的华储班，我们学院与华为合作了一个华储班实习班级，等到大四的时候会有我们学院的学生组成一个班级去华为企业进行一个为期一年的深入实习，这可是一个绝佳的机会，华为会对我们班级同学进行深入细致的培训，相当于一个很好融入接触工业界的机会。谭院长提到实习薪资是非常高的，6000一月，华为本意就是为自己企业培养员工，给出了很大的诚意。</p><p>谭院长也鼓励我们计卓的同学都去努力争取一下这个机会。因为刚开始今年这一届只收了10个，到我们那一届，就会变成很多人，到时候预计最多可以有80个（当然很乐观估计了）。</p><h4 id="卓越班安排"><a href="#卓越班安排" class="headerlink" title="卓越班安排"></a>卓越班安排</h4><p>相比之下卓越班有一个优势就是大四没有课，学院本来安排就是让卓越班的同学出去实习，这一年的实习时间是很有优势的。谭院长希望我们能够好好利用这一年。过去学院是给安排，去武汉一家企业，但是很多同学会不满意学院给的平台。现如今主要就是我们自己找实习机会。</p><h3 id="出国"><a href="#出国" class="headerlink" title="出国"></a>出国</h3><p>谭院长谈到了出国主要有两条路，一个是读博，一个是读硕。读硕的话，比较贵一点，尽量选一个好学校。读博的话需要待挺长时间。另外出国需要我们早做打算，不要一味卷加权。</p><h3 id="偏向就业还是加权"><a href="#偏向就业还是加权" class="headerlink" title="偏向就业还是加权"></a>偏向就业还是加权</h3><p>相比之下：</p><ul><li>本硕博班偏研究所以课程比较宽松、而且希望能够进实验室做项目科研。</li><li>卓工班偏向就业、工业界人才所以有大四一年机会实习。</li><li>普通班级的话较为综合一些。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710123855477.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>实习（卓越班<ul><li>卓越班优势（大四一年、</li><li>华储班</li><li>过去是怎么安排的、不满意</li><li></li></ul></li><li>出国<ul><li>读博（关键好老师、</li><li>读硕（好学校，学费比较贵、</li><li>早做打算、不要只卷加权</li></ul></li><li>工作</li><li>偏向就业还是偏向研究<ul><li>相比之下：卓工班偏向就业、为国家培养工业界人才，所以有大四一年机会实习。</li><li>本硕博班偏研究所以课程比较宽松、而且希望能够进实验室做项目科研，目的是为国家培养科学家。</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710150424863.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="创新创业活动"><a href="#创新创业活动" class="headerlink" title="创新创业活动"></a>创新创业活动</h2><h3 id="大疆计划"><a href="#大疆计划" class="headerlink" title="大疆计划"></a>大疆计划</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://mmbiz.qpic.cn/mmbiz_jpg/ZEDY7NCtoLE0VYWXYxyn8BElkrD9XfdykgGOkknjTGKODYsmLXpSFHd2HE67yUwDN0F2NuOiaMs56pjJibXshYkA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="大疆计划"></p><p>大疆假期夏令营，”疆来计划“学院有相当多的投入的，已经投入了80万，而且预计还会有后期持续投入。谭院长也希望我们学生也能够配合宣传参与一下这个项目。感兴趣的同学，可以考助教资格证，后续可组队参加robmaster机甲大赛。详情可以关注这个链接：<a href="https://mp.weixin.qq.com/s?__biz=MzkwNDI1Mjg3Mg==&mid=2247484105&idx=1&sn=2bdec2193c6c48f65f1a071d89655d01&chksm=c0889e6ef7ff1778dd6e9b620a19950dcef20822ecceb2eea9875c4d19afcd115338621d01f2&mpshare=1&scene=23&srcid=0706PQD8F6sDi7qwHK7HiODW&sharer_sharetime=1625821467053&sharer_shareid=30d0313b4bbee7c5e2c1ec3fad8ff149#rd" target="_blank" rel="noopener">我在疆来等你——“疆来计划”活动报名 (qq.com)</a></p><h3 id="智能物流机器人、无人机项目"><a href="#智能物流机器人、无人机项目" class="headerlink" title="智能物流机器人、无人机项目"></a>智能物流机器人、无人机项目</h3><p>我们由于不与电信学院那里重叠，我们选了与他们不同的赛道，我们选的也是最难的一个赛道，这个也是暑假实践项目，同时谭院长也建议我们班级可以多组几个队，到时候院内就可以打比赛。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710154952769.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="学生社团"><a href="#学生社团" class="headerlink" title="学生社团"></a>学生社团</h3><p>谭院长也谈到了有关机械学院，讲到机械学院社团氛围浓厚，有上百个学生社团，他说他希望我们院最后也有这么浓厚的氛围，以后计算机学院大楼建好后，院长打算一楼全给我们学生创业创新使用，支持我们的创新创业项目。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>访谈持续了两个小时，访谈不乏欢声笑语，更有有认真深入讨论。谭院长一点没有院长的架子，很和善很认真的与我们讨论问题与表达想法。在此再次感谢谭志虎副院长给我们这样一个访谈、深入交流的机会，我们也更好的了解了我们课程的安排与计划。也正如我们最后我们表示的那样，我们都觉得您目前为止做的工作非常好、非常考虑到我们学生的切身体验与未来发展。您看我们夸也不好意思地笑了。这里再次表达对您个人的谢意与您工作态度的敬意！</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710152430940.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>同时也夸赞一下我们实践队在此次访谈中做的努力：</p><p>杨释然同学全程举着相机摄像，没有露面。姜昱同学和我也在11点刚回宿舍就开始着手后期处理，我写文案访谈总结他处理加工视频，从上午11点开始不停歇做到下午4点，我访谈总结马上写完了，姜昱同学估计仍需要挺长时间处理剪辑，以及加特效。</p><p>希望我们继续努力！🥳</p><p>由于微信公众号限制，我们这里没有办法发放视频录像。这里我们将其上传至Github平台与bilibili平台，其中Github平台有着所有包括整个实践队实践过程的全记录，也欢迎大家投币视频与star我们项目！</p><p>Github平台网址：<a href="https://github.com/LRY89757/the-exploration-of-HUST-and-CS" target="_blank" rel="noopener">https://github.com/LRY89757/the-exploration-of-HUST-and-CS</a></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021071015584961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>bilibili平台网址：</p><p>图片</p><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>最后谭院长给我们每人还送了一本计算机组成原理书籍，这波真是惊喜欸！就差要个签名了😎</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210710143606742.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>访谈：逯润雨、姜昱        访谈总结与文案编写：逯润雨       视频剪辑特效加工处理：姜昱        视频拍摄：杨释然      </p><p>​                                                                                                                     2021年7月10日计算机科学与技术学院南一楼</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 访谈 </tag>
            
            <tag> 社会实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期实践感慨</title>
      <link href="/2021/09/06/shu-qi-shi-jian-gan-kai/"/>
      <url>/2021/09/06/shu-qi-shi-jian-gan-kai/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p> 我是2021计算机科学与技术学院赴华中科技大学“探科访计”暑期社会实践队队长逯润雨。转眼间实践活动已然结束，身为队长，个人也是学到了许许多多经验与教训，组织任务、安排人手、与老师沟通这些事情并不是那么简单。我个人想从选主题，到联系导师，再到我们整理材料、分工写推文、剪辑视频、制作网页这些方面来简单总结概括一下本次实践活动。</p><h3 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h3><p>我们在众多的主题中选择了“我的华中大”主题。实际上是经过十分慎重而认真的考虑的，“探科访计”计算机科学与技术学院赴华中科技大学暑期社会实践队 历来学校学院以低调示人，宣传力度不够，我们旨在发掘出我们学院的优秀精神事迹，加大学院的有关宣传与历史的探索。让更多人开始了解华中科学技术大学计算机科学与技术学院，同时也更加让我们校友们更加了解我们学院。而正是因为如此我们觉得这是一个比较好的主题，所以一致通过了这个主题。</p><h3 id="个人印象深刻的一些经历"><a href="#个人印象深刻的一些经历" class="headerlink" title="个人印象深刻的一些经历"></a>个人印象深刻的一些经历</h3><h4 id="采访邵志远教授"><a href="#采访邵志远教授" class="headerlink" title="采访邵志远教授"></a>采访邵志远教授</h4><p>刚开始的时候教授对我们访谈的形式有误解，本来以为不需要拍视频，却发现我们要录像。这确实是我的问题，没有提前和邵教授沟通好，不过后来邵教授也是足够平易近人，释放了足够的善意。愿意我们录视频进行相关的记录，整个访谈的过程倒是非常的顺利。讲了许多教授本人对华科的看法与认识，也对我们讲了许许多多的专业知识，给了我们本科生许多建议。可以看出邵教授是很欢迎我们本科生去找他聊天、去找他咨询专业的有关知识的。不愧是华中科技大学计算机学院工作多年的“老”教授，颇具学者风范。非常感谢教授的合作访谈！</p><h4 id="采访谭志虎副院长"><a href="#采访谭志虎副院长" class="headerlink" title="采访谭志虎副院长"></a>采访谭志虎副院长</h4><p>采访谭志虎院长时候我们就谨慎多了，提前和院长沟通好要有视频采访。院长也十分爽快地同意了我们的请求。事先完全没有想到访谈过程会如此顺利，采访前还担心会不会谭院长不愿意接受我们的邀请，但是张辅导员鼓励我们去和院长交流，说谭副院长还是很欢迎本科生找他去交流的。果然第一天晚上联系，第二天就确定并开始了访谈。院长很爽快的抽出了将近一上午的时间接受我们的访谈并且还很细致入微讲解我们学院未来的规划与打算、我们毕业生的一些建议与去向政策、院里对学生意见的重视。我们相对很轻松的聊到哪里讲哪里。谭院长可谓健谈，也可能是这都是他自己亲自参与并实施的规划，谭院长很乐意与我们分享目前院里的一些问题与计划。也希望我们学生能够是一个很关键的一环，一起来完善我们学院的建设。</p><p>这足可见谭副院长的平易近人以及对于我们本科生学习生活的重视。最后也给了我们一个惊喜，给我们一人送了一本《计算机组成原理》，院长本人编写的书。真的非常感动</p><h3 id="分工选择"><a href="#分工选择" class="headerlink" title="分工选择"></a>分工选择</h3><p>我们小组每个人都可以说是“身怀绝技”， 我身为组长，理所应当分好每个人的工作职责，让每一个人都能发挥最大的价值：</p><ul><li>我们副队长姜昱，我认为姜昱和人沟通交流的能力特别强，另外还有一手十分出色的剪视频能力，但是不太擅长写推文、记录这些东西。所以我们访谈完老师、院长之后就和他分工：他处理视频、剪辑好素材，而我负责记录我们访谈的内容和撰写公众号推文。</li><li>我们财务员张创新，技术能力非常强，他负责我们公众号的建立和运营，另外就是我们网页的最终制作。临时学习了公众号的编辑与运营工作，并将我们的推文发布出来。事实证明他完成的非常出色.做出了让人非常满意的结果。</li><li>我们安全员杨释然，联系人、沟通能力同样很厉害，心思比较缜密，也负责了一部分推文的制作。其中有一位教授就是他负责联系的，另外也写了相关的推文与访谈记录、调查的总结任务。</li><li>我们的通讯员王怡彬，比较擅长处理视频、制作相关问卷。我们对广大群众的问卷就是他负责编写，另外他也承担了相当多的视频处理任务，包括我们的相关调查的总结这些东西都有参与。</li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>总的来说，个人还是成长了许多的，实践活动这些天过得很充实。直到现在我仍然会想起我们访谈完各位老师后赶忙回去记录相关访谈记录、书写推文、处理视频这些分工合作，上午采访完老师，中午顾不上吃饭一直到我们做完我们的工作才开始去吃饭。每个人都投入了极大的热情去为团队付出，这些是让我非常感动的，我也认为这将是我大学生活中很难忘的一段经历。</p>]]></content>
      
      
      <categories>
          
          <category> 写给自己的散文诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写给自己的散文诗 </tag>
            
            <tag> 社会实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Faster RCNN源码解读</title>
      <link href="/2021/09/06/faster-rcnn-yuan-ma-jie-du/"/>
      <url>/2021/09/06/faster-rcnn-yuan-ma-jie-du/</url>
      
        <content type="html"><![CDATA[<h4 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h4><p>该笔记是我的关于Pytorch Faster RCNN的源码解读。源码读了大概有4天，其中ROIPooling使用C++写的代码，那一部分仅仅了解了那一层的功能，没有深入了解。本人解读的并非官方源码，官方源码在<a href="https://github.com/pytorch/vision/tree/main/torchvision/models/detection" target="_blank" rel="noopener">这里</a>, 官方源码解读在<a href="https://heary.cn/posts/fasterrcnn-resnet50-fpn-%E4%BB%8Etorchvision%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3Faster-R-CNN%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">这里</a></p><h3 id="Pytorch搭建FasterRCNN目标检测平台"><a href="#Pytorch搭建FasterRCNN目标检测平台" class="headerlink" title="Pytorch搭建FasterRCNN目标检测平台"></a>Pytorch搭建FasterRCNN目标检测平台</h3><h4 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h4><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/moisten-the-rain/image01/raw/master/img/20210904180046.png" alt="全过程"></p><ul><li>首先我们会将图片resize，将其短边resize到600大小，而其长边相应的按比例缩放。这样我们得到了固定大小的图片。</li><li>首先经过backbone这个主干特征提取网络，这个是用来提取主干特征的，一半这个可以使用VGG或者ResNet.我们这里以ResNet50为例。</li><li>当我们特征提取完之后，我们会得到这个共享特征层也就是feature map。 在我们这个例子当中，输入是600×600×3，那么共享特征层就是38×38×1024。我们很多之后操作都会在这个共享特征层进行操作。我们只需要记住我们这个共享特征层存的是许多提取到的特征。而特征的shape是38×38×1024。</li><li>而我们可以看到这个feature map有两条路，一条路经过的是一个3×3的卷积后再分为两条路经过1×1的卷积，一个通道数是18，另一个通道数是36，这一条路就是我们的建议框网络.</li></ul><h4 id="ResNet50-backbone详解"><a href="#ResNet50-backbone详解" class="headerlink" title="ResNet50 backbone详解"></a>ResNet50 backbone详解</h4><h5 id="Preface-1"><a href="#Preface-1" class="headerlink" title="Preface"></a>Preface</h5><ul><li><p>Faster-RCNN可以采用多种的主干特征提取网络，常用的有VGG，Resnet，Xception等等，本文以Resnet网络为例子来给大家演示一下。</p></li><li><p>Faster-Rcnn对输入进来的图片尺寸没有固定，但是一般会把输入进来的图片短边固定成600，如输入一张1200x1800的图片，会把图片不失真的resize到600x900上。</p></li><li><p>ResNet50有两个基本的块，分别名为Conv Block和Identity Block，其中Conv Block输入和输出的维度是不一样的，所以不能连续串联，它的作用是改变网络的维度；Identity Block输入维度和输出维度相同，可以串联，用于加深网络的。</p></li></ul><h5 id="两种块"><a href="#两种块" class="headerlink" title="两种块"></a>两种块</h5><p>Conv Block的结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/moisten-the-rain/image01/raw/master/img/20210831195607.png" alt="Conv Block"></p><ul><li>可以看出，这种是用来改变通道数、长宽的，我们每次高宽减半由于要加上我们的输入项所以我们这里也加了卷积, 这便是Conv  Block。每个stage应该都会有一个这个Conv Block. </li><li><del>另外由我们的Conv，可以这么记：对输入项有卷积处理的叫做<code>ConvBlock</code></del></li></ul><p>Identity Block的结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20191113094135752.png#pic_center" alt="Identity Block"></p><ul><li>这个结构不会用来改变我们的长宽高，不同的stage重复使用的次数不同，该块由于加上的输入层没有进行卷积改变形状与通道数，所以我们可以记为“Identity Block”(<del>这是我瞎编的，好记</del>)</li></ul><p>这两个都是残差网络结构。</p><p><strong>Faster-RCNN的主干特征提取网络部分只包含了长宽压缩了四次的内容，第五次压缩后的内容在ROI中使用。</strong>即Faster-RCNN在主干特征提取网络所用的网络层如图所示。</p><p>以输入的图片为600x600为例，shape变化如下：</p><p><a href="https://imgtu.com/i/hd1TxS" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/31/hd1TxS.png" alt="shape changes"></a></p><p>最后一层的输出就是公用特征层。</p><p><strong>在代码里里面，我们使用resnet50()函数来获得resnet50的公用特征层。</strong></p><p><strong>其中features部分为公用特征层，classifier部分为第二阶段用到的分类器</strong>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">resnet50</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#----------------------------------------------------------------------------#</span>    <span class="token comment" spellcheck="true">#   获取特征提取部分，从conv1到model.layer3，最终获得一个38,38,1024的特征层</span>    <span class="token comment" spellcheck="true">#----------------------------------------------------------------------------#</span>    features <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">[</span>model<span class="token punctuation">.</span>conv1<span class="token punctuation">,</span> model<span class="token punctuation">.</span>bn1<span class="token punctuation">,</span> model<span class="token punctuation">.</span>relu<span class="token punctuation">,</span> model<span class="token punctuation">.</span>maxpool<span class="token punctuation">,</span> model<span class="token punctuation">.</span>layer1<span class="token punctuation">,</span> model<span class="token punctuation">.</span>layer2<span class="token punctuation">,</span> model<span class="token punctuation">.</span>layer3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#----------------------------------------------------------------------------#</span>    <span class="token comment" spellcheck="true">#   获取分类部分，从model.layer4到model.avgpool</span>    <span class="token comment" spellcheck="true">#----------------------------------------------------------------------------#</span>    classifier <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">[</span>model<span class="token punctuation">.</span>layer4<span class="token punctuation">,</span> model<span class="token punctuation">.</span>avgpool<span class="token punctuation">]</span><span class="token punctuation">)</span>    features <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>features<span class="token punctuation">)</span>    classifier <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>classifier<span class="token punctuation">)</span>    <span class="token keyword">return</span> features<span class="token punctuation">,</span> classifier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码部分解析"><a href="#代码部分解析" class="headerlink" title="代码部分解析"></a>代码部分解析</h5><h5 id="make-layer"><a href="#make-layer" class="headerlink" title="_make_layer"></a>_make_layer</h5><ul><li><p>该函数用来生成每个stage。</p></li><li><p>我们残差边的downsample是用来如果是Conv Block的话，我们要选择对输入当输出那一条路进行卷积改变高宽和通道数的变化，这个是改变通道数和高宽的。</p></li><li><p>另一个循环是用来生成不改变高宽的Identity Block. 那个block的重复次数每个stage都不一样。</p></li></ul><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">_make_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> blocks<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        downsample <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">#-------------------------------------------------------------------#</span>        <span class="token comment" spellcheck="true">#   当模型需要进行高和宽的压缩的时候，就需要用到残差边的downsample</span>        <span class="token comment" spellcheck="true">#-------------------------------------------------------------------#</span>        <span class="token keyword">if</span> stride <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">or</span> self<span class="token punctuation">.</span>inplanes <span class="token operator">!=</span> planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">:</span>            downsample <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inplanes<span class="token punctuation">,</span> planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> downsample<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inplanes <span class="token operator">=</span> planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> blocks<span class="token punctuation">)</span><span class="token punctuation">:</span>            layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Bottleneck"><a href="#Bottleneck" class="headerlink" title="Bottleneck"></a>Bottleneck</h5><ul><li>用来生成每个块</li><li>有三个卷积，<ul><li>第一个卷积用来压缩通道数</li><li>第二个卷积用来提取特征</li><li>第三个卷积用来扩张通道数到原来的。</li><li>整了半天，茅塞顿开！</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Bottleneck</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    expansion <span class="token operator">=</span> <span class="token number">4</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> downsample<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>planes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>planes<span class="token punctuation">,</span> planes <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>downsample <span class="token operator">=</span> downsample        self<span class="token punctuation">.</span>stride <span class="token operator">=</span> stride<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ResNet-init"><a href="#ResNet-init" class="headerlink" title="ResNet init"></a>ResNet <strong>init</strong></h5><ul><li>第一个stage不通过Bottleneck改变图片高宽，但是靠它改变通道数，靠max_pooling, 而后面stage都是靠第一个conv Block改变高宽</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ResNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">,</span> layers<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   假设输入进来的图片是600,600,3</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        self<span class="token punctuation">.</span>inplanes <span class="token operator">=</span> <span class="token number">64</span>        super<span class="token punctuation">(</span>ResNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 600,600,3 -> 300,300,64</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 300,300,64 -> 150,150,64</span>        self<span class="token punctuation">.</span>maxpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 150,150,64 -> 150,150,256</span>        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 150,150,256 -> 75,75,512</span>        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 75,75,512 -> 38,38,1024 到这里可以获得一个38,38,1024的共享特征层</span>        self<span class="token punctuation">.</span>layer3 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.layer4被用在classifier模型中</span>        self<span class="token punctuation">.</span>layer4 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AvgPool2d<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                n <span class="token operator">=</span> m<span class="token punctuation">.</span>kernel_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> m<span class="token punctuation">.</span>kernel_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> m<span class="token punctuation">.</span>out_channels                m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fill_<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                m<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ResNet50构建"><a href="#ResNet50构建" class="headerlink" title="ResNet50构建"></a>ResNet50构建</h5><ul><li>注意前面提到过，这个网络前四个stage用于特征提取，而第五个stage放到了ROIpooling中，我们这里正是要将其做一个区分。所以另外定义了一个新函数，不过并不难理解。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">resnet50</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#----------------------------------------------------------------------------#</span>    <span class="token comment" spellcheck="true">#   获取特征提取部分，从conv1到model.layer3，最终获得一个38,38,1024的特征层</span>    <span class="token comment" spellcheck="true">#----------------------------------------------------------------------------#</span>    features <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">[</span>model<span class="token punctuation">.</span>conv1<span class="token punctuation">,</span> model<span class="token punctuation">.</span>bn1<span class="token punctuation">,</span> model<span class="token punctuation">.</span>relu<span class="token punctuation">,</span> model<span class="token punctuation">.</span>maxpool<span class="token punctuation">,</span> model<span class="token punctuation">.</span>layer1<span class="token punctuation">,</span> model<span class="token punctuation">.</span>layer2<span class="token punctuation">,</span> model<span class="token punctuation">.</span>layer3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#----------------------------------------------------------------------------#</span>    <span class="token comment" spellcheck="true">#   获取分类部分，从model.layer4到model.avgpool</span>    <span class="token comment" spellcheck="true">#----------------------------------------------------------------------------#</span>    classifier <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">[</span>model<span class="token punctuation">.</span>layer4<span class="token punctuation">,</span> model<span class="token punctuation">.</span>avgpool<span class="token punctuation">]</span><span class="token punctuation">)</span>    features <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>features<span class="token punctuation">)</span>    classifier <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>classifier<span class="token punctuation">)</span>    <span class="token keyword">return</span> features<span class="token punctuation">,</span> classifier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Proposal建议框构建"><a href="#Proposal建议框构建" class="headerlink" title="Proposal建议框构建"></a>Proposal建议框构建</h4><ul><li>确实不是那么好理解，不过没关系，慢慢了解就行。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/moisten-the-rain/image01/raw/master/img/20210901113220.png" alt="全过程"></p><p>获得的公用特征层在图像中就是Feature Map，其有两个应用，一个是和ROIPooling结合使用、另一个是进行一次3x3的卷积后，进行一个18通道的1x1卷积，还有一个36通道的1x1卷积。</p><p>在Faster-RCNN中，num_priors也就是先验框的数量就是9，所以两个1x1卷积的结果实际上也就是：</p><ul><li><p>9 x 4的卷积 用于预测 公用特征层上 每一个网格点上 每一个先验框的变化情况。（为什么说是变化情况呢，这是因为Faster-RCNN的预测结果需要结合先验框获得预测框，预测结果就是先验框的变化情况。）</p></li><li><p>9 x 2的卷积 用于预测 公用特征层上 每一个网格点上 每一个预测框内部是否包含了物体，序号为1的内容为包含物体的概率。</p></li></ul><p>当我们输入的图片的shape是600x600x3的时候，公用特征层的shape就是38x38x1024，相当于把输入进来的图像分割成38x38的网格，然后每个网格存在9个先验框，这些先验框有不同的大小，在图像上密密麻麻。</p><p>9 x 4的卷积的结果会对这些先验框进行调整，获得一个新的框。<br>9 x 2的卷积会判断上述获得的新框是否包含物体。</p><p>到这里我们可以获得了一些有用的框，这些框会利用9 x 2的卷积判断是否存在物体。</p><p>到此位置还只是粗略的一个框的获取，也就是一个建议框。然后我们会在建议框里面继续找东西。</p><h5 id="init-函数"><a href="#init-函数" class="headerlink" title="__init__函数"></a><code>__init__</code>函数</h5><p>我们可以看到这里的建议框构建的几个步骤：</p><ul><li>我们首先生成一个基础的先验框，shape为[9，4]</li><li>接着进行一个3×3的卷积，就是我们以上那个总流程图的3×3卷积，可以理解为特征整合以下，改变变换一下</li><li>随后又一个分类预测框，定义了1×1的卷积，通道数变为9×2，那个9就是先前每个像素生成的基础先验框个数，而2可以理解为是否包含物体的预测。（当然后来reshape后我们才可以看出来是这个意思，这里为了我们能够提前了理解相关概念）</li><li>并列分类预测框的是我们的回归预测框，同样是1×1卷积，不过通道数为9×4，因为这个是预测分类我们先验框的，需要有4个参数来确定，所以我们选择使用9×4.</li><li>而后的权值初始化是我们单独定义了一个新函数来选择我们想要的初始化方式。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RegionProposalNetwork</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>            self<span class="token punctuation">,</span> in_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> mid_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> ratios<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            anchor_scales<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> feat_stride<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>            mode <span class="token operator">=</span> <span class="token string">"training"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RegionProposalNetwork<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>feat_stride <span class="token operator">=</span> feat_stride        self<span class="token punctuation">.</span>proposal_layer <span class="token operator">=</span> ProposalCreator<span class="token punctuation">(</span>mode<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        <span class="token comment" spellcheck="true">#   生成基础先验框，shape为[9, 4]</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        self<span class="token punctuation">.</span>anchor_base <span class="token operator">=</span> generate_anchor_base<span class="token punctuation">(</span>anchor_scales<span class="token operator">=</span>anchor_scales<span class="token punctuation">,</span> ratios<span class="token operator">=</span>ratios<span class="token punctuation">)</span>        n_anchor <span class="token operator">=</span> self<span class="token punctuation">.</span>anchor_base<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        <span class="token comment" spellcheck="true">#   先进行一个3x3的卷积，可理解为特征整合</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> mid_channels<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        <span class="token comment" spellcheck="true">#   分类预测先验框内部是否包含物体</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        self<span class="token punctuation">.</span>score <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>mid_channels<span class="token punctuation">,</span> n_anchor <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        <span class="token comment" spellcheck="true">#   回归预测对先验框进行调整</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        self<span class="token punctuation">.</span>loc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>mid_channels<span class="token punctuation">,</span> n_anchor <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#--------------------------------------#</span>        <span class="token comment" spellcheck="true">#   对FPN的网络部分进行权值初始化</span>        <span class="token comment" spellcheck="true">#--------------------------------------#</span>        normal_init<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>        normal_init<span class="token punctuation">(</span>self<span class="token punctuation">.</span>score<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>        normal_init<span class="token punctuation">(</span>self<span class="token punctuation">.</span>loc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="forward函数（部分解析）"><a href="#forward函数（部分解析）" class="headerlink" title="forward函数（部分解析）"></a>forward函数（部分解析）</h5><p>这里列举了一部分相关的函数</p><p>可以看出，<strong>这里有一些值得我们去注意的reshape操作</strong>：</p><ul><li>可以看出这里的前向传播两个1×1卷积是并列进行的。</li><li>回归预测最后那个view函数可以看出我们最终将其分成了（batch_size, 先验框， 回归预测框四个参数）</li><li>分类预测最后那个view函数可以看出我们最终将其分成了（batch_size, 先验框， 分类预测（是？不是？）两个参数），<strong>而最后我们也对其进行了softmax预测</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> img_size<span class="token punctuation">,</span> scale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        n<span class="token punctuation">,</span> _<span class="token punctuation">,</span> h<span class="token punctuation">,</span> w <span class="token operator">=</span> x<span class="token punctuation">.</span>shape        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        <span class="token comment" spellcheck="true">#   先进行一个3x3的卷积，可理解为特征整合</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        <span class="token comment" spellcheck="true">#   回归预测对先验框进行调整</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        rpn_locs <span class="token operator">=</span> self<span class="token punctuation">.</span>loc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        rpn_locs <span class="token operator">=</span> rpn_locs<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        <span class="token comment" spellcheck="true">#   分类预测先验框内部是否包含物体</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        rpn_scores <span class="token operator">=</span> self<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        rpn_scores <span class="token operator">=</span> rpn_scores<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#--------------------------------------------------------------------------------------#</span>        <span class="token comment" spellcheck="true">#   进行softmax概率计算，每个先验框只有两个判别结果</span>        <span class="token comment" spellcheck="true">#   内部包含物体或者内部不包含物体，rpn_softmax_scores[:, :, 1]的内容为包含物体的概率</span>        <span class="token comment" spellcheck="true">#--------------------------------------------------------------------------------------#</span>        rpn_softmax_scores <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>rpn_scores<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        rpn_fg_scores <span class="token operator">=</span> rpn_softmax_scores<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span>        rpn_fg_scores <span class="token operator">=</span> rpn_fg_scores<span class="token punctuation">.</span>view<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Anchors-先验框详解"><a href="#Anchors-先验框详解" class="headerlink" title="Anchors 先验框详解"></a>Anchors 先验框详解</h4><h5 id="Preface-2"><a href="#Preface-2" class="headerlink" title="Preface"></a>Preface</h5><ul><li>先验框是预先设定好的，我们会选择等我们判断是否含物体、满足要求的情况下进一步得到我们的建议框，所以我们会选择我们需要的作为建议框。下面我们看一下先验框是怎么生成的。</li></ul><h5 id="generate-anchor-base"><a href="#generate-anchor-base" class="headerlink" title="generate_anchor_base"></a>generate_anchor_base</h5><ul><li><p>我们先通过generate_anchor_base获得基础的先验框。</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate_anchor_base</span><span class="token punctuation">(</span>base_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> ratios<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         anchor_scales<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    anchor_base <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>ratios<span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>anchor_scales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ratios<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>anchor_scales<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            h <span class="token operator">=</span> base_size <span class="token operator">*</span> anchor_scales<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>ratios<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            w <span class="token operator">=</span> base_size <span class="token operator">*</span> anchor_scales<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token operator">/</span> ratios<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            index <span class="token operator">=</span> i <span class="token operator">*</span> len<span class="token punctuation">(</span>anchor_scales<span class="token punctuation">)</span> <span class="token operator">+</span> j            anchor_base<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span>            anchor_base<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span> w <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span>            anchor_base<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span>            anchor_base<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> w <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> anchor_base<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们在这里有两个列表，每个列表长度为3，嵌套循环两个列表，得到9个基础的先验框</p></li><li><p>我们可以尝试打印一下我们的有关先验框的样子：</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/01/h0dotS.png" alt="output"></p></li><li><p>可以看出有三个竖着的长方形、三个正方形、三个横着的长方形。</p></li><li><p>我们之前提过，类似这样：</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/30/htNkMF.png" alt="九种窗口"></p></li></ul><h5 id="enumerate-shifted-anchor"><a href="#enumerate-shifted-anchor" class="headerlink" title="_enumerate_shifted_anchor"></a>_enumerate_shifted_anchor</h5><ul><li><p>我们由如上函数得到了我们想要的一些先验框，<strong>那么我们怎么样将其映射到每一个网格点中去，就是靠的_enumerate_shifted_anchor</strong></p></li><li><p>我们可以先看一下函数：</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_enumerate_shifted_anchor</span><span class="token punctuation">(</span>anchor_base<span class="token punctuation">,</span> feat_stride<span class="token punctuation">,</span> height<span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 计算网格中心点</span>    shift_x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">*</span> feat_stride<span class="token punctuation">,</span> feat_stride<span class="token punctuation">)</span>    shift_y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">*</span> feat_stride<span class="token punctuation">,</span> feat_stride<span class="token punctuation">)</span>    shift_x<span class="token punctuation">,</span> shift_y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>shift_x<span class="token punctuation">,</span> shift_y<span class="token punctuation">)</span>    shift <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>shift_x<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>shift_y<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      shift_x<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>shift_y<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每个网格点上的9个先验框</span>    A <span class="token operator">=</span> anchor_base<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    K <span class="token operator">=</span> shift<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    anchor <span class="token operator">=</span> anchor_base<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \             shift<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 所有的先验框</span>    anchor <span class="token operator">=</span> anchor<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>K <span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    <span class="token keyword">return</span> anchor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>首先我们计算了网格的中心，其中用到了一些基础的变量，比如说feat_stride=16, 如何理解这个16呢？实际上是因为我们之前通过 backbone主干提取时，经过了4个stage，减半了4次高宽，这样一来我们就成功的缩小了16倍，所以我们确定网格中心的时候需要将这些东西都乘以16倍。</p></li><li><p>而我们后来就将整理好，然后如果我们想看一下我们后来得到的映射结果，可以利用如下代码获取：</p></li><li><pre class="line-numbers language-python"><code class="language-python">    height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> feat_stride <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">16</span>    anchors_all <span class="token operator">=</span> _enumerate_shifted_anchor<span class="token punctuation">(</span>nine_anchors<span class="token punctuation">,</span>feat_stride<span class="token punctuation">,</span>height<span class="token punctuation">,</span>width<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>anchors_all<span class="token punctuation">)</span><span class="token punctuation">)</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span>    shift_x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">*</span> feat_stride<span class="token punctuation">,</span> feat_stride<span class="token punctuation">)</span>    shift_y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">*</span> feat_stride<span class="token punctuation">,</span> feat_stride<span class="token punctuation">)</span>    shift_x<span class="token punctuation">,</span> shift_y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>shift_x<span class="token punctuation">,</span> shift_y<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>shift_x<span class="token punctuation">,</span>shift_y<span class="token punctuation">)</span>    box_widths <span class="token operator">=</span> anchors_all<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>anchors_all<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>    box_heights <span class="token operator">=</span> anchors_all<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span>anchors_all<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        rect <span class="token operator">=</span> plt<span class="token punctuation">.</span>Rectangle<span class="token punctuation">(</span><span class="token punctuation">[</span>anchors_all<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>anchors_all<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>box_widths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>box_heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span>fill<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        ax<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>rect<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结果：</p></li><li><p><a href="https://imgtu.com/i/h0zwR0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/01/h0zwR0.png" alt="output"></a></p></li></ul><p><em>经过个人所想，前面那个Anchors应该是分别通过两条路得到框、得到里面是否包含物体之后的结果，但是我们需要进一步通过那个proposal的层来进行筛选，最后得到有物体的、框比较合适的建议框，当然，这只是目前来看，我自己是这么理解的，到后来可能会发生变化，不过目前大致来看可能是这样吧……</em></p><h4 id="Anchors-先验框详解-1"><a href="#Anchors-先验框详解-1" class="headerlink" title="Anchors 先验框详解"></a>Anchors 先验框详解</h4><h5 id="Preface-3"><a href="#Preface-3" class="headerlink" title="Preface"></a>Preface</h5><ul><li>先验框是预先设定好的，我们会选择等我们判断是否含物体、满足要求的情况下进一步得到我们的建议框，所以我们会选择我们需要的作为建议框。下面我们看一下先验框是怎么生成的。</li></ul><h5 id="generate-anchor-base-1"><a href="#generate-anchor-base-1" class="headerlink" title="generate_anchor_base"></a>generate_anchor_base</h5><ul><li><p>我们先通过generate_anchor_base获得基础的先验框。</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate_anchor_base</span><span class="token punctuation">(</span>base_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> ratios<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         anchor_scales<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    anchor_base <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>ratios<span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>anchor_scales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ratios<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>anchor_scales<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            h <span class="token operator">=</span> base_size <span class="token operator">*</span> anchor_scales<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>ratios<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            w <span class="token operator">=</span> base_size <span class="token operator">*</span> anchor_scales<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token operator">/</span> ratios<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            index <span class="token operator">=</span> i <span class="token operator">*</span> len<span class="token punctuation">(</span>anchor_scales<span class="token punctuation">)</span> <span class="token operator">+</span> j            anchor_base<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span>            anchor_base<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span> w <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span>            anchor_base<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span>            anchor_base<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> w <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> anchor_base<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们在这里有两个列表，每个列表长度为3，嵌套循环两个列表，得到9个基础的先验框</p></li><li><p>我们可以尝试打印一下我们的有关先验框的样子：</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/01/h0dotS.png" alt="output"></p></li><li><p>可以看出有三个竖着的长方形、三个正方形、三个横着的长方形。</p></li><li><p>我们之前提过，类似这样：</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/30/htNkMF.png" alt="九种窗口"></p></li></ul><h5 id="enumerate-shifted-anchor-1"><a href="#enumerate-shifted-anchor-1" class="headerlink" title="_enumerate_shifted_anchor"></a>_enumerate_shifted_anchor</h5><ul><li><p>我们由如上函数得到了我们想要的一些先验框，<strong>那么我们怎么样将其映射到每一个网格点中去，就是靠的_enumerate_shifted_anchor</strong></p></li><li><p>我们可以先看一下函数：</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_enumerate_shifted_anchor</span><span class="token punctuation">(</span>anchor_base<span class="token punctuation">,</span> feat_stride<span class="token punctuation">,</span> height<span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 计算网格中心点</span>    shift_x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">*</span> feat_stride<span class="token punctuation">,</span> feat_stride<span class="token punctuation">)</span>    shift_y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">*</span> feat_stride<span class="token punctuation">,</span> feat_stride<span class="token punctuation">)</span>    shift_x<span class="token punctuation">,</span> shift_y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>shift_x<span class="token punctuation">,</span> shift_y<span class="token punctuation">)</span>    shift <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>shift_x<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>shift_y<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      shift_x<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>shift_y<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每个网格点上的9个先验框</span>    A <span class="token operator">=</span> anchor_base<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    K <span class="token operator">=</span> shift<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    anchor <span class="token operator">=</span> anchor_base<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \             shift<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 所有的先验框</span>    anchor <span class="token operator">=</span> anchor<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>K <span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>    <span class="token keyword">return</span> anchor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>首先我们计算了网格的中心，其中用到了一些基础的变量，比如说feat_stride=16, 如何理解这个16呢？实际上是因为我们之前通过 backbone主干提取时，经过了4个stage，减半了4次高宽，这样一来我们就成功的缩小了16倍，所以我们确定网格中心的时候需要将这些东西都乘以16倍。</p></li><li><p>而我们后来就将整理好，然后如果我们想看一下我们后来得到的映射结果，可以利用如下代码获取：</p></li><li><pre class="line-numbers language-python"><code class="language-python">    height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> feat_stride <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">16</span>    anchors_all <span class="token operator">=</span> _enumerate_shifted_anchor<span class="token punctuation">(</span>nine_anchors<span class="token punctuation">,</span>feat_stride<span class="token punctuation">,</span>height<span class="token punctuation">,</span>width<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>anchors_all<span class="token punctuation">)</span><span class="token punctuation">)</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span>    shift_x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">*</span> feat_stride<span class="token punctuation">,</span> feat_stride<span class="token punctuation">)</span>    shift_y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">*</span> feat_stride<span class="token punctuation">,</span> feat_stride<span class="token punctuation">)</span>    shift_x<span class="token punctuation">,</span> shift_y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>shift_x<span class="token punctuation">,</span> shift_y<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>shift_x<span class="token punctuation">,</span>shift_y<span class="token punctuation">)</span>    box_widths <span class="token operator">=</span> anchors_all<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>anchors_all<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>    box_heights <span class="token operator">=</span> anchors_all<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span>anchors_all<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        rect <span class="token operator">=</span> plt<span class="token punctuation">.</span>Rectangle<span class="token punctuation">(</span><span class="token punctuation">[</span>anchors_all<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>anchors_all<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>box_widths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>box_heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span>fill<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        ax<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>rect<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结果：</p></li><li><p><a href="https://imgtu.com/i/h0zwR0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/01/h0zwR0.png" alt="output"></a></p></li></ul><p><em>经过个人所想，前面那个Anchors应该是分别通过两条路得到框、得到里面是否包含物体之后的结果，但是我们需要进一步通过那个proposal的层来进行筛选，最后得到有物体的、框比较合适的建议框，当然，这只是目前来看，我自己是这么理解的，到后来可能会发生变化，不过目前大致来看可能是这样吧……</em></p><h4 id="Decode-对先验框调整获得建议框"><a href="#Decode-对先验框调整获得建议框" class="headerlink" title="Decode-对先验框调整获得建议框"></a>Decode-对先验框调整获得建议框</h4><h5 id="Preface-4"><a href="#Preface-4" class="headerlink" title="Preface"></a>Preface</h5><p>前面了解到了如何生成先验框，通过我们的generate_anchor_base每个像素点得到九个基础的框的各个坐标之类的，然后通过_enumerate_shifted_anchor来对应生成中心点，将先验框对应到中心点上去，真正生成先验框。而接下来，我们要通过我们的这么多先验框进行相应的调整，生成我们需要的建议框, 并且判断这些建议框中是否包含物体：</p><h5 id="提前看看运行结果吧"><a href="#提前看看运行结果吧" class="headerlink" title="提前看看运行结果吧"></a>提前看看运行结果吧</h5><p>首先我们先看一下这些建议框放到图片上是什么效果：</p><p><a href="https://imgtu.com/i/hg93UP" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/09/04/hg93UP.png" alt="前五十个建议框（注意，没有列完）"></a></p><ul><li><p>这就是我们的建议框的结果，注意，这并不是我们得到的全部建议框，这只是我们的部分结果（选了50个便于展示）。</p></li><li><p>可以看出来，这些建议框将我们应该圈出的物体也都框了出来，每个应该检测出的物体都有着大大小小的建议框</p></li><li><p>建议框就是对我们图片上的目标进行初步粗略的筛选。<strong>而后我们的分类会在这个建议框的基础上判断是否含有我们想要的物体；同时我们也会对建议框的大小进行相关的调整，使我们的框更加精确。</strong></p></li><li><p>接下来我们看一下怎么对先验框调整来得到我们的建议框：</p></li></ul><h5 id="RegionProposalNetwork的forward函数剩下部分解析"><a href="#RegionProposalNetwork的forward函数剩下部分解析" class="headerlink" title="RegionProposalNetwork的forward函数剩下部分解析"></a>RegionProposalNetwork的forward函数剩下部分解析</h5><p>在此之前我们在讲解之前建议框构建的时候写到了一部分RegionProposalNetwork的forward函数，那些是为了生成先验框并且得到相应的分类是否含有物体：</p><pre class="line-numbers language-python"><code class="language-python">        n<span class="token punctuation">,</span> _<span class="token punctuation">,</span> h<span class="token punctuation">,</span> w <span class="token operator">=</span> x<span class="token punctuation">.</span>shape        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        <span class="token comment" spellcheck="true">#   先进行一个3x3的卷积，可理解为特征整合</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        <span class="token comment" spellcheck="true">#   回归预测对先验框进行调整</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        rpn_locs <span class="token operator">=</span> self<span class="token punctuation">.</span>loc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        rpn_locs <span class="token operator">=</span> rpn_locs<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        <span class="token comment" spellcheck="true">#   分类预测先验框内部是否包含物体</span>        <span class="token comment" spellcheck="true">#-----------------------------------------#</span>        rpn_scores <span class="token operator">=</span> self<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        rpn_scores <span class="token operator">=</span> rpn_scores<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#--------------------------------------------------------------------------------------#</span>        <span class="token comment" spellcheck="true">#   进行softmax概率计算，每个先验框只有两个判别结果</span>        <span class="token comment" spellcheck="true">#   内部包含物体或者内部不包含物体，rpn_softmax_scores[:, :, 1]的内容为包含物体的概率</span>        <span class="token comment" spellcheck="true">#--------------------------------------------------------------------------------------#</span>        rpn_softmax_scores <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>rpn_scores<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        rpn_fg_scores <span class="token operator">=</span> rpn_softmax_scores<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span>        rpn_fg_scores <span class="token operator">=</span> rpn_fg_scores<span class="token punctuation">.</span>view<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#------------------------------------------------------------------------------------------------#</span>        <span class="token comment" spellcheck="true">#   生成先验框，此时获得的anchor是布满网格点的，当输入图片为600,600,3的时候，shape为(12996, 4)</span>        <span class="token comment" spellcheck="true">#------------------------------------------------------------------------------------------------#</span>        anchor <span class="token operator">=</span> _enumerate_shifted_anchor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>self<span class="token punctuation">.</span>anchor_base<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>feat_stride<span class="token punctuation">,</span> h<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们看一下另一部分的forward函数：</p><pre class="line-numbers language-python"><code class="language-python">rois <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        roi_indices <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            roi <span class="token operator">=</span> self<span class="token punctuation">.</span>proposal_layer<span class="token punctuation">(</span>rpn_locs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rpn_fg_scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> img_size<span class="token punctuation">,</span> scale<span class="token operator">=</span>scale<span class="token punctuation">)</span>            batch_index <span class="token operator">=</span> i <span class="token operator">*</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>roi<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            rois<span class="token punctuation">.</span>append<span class="token punctuation">(</span>roi<span class="token punctuation">)</span>            roi_indices<span class="token punctuation">.</span>append<span class="token punctuation">(</span>batch_index<span class="token punctuation">)</span>        rois <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>rois<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        roi_indices <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>roi_indices<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> rpn_locs<span class="token punctuation">,</span> rpn_scores<span class="token punctuation">,</span> rois<span class="token punctuation">,</span> roi_indices<span class="token punctuation">,</span> anchor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上我们forward另一部分主要是关于Proposal建议框网络的生成的，前面已经得到了有关的先验框那么接下来我们只需要根据先验框来进一步处理生成建议框。首先我们可以看到我们调用了proposal_layer，我们可以回到<code>__init__</code>来看一下我们的proposal_layer都进行了什么：</p><pre class="line-numbers language-python"><code class="language-python">self<span class="token punctuation">.</span>proposal_layer <span class="token operator">=</span> ProposalCreator<span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 可以看出它调用了有关ProposalCreator类。我们接下来就解析学习一下这个类：</p><h5 id="ProposalCreator"><a href="#ProposalCreator" class="headerlink" title="ProposalCreator"></a>ProposalCreator</h5><p>我们来看一下该类做了什么工作。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ProposalCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> nms_thresh<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span>                 n_train_pre_nms<span class="token operator">=</span><span class="token number">12000</span><span class="token punctuation">,</span>                 n_train_post_nms<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">,</span>                 n_test_pre_nms<span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">,</span>                 n_test_post_nms<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span>                 min_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode        self<span class="token punctuation">.</span>nms_thresh <span class="token operator">=</span> nms_thresh        self<span class="token punctuation">.</span>n_train_pre_nms <span class="token operator">=</span> n_train_pre_nms        self<span class="token punctuation">.</span>n_train_post_nms <span class="token operator">=</span> n_train_post_nms        self<span class="token punctuation">.</span>n_test_pre_nms <span class="token operator">=</span> n_test_pre_nms        self<span class="token punctuation">.</span>n_test_post_nms <span class="token operator">=</span> n_test_post_nms        self<span class="token punctuation">.</span>min_size <span class="token operator">=</span> min_size    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loc<span class="token punctuation">,</span> score<span class="token punctuation">,</span>                 anchor<span class="token punctuation">,</span> img_size<span class="token punctuation">,</span> scale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">"training"</span><span class="token punctuation">:</span>            n_pre_nms <span class="token operator">=</span> self<span class="token punctuation">.</span>n_train_pre_nms            n_post_nms <span class="token operator">=</span> self<span class="token punctuation">.</span>n_train_post_nms        <span class="token keyword">else</span><span class="token punctuation">:</span>            n_pre_nms <span class="token operator">=</span> self<span class="token punctuation">.</span>n_test_pre_nms            n_post_nms <span class="token operator">=</span> self<span class="token punctuation">.</span>n_test_post_nms        anchor <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>anchor<span class="token punctuation">)</span>        <span class="token keyword">if</span> loc<span class="token punctuation">.</span>is_cuda<span class="token punctuation">:</span>            anchor <span class="token operator">=</span> anchor<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   将RPN网络预测结果转化成建议框</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        roi <span class="token operator">=</span> loc2bbox<span class="token punctuation">(</span>anchor<span class="token punctuation">,</span> loc<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   防止建议框超出图像边缘</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>clamp<span class="token punctuation">(</span>roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>clamp<span class="token punctuation">(</span>roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   建议框的宽高的最小值不可以小于16</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        min_size <span class="token operator">=</span> self<span class="token punctuation">.</span>min_size <span class="token operator">*</span> scale        keep <span class="token operator">=</span> torch<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> min_size<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> min_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        roi <span class="token operator">=</span> roi<span class="token punctuation">[</span>keep<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        score <span class="token operator">=</span> score<span class="token punctuation">[</span>keep<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   根据得分进行排序，取出建议框</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        order <span class="token operator">=</span> torch<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>score<span class="token punctuation">,</span> descending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> n_pre_nms <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            order <span class="token operator">=</span> order<span class="token punctuation">[</span><span class="token punctuation">:</span>n_pre_nms<span class="token punctuation">]</span>        roi <span class="token operator">=</span> roi<span class="token punctuation">[</span>order<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        score <span class="token operator">=</span> score<span class="token punctuation">[</span>order<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   对建议框进行非极大抑制</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        keep <span class="token operator">=</span> nms<span class="token punctuation">(</span>roi<span class="token punctuation">,</span> score<span class="token punctuation">,</span> self<span class="token punctuation">.</span>nms_thresh<span class="token punctuation">)</span>        keep <span class="token operator">=</span> keep<span class="token punctuation">[</span><span class="token punctuation">:</span>n_post_nms<span class="token punctuation">]</span>        roi <span class="token operator">=</span> roi<span class="token punctuation">[</span>keep<span class="token punctuation">]</span>        <span class="token keyword">return</span> roi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这个类里面我们主要调用的是我们的<code>__call__</code>函数，在这个函数里面我们第一步就是利用RPN的预测结果对先验框进行调整, 也就是我们的loc2bbox,</p><pre class="line-numbers language-python"><code class="language-python">       <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   将RPN网络预测结果转化成建议框</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        roi <span class="token operator">=</span> loc2bbox<span class="token punctuation">(</span>anchor<span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 我们可以一起看一下我们的这个loc2bbox：</p><h6 id="loc2bbox"><a href="#loc2bbox" class="headerlink" title="loc2bbox"></a>loc2bbox</h6><p>src_bbox就是我们的先验框，而我们的loc就是我们的建议框网络的预测结果，</p><ul><li>首先我们计算了先验框的中心和宽高，通过这种方式来确定先验框的位置。</li><li>后来我们把我们获得的先验框的调整参数进行分割，分为dx dy dw dh，看名字也可以看出来这个是为了将我们的先验框进行调整宽高和中心。</li><li>接下来就是具体的调整过程，这个自己看就行了。而后经过以上调整，我们就可以获得调整后先验框的位置了。也就是我们尚未筛选的建议框。</li><li>最后我们会对建议框进行一个格式的转变，转变为左上右下的形式，就完成了。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">loc2bbox</span><span class="token punctuation">(</span>src_bbox<span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> src_bbox<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>loc<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>    src_width <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>src_bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> src_bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    src_height <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>src_bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> src_bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    src_ctr_x <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>src_bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> src_width    src_ctr_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>src_bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> src_height    dx <span class="token operator">=</span> loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>    dy <span class="token operator">=</span> loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>    dw <span class="token operator">=</span> loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>    dh <span class="token operator">=</span> loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>    ctr_x <span class="token operator">=</span> dx <span class="token operator">*</span> src_width <span class="token operator">+</span> src_ctr_x    ctr_y <span class="token operator">=</span> dy <span class="token operator">*</span> src_height <span class="token operator">+</span> src_ctr_y    w <span class="token operator">=</span> torch<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>dw<span class="token punctuation">)</span> <span class="token operator">*</span> src_width    h <span class="token operator">=</span> torch<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>dh<span class="token punctuation">)</span> <span class="token operator">*</span> src_height    dst_bbox <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>loc<span class="token punctuation">)</span>    dst_bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> ctr_x <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> w    dst_bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> ctr_y <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> h    dst_bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> ctr_x <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> w    dst_bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> ctr_y <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> h    <span class="token keyword">return</span> dst_bbox<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="一些筛选前的小事情"><a href="#一些筛选前的小事情" class="headerlink" title="一些筛选前的小事情"></a>一些筛选前的小事情</h6><p><strong>接下来我们需要做的就是筛选建议框了。不过在筛选之前我们还需要做一些小事情。接下来我们回到ProposalCreator类继续看：</strong></p><ul><li><p>比如说利用slice进行分割，防止建议框超出图像边缘：</p><ul><li><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-----------------------------------#</span>       <span class="token comment" spellcheck="true">#   防止建议框超出图像边缘</span>       <span class="token comment" spellcheck="true">#-----------------------------------#</span>       roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>clamp<span class="token punctuation">(</span>roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>clamp<span class="token punctuation">(</span>roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> img_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>另外防止建议框过小, 使其建议框的宽高的最小值不可以小于16：</p><ul><li><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   建议框的宽高的最小值不可以小于16</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        min_size <span class="token operator">=</span> self<span class="token punctuation">.</span>min_size <span class="token operator">*</span> scale        keep <span class="token operator">=</span> torch<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> min_size<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> roi<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> min_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        roi <span class="token operator">=</span> roi<span class="token punctuation">[</span>keep<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        score <span class="token operator">=</span> score<span class="token punctuation">[</span>keep<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>完成以上之后我们就可以开始筛选了</p><h6 id="初步筛选"><a href="#初步筛选" class="headerlink" title="初步筛选"></a>初步筛选</h6><p>首先我们按照成绩对其进行初步的筛选，筛选掉成绩较低的部分：</p><ul><li>可以看出，这里是按照成绩先进行排序，然后挑选出前n_pre_nms（这里面是3000）个</li></ul><pre class="line-numbers language-python"><code class="language-python">        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   根据得分进行排序，取出建议框</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        order <span class="token operator">=</span> torch<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>score<span class="token punctuation">,</span> descending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> n_pre_nms <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            order <span class="token operator">=</span> order<span class="token punctuation">[</span><span class="token punctuation">:</span>n_pre_nms<span class="token punctuation">]</span>        roi <span class="token operator">=</span> roi<span class="token punctuation">[</span>order<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        score <span class="token operator">=</span> score<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="非极大抑制"><a href="#非极大抑制" class="headerlink" title="非极大抑制"></a>非极大抑制</h6><p>非极大抑制可以将我们的密集重叠的框框去掉选取一个最佳的框框。这样一来我们就成功得到了我们想要的建议框。</p><pre class="line-numbers language-python"><code class="language-python">        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   对建议框进行非极大抑制</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        keep <span class="token operator">=</span> nms<span class="token punctuation">(</span>roi<span class="token punctuation">,</span> score<span class="token punctuation">,</span> self<span class="token punctuation">.</span>nms_thresh<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>事实上非极大抑制不是那么困难，他就是不断取出置信度最高的建议框，然后将和其IOU较大的都删掉。接着我们就可以保留一定区域内得分最大的框框了。</p><h6 id="选出前600个框"><a href="#选出前600个框" class="headerlink" title="选出前600个框"></a>选出前600个框</h6><p>接下来我们会选出前n_train_post_nms个（这里是600）框作为建议框。</p><pre class="line-numbers language-python"><code class="language-python">        keep <span class="token operator">=</span> keep<span class="token punctuation">[</span><span class="token punctuation">:</span>n_post_nms<span class="token punctuation">]</span>        roi <span class="token operator">=</span> roi<span class="token punctuation">[</span>keep<span class="token punctuation">]</span>        <span class="token keyword">return</span> roi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h5><p>而后就是一些简单处理就得到我们最终的建议框了。而后我们共享特征层进行截取、通过ROIpooling层这些就是后事了。</p><pre class="line-numbers language-python"><code class="language-python">rois <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        roi_indices <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            roi <span class="token operator">=</span> self<span class="token punctuation">.</span>proposal_layer<span class="token punctuation">(</span>rpn_locs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rpn_fg_scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> img_size<span class="token punctuation">,</span> scale<span class="token operator">=</span>scale<span class="token punctuation">)</span>            batch_index <span class="token operator">=</span> i <span class="token operator">*</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>roi<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            rois<span class="token punctuation">.</span>append<span class="token punctuation">(</span>roi<span class="token punctuation">)</span>            roi_indices<span class="token punctuation">.</span>append<span class="token punctuation">(</span>batch_index<span class="token punctuation">)</span>        rois <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>rois<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        roi_indices <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>roi_indices<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> rpn_locs<span class="token punctuation">,</span> rpn_scores<span class="token punctuation">,</span> rois<span class="token punctuation">,</span> roi_indices<span class="token punctuation">,</span> anchor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="遇到了一点点问题"><a href="#遇到了一点点问题" class="headerlink" title="遇到了一点点问题"></a>遇到了一点点问题</h5><p>我们在运行predict.py时遇到了两个问题，所幸都找到了相应的博客来尝试解决：</p><ul><li>相对路径和绝对路径的问题，这个问题需要好好考虑一下，<a href="https://segmentfault.com/a/1190000039175570" target="_blank" rel="noopener">终于搞懂了Python模块之间的相互引用问题</a>，<a href="https://blog.csdn.net/xiongchengluo1129/article/details/80453599" target="_blank" rel="noopener">在Python中以绝对路径或者相对路径导入文件的方法</a>这是第一个问题。</li><li>另外一个是我们的conda的有关问题，是运行环境的问题，<a href="https://www.cnblogs.com/maomaozi/p/14619961.html" target="_blank" rel="noopener">numpy：DLL load failed while importing _multiarray_umath: 找不到指定的模块</a></li></ul><p>所幸最终成功运行了，这还需要感谢@张创新的帮助，我们在一起探索了大概有2个多小时。最终解决了问题。</p><h4 id="来一个小小的总结"><a href="#来一个小小的总结" class="headerlink" title="来一个小小的总结"></a>来一个小小的总结</h4><p>实际上我们的这个生成Proposal的整个过程就分为3步（几乎都在RegionProposalNetwork里面了）：</p><ul><li>第一步就是获得我们建议框网络的预测结果。</li><li>第二步是生成先验框。</li><li>第三步是根据预测结果来对先验框进行调整并且通过初步筛选、NMS、选出TOP-N来确定最终的建议框结果。</li></ul><h4 id="ROI-Pooling层介绍-利用建议框截取公共特征层"><a href="#ROI-Pooling层介绍-利用建议框截取公共特征层" class="headerlink" title="ROI-Pooling层介绍-利用建议框截取公共特征层"></a>ROI-Pooling层介绍-利用建议框截取公共特征层</h4><h5 id="Preface-5"><a href="#Preface-5" class="headerlink" title="Preface"></a>Preface</h5><p>我们前面已经了解有关提取特征得到featuremap过程、生成先验框后进一步得到建议框的过程。接下来我们就要进一步学习有关ROIPooling层的有关知识。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/moisten-the-rain/image01/raw/master/img/20210904180046.png" alt="全过程"></p><h5 id="RoIPooling层功能"><a href="#RoIPooling层功能" class="headerlink" title="RoIPooling层功能"></a>RoIPooling层功能</h5><p>由于ROIPooling使用C++代码来实现的所以我们不会细细讲解。我们仅仅通过一些输入输出层的shape来了解一下有关的功能就OK。</p><ul><li>刚开始的feature map，也就是共享特征层的shape就是  [1, 1024, 38, 38]</li><li>Rois的shape就是[600, 4], 600个我们之前选取好的建议框。<ul><li>它会在feature map进行截取，也就是我们说的映射啦</li><li>而之后我们会对截取获得的局部特征层，然后再ROIPooling层中我们会对这些局部特征层进行分区域的池化，在池化完之后我们就会得到同等shape的局部特征层。</li></ul></li><li>经过我们的ROIPooling层之后，我们得到的张量shape变为[600, 1024, 14, 14].</li></ul><p>这就是它的功能，将我们的框池化到同一shape上进行处理。就说这么多吧。</p><h4 id="Classifier-进行回归预测和分类预测"><a href="#Classifier-进行回归预测和分类预测" class="headerlink" title="Classifier-进行回归预测和分类预测"></a>Classifier-进行回归预测和分类预测</h4><h5 id="Preface-6"><a href="#Preface-6" class="headerlink" title="Preface"></a>Preface</h5><p>以上我们得到了ROIPooling层的输出，得到了一个shape为[600, 1024, 14,14]的一个张量。 接下来我们看我们如何对ROIPooling层的输出进行分类和回归预测：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/moisten-the-rain/image01/raw/master/img/20210904180046.png" alt="全过程"></p><h5 id="init"><a href="#init" class="headerlink" title="__init__"></a><code>__init__</code></h5><ul><li><p>self.classifier : 我们之前学到这里面使用ResNet50的时候，主干提取网络backbone并没有完全使用所有的5个stage，而是仅仅使用了前4个，而最后一个stage就是要在ROIPooling层处理过之后才进行。所以这里首先定义了这个特征提取层。</p><ul><li>由于这个classifier是包括全局池化的，所以说我们ROI之后通过这个classifier后的张量shape就变为[600, 2048, 1, 1]</li><li>如果没有这个全局池化，我们获得的shape应该是[600, 2048, 7, 7]高宽减半，通道数加倍，就是一个典型的ResNet普通Block.</li><li>而后来的forward进一步就reshape为[600,2048]了，接下来就是我们的分类预测和回归预测了。</li></ul></li><li><p>而后我们两个线性层Linear输入很明显就是2048，而输出分别就是我们的回归和预测结果         </p><ul><li>其中的n_classes就是我们的是否包含物体以及物体的种类</li><li>其中的n_classes*4就是对建议框的调整参数，每一个类对应一个调整参数。</li></ul></li><li><p>只需要第五次特征提取后就是分类预测和回归预测了。</p></li><li><p>需要注意，这个分类预测和回归预测结果都是针对建议框的。</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Resnet50RoIHead</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_class<span class="token punctuation">,</span> roi_size<span class="token punctuation">,</span> spatial_scale<span class="token punctuation">,</span> classifier<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Resnet50RoIHead<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>classifier <span class="token operator">=</span> classifier        <span class="token comment" spellcheck="true">#--------------------------------------#</span>        <span class="token comment" spellcheck="true">#   对ROIPooling后的的结果进行回归预测</span>        <span class="token comment" spellcheck="true">#--------------------------------------#</span>        self<span class="token punctuation">.</span>cls_loc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> n_class <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   对ROIPooling后的的结果进行分类</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        self<span class="token punctuation">.</span>score <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> n_class<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        <span class="token comment" spellcheck="true">#   权值初始化</span>        <span class="token comment" spellcheck="true">#-----------------------------------#</span>        normal_init<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cls_loc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span>        normal_init<span class="token punctuation">(</span>self<span class="token punctuation">.</span>score<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>roi <span class="token operator">=</span> RoIPool<span class="token punctuation">(</span><span class="token punctuation">(</span>roi_size<span class="token punctuation">,</span> roi_size<span class="token punctuation">)</span><span class="token punctuation">,</span> spatial_scale<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们对建议框有一个整体的理解：<br>事实上建议框就是对图片哪一个区域有物体存在进行初步筛选。</p><p>通过主干特征提取网络，我们可以获得一个公用特征层，当输入图片为600x600x3的时候，它的shape是38x38x1024，然后建议框会对这个公用特征层进行截取。</p><p>其实公用特征层里面的38x38对应着图片里的38x38个区域，38x38中的每一个点相当于这个区域内部所有特征的浓缩。</p><p>建议框会对这38x38个区域进行截取，也就是认为这些区域里存在目标，然后将截取的结果进行resize，resize到14x14x1024的大小。</p><p>然后再对每个建议框再进行Resnet原有的第五次压缩。压缩完后进行一个平均池化，再进行一个Flatten，最后分别进行一个num_classes的全连接和(num_classes)x4全连接。</p><p>num_classes的全连接用于对最后获得的框进行分类，(num_classes)x4全连接用于对相应的建议框进行调整。</p><p>通过这些操作，我们可以获得所有建议框的调整情况，和这个建议框调整后框内物体的类别。</p><p>事实上，在上一步获得的建议框就是ROI的先验框。</p><p>对Proposal建议框加以利用的过程与shape变化如图所示：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/moisten-the-rain/image01/raw/master/img/20210904192628.png" alt="shape 变化"></p><p>建议框调整后的结果就是最终的预测结果了。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
            <tag> 源码解读 </tag>
            
            <tag> Faster RCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测笔记（上）</title>
      <link href="/2021/09/06/mu-biao-jian-ce-bi-ji-shang/"/>
      <url>/2021/09/06/mu-biao-jian-ce-bi-ji-shang/</url>
      
        <content type="html"><![CDATA[<h4 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h4><p>本笔记主要是针对two-stage系列RCNN模型的理解，主要就是一些相关的知识点笔记。花了十天来记这个笔记，顺带着也是一个学习的过程。从开始入门目标检测到各个模型RCNN、SPPNET、FAST RCNN、FASTER RCNN的原理与改进的过程。其中没有什么源码，源码解读单独放到其他的笔记中了。</p><h3 id="目标检测R-CNN模型"><a href="#目标检测R-CNN模型" class="headerlink" title="目标检测R-CNN模型"></a>目标检测R-CNN模型</h3><ul><li>在CVPR 2014中Ross Girshick提出R-CNN。</li><li>提出了物体检测的重要的思路</li></ul><h4 id="完整的R-CNN结构"><a href="#完整的R-CNN结构" class="headerlink" title="完整的R-CNN结构"></a>完整的R-CNN结构</h4><p>不使用暴力方法，而使用候选区域方法（region proposal method)，创建目标检测的区域<strong>改变了图像领域实现物体检测的模型思路</strong>，R-CNN是以深度神经网络为基础的物体检测的模型，R-CNN在当时以优异的性能令世人瞩目，以R-CNN为基点，后续的SPPNet，Fast R-CNN模型都是照着这个物体检测的思路。</p><p><a href="https://imgtu.com/i/hP62TI" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/hP62TI.md.png" alt="基本结构"></a></p><ul><li>步骤（以AlexNet网络为基准）<ul><li><ol><li>找出图片中可能存在目标的候选区域region proposal（对于1张图片找2000个候选区域）</li></ol></li><li><ol start="2"><li>将候选区域调整为了适应AlexNet网络的输入图像大小227*227，通过CNN对候选区域提取特征向量，2000个建议框的CNN特征组合成网络AlexNet的最终输出：2000×4096维矩阵。（对着两千个区域做大小调整变换然后放到CNN网络中得到两千个特征向量）</li></ol></li><li><ol start="3"><li>将2000×4096维特征经过SVM分类器（20种分类，SVM是二分类器，则有20个SVM），获得2000称20种类别矩阵（<strong>经过20个类别的SVM分类器，对于2000个候选区域做判断，得到2000×20的得分矩阵</strong>）（做分类，后来不用向量机了，换成神经网络了）</li></ol></li><li><ol start="4"><li>分别对2000×20维矩阵中进行非极大值抑制（NMS：non-maximum suppression)去除重叠度高的、不好的建议框，得到与目标物体最符合，分数最高的一些建议框。</li></ol></li><li><ol start="5"><li>修正bbox,对bbox做回归微调</li></ol></li></ul></li></ul><p><em>接下来我们详细介绍一下各个过程的实现</em>：</p><h4 id="1-候选区域（Region-of-Interest-ROI-得出（了解SS，选择性搜索）"><a href="#1-候选区域（Region-of-Interest-ROI-得出（了解SS，选择性搜索）" class="headerlink" title="1. 候选区域（Region of Interest (ROI))得出（了解SS，选择性搜索）"></a>1. 候选区域（Region of Interest (ROI))得出（了解SS，选择性搜索）</h4><p>实际上这一部分仅仅了解就行了，没有必要去深究这个东西，这个其实后面的YOLO、Faster R-CNN都不会选择去使用这些东西了。</p><ul><li><p><strong>选择性搜索（SelectiveSerch, SS)</strong>: 首先将每个像素作为一组，然后，计算每一组的纹理，并将两个最接近的组结合起来。但是为了避免单个区域吞噬其他区域，我们首先对较小的组进行分组。我们继续合并区域，直到所有区域都结合在一起。下图第一行展示了如何使用使区域增长，第二行中的蓝色矩形代表合并过程中所有可能的ROI。</p></li><li><p><a href="https://imgtu.com/i/hPhr59" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/hPhr59.png" alt="SelectiveSerch"></a></p></li><li><p>SS在一张图片上提取出来约2000个候选区域，<strong>需要注意的是这些候选区域的长宽都不固定</strong>。二我们使用CNN提取候选区域的特征向量，需要接受固定长度的输入，所以需要对候选区域做一些尺寸上的修改。需要我们一些算法进行修改调整。</p></li><li><p>就是一个利用像素特征的过程，还是简单了解一下就OK。</p></li></ul><h4 id="2-CNN网络提取特征"><a href="#2-CNN网络提取特征" class="headerlink" title="2. CNN网络提取特征"></a>2. CNN网络提取特征</h4><p>在候选区域的基础上提取出更高级的、更抽象的特征，这些高级特征是作为下一步的分类器、回归的依据</p><p><a href="https://imgtu.com/i/hP5iYd" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/hP5iYd.png" alt="CNN提取特征"></a></p><blockquote><p> 这些特征注意是<strong>保存到磁盘</strong>中！这不是保存到内存中的临时数据！这些特征是我们真正要训练的数据请注意！</p></blockquote><h4 id="3-特征向量训练分类器SVM"><a href="#3-特征向量训练分类器SVM" class="headerlink" title="3. 特征向量训练分类器SVM"></a>3. 特征向量训练分类器SVM</h4><blockquote><p><em>假设做20个类别的物体检测</em></p></blockquote><ul><li>假设一个图片得到了2000个候选区域，那么我们提取出来的就是2000×4096这样的特征向量（R-CNN中默认CNN层输出4096特征向量）。</li><li>R-CNN选用SVM进行二分类，假设检测20个类别，那么会提供20个不同类别的SVM分类器，每个分类器都会对2000个候选区域的特征向量分别判断一次，这样得出[2000, 20]的得分矩阵，如下图所示</li><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/hPT9TU.md.png" alt="hPT9TU.md.png"></li><li>猫分类对：2000个候选区域做判断，得到2000个属于猫的类别</li><li>狗分类对：2000个候选区域做判断，得到2000个属于狗的类别</li><li>……</li><li>……</li><li>最终得到[2000, 20]向量。</li></ul><h4 id="4-非极大抑制-NMS"><a href="#4-非极大抑制-NMS" class="headerlink" title="4. 非极大抑制(NMS)"></a>4. 非极大抑制(NMS)</h4><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><ul><li><strong>筛选候选区域，目标是一个物体只保留一个最优的框，来抑制那些冗余的候选框</strong></li><li>RCNN预测2000个候选框，得到所含物体数的较为准确的候选框（<del>这句话有点难以理解，我的表达能力有问题</del>）</li></ul><h5 id="迭代过程"><a href="#迭代过程" class="headerlink" title="迭代过程"></a>迭代过程</h5><ul><li><p>对于所有2000个候选区域得分进行概率筛选，0.5，小于0.5都删了。</p></li><li><p>剩余的候选框</p><ul><li><p>假设图片真实物体个数为2（N），筛选之后候选框为5（P），<del>筛选前可是有2000个</del>，计算N中每个物体位置与所有P的交并比IOU计算，得到P中欧给每个候选框对应IOU最高的N中一个</p></li><li><p>如下图，A、C候选框对应左边车辆，B、D、E对应右边车辆<a href="https://imgtu.com/i/hPjfSO" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/hPjfSO.png" alt="对应框"></a></p><p>假设现在滑动窗口有：A、B、C、D、E5个候选框，IOU有点像是计算重叠程度的。</p><ul><li>第一轮：对于右边车辆，假设B是得分最高的，与B的IOU&gt;0.5删除。现在与B计算IOU，DE结果&gt;0.5，剔除DE，B作为一个预测结果</li><li>第二轮：对于左边车辆，AC中，A的得分最高，与A计算IOU，C的结果&gt;0.5，剔除C，A作为一个结果</li></ul><p><strong>最终这五个中检测出结果为A和B</strong>，最终理想状态就是每一个Ground truth都有一个候选框。</p><p><strong>SS算法得到的物体位置已经固定了，但是我们筛选出的位置不一定就真的特别准确</strong>，需要对A和B进行最后的修正。</p></li></ul></li></ul><h4 id="5-修正候选框"><a href="#5-修正候选框" class="headerlink" title="5. 修正候选框"></a>5. 修正候选框</h4><ul><li><p>通过非最大抑制筛选出来的候选框不一定非常准确怎么办？R-CNN提供了这样一种方法，建立一个bbox regrassor</p><ul><li><p>回归用于修正筛选后的候选区域，使之回归于ground-truth,默认认为这两个框之间是线性关系，因为在最后筛选出来的候选区域和ground-truth很接近了</p><p>修正过程（线性回归）</p><p><a href="https://imgtu.com/i/hipcR0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/hipcR0.png" alt="线性回归算法"></a></p><p>我们给出一个相关的解释：</p><p><a href="https://imgtu.com/i/hi9af1" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/hi9af1.png" alt="例子"></a></p><ul><li>假设G是GT，而A是predicted bbox.那么我们想要通过该回归算法来使得A尽可能接近G，通过变换来使得A变为G’，尽量和真实值G相等。</li></ul></li></ul></li><li><p>RCNN输出：一张图片预测一个X候选框， x*w = y_locate（经过回归修正的）</p></li></ul><p><strong>以上便是我们RCNN的五步过程。</strong></p><h4 id="检测的评价指标"><a href="#检测的评价指标" class="headerlink" title="检测的评价指标"></a>检测的评价指标</h4><h5 id="IOU交并比"><a href="#IOU交并比" class="headerlink" title="IOU交并比"></a>IOU交并比</h5><p><em>IOU交并比是最简单的一种</em></p><table><thead><tr><th>任务</th><th>description</th><th>输入</th><th>输出</th><th>评价标准</th></tr></thead><tbody><tr><td>Detection and Localization(检测和定位)</td><td>在输入图片中找出存在物体类别和位置（可能存在多种物体）</td><td>图片（Image)</td><td>类别标签（categories）和位置（bbox(x,y,w,h))</td><td>IOU（Intersection over Union</td></tr></tbody></table><ul><li>IOU(交并比)<ul><li>两个区域的重叠程度overlap:候选区域和标定区域的IOU值</li><li><a href="https://imgtu.com/i/hFEfk8" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/24/hFEfk8.png" alt="IOU计算公式"></a></li><li>所以我们的IOU值越大，重合程度越大。IOU值在[0, 1]之间</li><li>通常来说IOU&gt;0.5，说明重合程度算比较高了，类别一样。</li><li><strong>属于位置的考量</strong></li></ul></li></ul><h5 id="平均精确率（map，mean-average-precision"><a href="#平均精确率（map，mean-average-precision" class="headerlink" title="平均精确率（map，mean average precision)"></a>平均精确率（map，mean average precision)</h5><p>训练样本的标记：候选框（如RCNN2000个）标记</p><ul><li>与每个ground truth box有着最高的IOU的anchor标记为正样本</li><li>剩下的anchor/anchors与任何ground truth box的IOU大于0.7记为正样本，IOU小于0.3， 记为负样本</li></ul><ul><li>定义：多个分类任务的AP的平均值。<ul><li>mAP = 所有类别的AP之和/类别总个数</li><li>注：<code>PR曲线</code>，而AP（average precision)就是这个曲线下的面积（ROC与AUC）</li></ul></li></ul><blockquote><p><strong>关于ROC曲线、AOC值、正确率、召回率、PR曲线，这里有着几个博客讲的还可以:</strong></p><ol><li><p><strong><a href="https://zhuanlan.zhihu.com/p/58587448" target="_blank" rel="noopener">ROC曲线和AUC值</a>,</strong></p></li><li><p><strong><a href="https://zhuanlan.zhihu.com/p/31256633" target="_blank" rel="noopener">ROC曲线、AUC值、正确率、召回率</a></strong></p></li><li><p><strong><a href="https://zhuanlan.zhihu.com/p/104917232" target="_blank" rel="noopener">ROC曲线和PR曲线</a></strong></p></li></ol></blockquote><ul><li><p>方法步骤</p><ul><li><ol><li>对于其中一个类别C，首先将算法输出所有C类别的预测框，按预测的分数confidence排序<ul><li>RCNN中就是SVM的输出分数</li></ul></li></ol></li><li><ol start="2"><li>设定不同的K值，选择top k个预测框，计算FP和TP，计算Precision和AP</li></ol></li><li><ol start="3"><li>将得到的N个类别的AP取平均，即得到AP；AP是针对单一类别的，mAP时将所有类别的AP求和再取平均</li></ol></li></ul></li></ul><ul><li>首先回顾精确率和召回率<ul><li>左边一整个矩形中的数表示ground truth之中为1的（即为正确的）数据</li><li>右边一整个矩形中的数表示ground truth之中为0的数据</li><li>精度precision的计算使用检测正确的数据个数/总的检测个数</li><li>召回率recall的计算是用检测正确的数据个数/ground truth中所有正数据个数。</li></ul></li></ul><p><a href="https://imgtu.com/i/h3fxcn" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/28/h3fxcn.png" alt="图像辅助理解各个“率”"></a></p><p>我们所说的召回率就是绿色的半圆除以左半边，召回率是为了解决样本不均衡的问题。</p><p>这里有更为详细的如何计算：</p><p><a href="https://imgtu.com/i/h3huB6" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/28/h3huB6.md.png" alt="精确率与召回率计算"></a></p><h4 id="RCNN算法总结"><a href="#RCNN算法总结" class="headerlink" title="RCNN算法总结"></a>RCNN算法总结</h4><p>流程总结</p><ol><li>首先我们输入一张图片</li></ol><p><a href="https://imgtu.com/i/h3hLb6" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/28/h3hLb6.md.png" alt="input"></a></p><ol start="2"><li>接着我们得到2000个候选区域，得到ROI</li></ol><p><a href="https://imgtu.com/i/h349xA" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/28/h349xA.md.png" alt="ROI"></a></p><ol start="3"><li>对候选区域进行大小适当的变换</li></ol><p><a href="https://imgtu.com/i/h358OI" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/28/h358OI.md.png" alt="大小变换"></a></p><ol start="4"><li>而后经过卷积提取特征得到特征向量</li></ol><p><a href="https://imgtu.com/i/h35rXn" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/28/h35rXn.md.png" alt="经过卷积层"></a></p><ol start="5"><li>经过SVM分类得到类别和reg得到bbox</li></ol><p><a href="https://imgtu.com/i/h35Tn1" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/28/h35Tn1.md.png" alt="经过SVM分类得到类别和reg得到bbox"></a></p><h4 id="RCNN表现与缺点"><a href="#RCNN表现与缺点" class="headerlink" title="RCNN表现与缺点"></a>RCNN表现与缺点</h4><ul><li>表现<ul><li>在VOC2007数据集上的平均精度map达到66%</li></ul></li></ul><ul><li>缺点<ul><li>训练阶段多， 步骤繁琐：微调网络+训练SVM+训练边框回归器（要训练好多东西，模型太多）。</li><li>训练耗时，占用磁盘空间大：5000张图片产生几百G的特征文件。（VOC数据集的检测结果，因为SVM的存在）</li><li>处理速度慢：使用GPU，VGG16模型处理一张图像需要47s</li><li>图片形状变化：候选区域要经过crop/warp进行固定大小，无法保证图片不变性</li></ul></li></ul><h3 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h3><h4 id="Preface-1"><a href="#Preface-1" class="headerlink" title="Preface"></a>Preface</h4><ul><li><p>假设我们需要在卷积神经网络中了解一个神经网络的话，<strong>我们只需要了解ResNet就行了</strong>，这个神经网络是最好用的一个网络了。</p></li><li><p>这个源自一个思想就是，我们总是不断加深我们的神经网络，但是加深神经网络一定会给我们带来好处吗？</p><ul><li>不一定的。可能我模型越大，就会学得更偏了……</li><li>而我们ResNet核心思想就是我们每次加大模型，都包含上之前的那个小模型，<strong>至少要保证我加深网络之后，模型没有比之前差</strong>， 这样的话至少可以保证一个下限，保证我没有学偏。</li></ul></li></ul><h4 id="残差块"><a href="#残差块" class="headerlink" title="残差块"></a>残差块</h4><h5 id="具体思想"><a href="#具体思想" class="headerlink" title="具体思想"></a>具体思想</h5><ul><li><em>之前的时候，我们习惯于一层一层的不断前向传递参数，上一层的输出就是下一层的输入，这么一个固定的模式</em></li></ul><p>而ResNet却改变了这样的一个固有模式，来保证我们至少不会得到更差的结果：</p><ul><li><p>串联一个层改变函数类，我们希望能扩大函数类</p></li><li><p>残差快加入快速通道来得到$f(x) = x + g(x)$​的结构。这样来说就假设我$g(x)$什么都不干我们至少会得到原来的结果。</p></li><li><p>可以看下图，相当于加了个快速通道，加了个“捷径”来是输入加至输出。</p></li><li><p><a href="https://imgtu.com/i/hANdN8" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/24/hANdN8.md.png" alt="与之前对比"></a></p></li><li><p>当然ResNet当时不是这么解释的，他当时是借助了残差这些概念但是我们不需要这么解释，就按照以上的方式解读是非常合适的。</p></li></ul><h5 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h5><p>当然，以上的只是一个直观上的来理解，我们真正的残差ResNet块的细节结构如下：</p><p><a href="https://imgtu.com/i/hAaImR" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/24/hAaImR.png" alt="ResNet块"></a></p><ul><li>可以看出，这个ResNet块这里借鉴了VGG的有关卷积层，利用了3*3的卷积块，这么一来我们的输入输出的形状不会发生变化，正好有利于我们的加上输入层的操作。</li><li>同时这里如果我们想要变换输入层的通道数，我们也可以利用到这里有一个1*1的卷积层方便改变通道数</li><li>综合以上两点，有利于我们输入和输出的相加。（<del>可以说完美解决了这些问题</del>）</li></ul><h5 id="更多变种"><a href="#更多变种" class="headerlink" title="更多变种"></a>更多变种</h5><p>当然我们或许对于我们加入x的位置有所疑问，为什么必须加到BN层和ReLU之间呢？实际上这里就是我们另一个比较有趣的地方，答案是：<strong>随便试试！</strong></p><p><a href="https://imgtu.com/i/hAdHDs" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/24/hAdHDs.png" alt="都可以尝试一下"></a></p><h4 id="ResNet块"><a href="#ResNet块" class="headerlink" title="ResNet块"></a>ResNet块</h4><p>由下图我们可以看出具体的ResNet块的组成，实际上ResNet块是有2种的（上边也有所提到）：</p><ul><li>第一个ResNet块便是首先我们需要将其高宽减半，所以我们定义了3*3conv层的步幅为2，这样一来我们通过的数据高宽减半了，而高宽减半后我们通常会将我们的通道数增加（<del>这是之前VGG等的经验</del>），所以我们加入快速通道的同时我们加进去了一个conv1层来减半高宽并且增加通道数以保持我们可以顺利的将两者相加。<em>这里仍需注意的一点是我们的3*3卷积仅仅只有第一个是步幅为2，也就是只减半一次</em></li><li>第二种ResNet块便是正常的3*3卷积，保持我们的高宽不变，甚至我们通道数也没有改变，这样一来我们就可以不使用1*1卷积来改变输入的通道数，直接相加就OK。而第二个ResNet块我们会重复多次，接多个这样的块。</li></ul><p><a href="https://imgtu.com/i/hADyJP" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/24/hADyJP.png" alt="ResNet块"></a></p><h4 id="ResNet架构"><a href="#ResNet架构" class="headerlink" title="ResNet架构"></a>ResNet架构</h4><ul><li>类似VGG和GoogleNet的总体架构，也是5个stage</li><li>不过这里替换成了ResNet块</li></ul><p><a href="https://imgtu.com/i/hAgPqU" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/24/hAgPqU.png" alt="ResNet架构"></a></p><h3 id="改进-目标检测SPPNET"><a href="#改进-目标检测SPPNET" class="headerlink" title="改进-目标检测SPPNET"></a>改进-目标检测SPPNET</h3><p>这个相当于是中间的一个算法了。</p><h4 id="Preface-2"><a href="#Preface-2" class="headerlink" title="Preface"></a>Preface</h4><ul><li>学习目标<ul><li>说明SPPNET的特点</li><li>说明SPP层的作用</li></ul></li><li>应用<ul><li>暂无</li></ul></li></ul><h4 id="RCNN慢在哪里？"><a href="#RCNN慢在哪里？" class="headerlink" title="RCNN慢在哪里？"></a>RCNN慢在哪里？</h4><p><a href="https://imgtu.com/i/hGFNo6" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hGFNo6.png" alt="RCNN全过程"></a></p><p><strong>每个候选区域都进行了卷积操作提取特征</strong>!</p><p>慢就慢在这里的ConvNet这个地方！每个图片都有2000个候选框来做卷积!</p><h4 id="那我们进行了怎样的改进呢？"><a href="#那我们进行了怎样的改进呢？" class="headerlink" title="那我们进行了怎样的改进呢？"></a>那我们进行了怎样的改进呢？</h4><p>SPPNet主要存在两点改进的地方，提出了SPP层</p><ul><li>减少卷积运算<ul><li>首先RCNN是经过一个crop/warp层，这是裁剪resize图片得到候选区域用的，而后我们经过卷积层，这个时候是2000个候选区域都经过卷积层，，然后经过全连接层最后得到输出</li><li>而我们的SPPNET是首先将这一张图片经过卷积层，注意，之前RCNN可是2000张经过卷积层！而后经过一个SPP Pooling层，接着就是经过全连接层然后输出。<ul><li>一张图片经过了卷积，那我们怎么得到候选区域呢?这便是我们SPP层需要考虑的了。</li><li><strong>可见我们的重点改进呢便是这个SPP层（spatial pyramid pooling<del>空间金字塔池化</del>）</strong></li></ul></li></ul></li></ul><p><a href="https://imgtu.com/i/hGVoCV" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hGVoCV.png" alt="RCNN和SPP对比"></a></p><table><thead><tr><th>R-CNN模型</th><th>SPPNet模型</th></tr></thead><tbody><tr><td>1、R-CNN是让每个候选区域经过crop/wrap等操作变换成固定大小的图像   2、固定大小的图像塞给CNN传给后面的层做训练回归分类操作。</td><td>1、SPPNet把全图塞给CNN得到全图的feature map 2、 <strong>让SS（选择性搜索）得到候选区域直接映射特征向量中对应位置</strong> 3、映射过来的特征向量，<strong>经过SPP层</strong>（<strong>空间金字塔变换层</strong>），S输出固定大小的特征向量给FC层。</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hGZiKe.png" alt="更形象的对比"></p><ul><li>这个映射还是非常关键的，原图中通过SS得到的候选区域直接<strong>映射</strong>到我们的卷积得到的相应区域。</li><li><strong>然后映射过来的候选区域的特征向量</strong>，经过SPP层来输出固定大小的特征向量给FC层。</li></ul><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><p><em>原始图片经过CNN变成了feature map, 原始图片通过选择性搜索(SS）得到了候选区域（Region of Interest),现在需要将基于原始图片的候选区域映射到feature map中的特征向量。映射过程图参考如下：</em></p><ul><li>映射是有特定规则的</li></ul><p><a href="https://imgtu.com/i/hGeYeH" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hGeYeH.png" alt="映射"></a></p><p>整个映射过程有具体的公式，如下：</p><p>假设（x’，y’)表示特征图上的坐标点，坐标点(x, y)表示原输入图片上的点，那么它们之间有如下转换关系，这种映射关系与网络结构有关：(x, y) = (S*x’, S*y’), 即</p><ul><li><p>左上角的点：</p><ul><li><strong>x’ = [x / S] + 1</strong></li></ul></li><li><p>右下角的点：</p><ul><li><strong>x’ = [x / S] - 1</strong></li></ul></li></ul><p>其中S就是CNN中所有的strides的乘积，包含了池化、卷积的stride.论文中使用S计算出来的为2×2×2×2=16</p><blockquote><p>如果想关注这个公式怎么计算出来的，我们可以参考：</p><p><a href="http://kaiminghe.com/iccv15tutorial/iccv2015_tutorial_convolutional_feature_maps_kaiminghe.pdf" target="_blank" rel="noopener">http://kaiminghe.com/iccv15tutorial/iccv2015_tutorial_convolutional_feature_maps_kaiminghe.pdf</a></p></blockquote><p>论文使用的AlexNet好像（此时2015还没提出来那个ResNet)</p><ul><li>原图：特征图中xmin’, ymin’ = [xmin/16]+1, [ymin/16]+1</li><li>特征图：xmax’,ymax’ = [xmax/16] - 1,ymax/16 -1</li></ul><p><em>那么这么一来我们得到特征图候选区域了。但是我们得到的特征图仍然大小不一，需要我们进一步的将特征图转换为固定大小的特征向量（RNN中靠的是crop/warp来得到固定的大小，然后才通过的CNN注意对比）。这就需要我们的后面的spatial pyramid pooling层了</em></p><h4 id="spatial-pyramid-pooling"><a href="#spatial-pyramid-pooling" class="headerlink" title="spatial pyramid pooling"></a>spatial pyramid pooling</h4><p><strong>候选区域的特征图转换成固定大小的特征向量</strong></p><p>我们给出一个示例：假设原图输入是224×224，对于conv出来后的输出是13×13×256，其中某个映射的候选区域假设为12×10×256</p><ul><li>spp layer 会将每一个候选区域分成1×1，2×2，4×4三张子图，对每个子图的每个区域做max pooling,得出的特征再连接到一起就是（16+4+1）×256 = 21×256=5376结果，接着给全连接层做进一步处理，如下图：</li><li>Spatial bins（空间盒个数）：1 + 4 + 16 = 21，相当于盒子一样将我们的像素装进去做池化。</li><li>类似于金字塔型的池化操作能够减少我们的特征数并且将我们的特征数固定到了5736个这样一个结果。我们到全连接层</li></ul><p><a href="https://imgtu.com/i/hG2GwT" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hG2GwT.png" alt="经过SPP层"></a></p><h4 id="SPPNet总结"><a href="#SPPNet总结" class="headerlink" title="SPPNet总结"></a>SPPNet总结</h4><p>我们SPPNet其实创新来说就是一个SPP层的创新，创新力度相对而言没有那么大。只是我们的</p><ul><li><p>优点</p><ul><li>SPPNet在R-CNN的基础上提出了改进，通过候选区域和feature map的映射，配合SPP层的使用，从而达到了CNN层的共享计算，减少了运算的时间，后面的Fast R-CNN等也是受SPPNet的启发</li></ul></li><li><p>缺点</p><ul><li>训练依然过慢、效率低，特征需要写入磁盘，因为(SVM的存在)</li><li>分阶段训练网络：选取候选区域、训练CNN、训练SVM、训练bbox回归器，SPPNet反向传播效率低。可以看出，<strong>SPP仅解决了一小部分R-CNN的缺点</strong>，很多缺点仍然没有解决。</li></ul></li></ul><p><a href="https://imgtu.com/i/hGRbb6" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hGRbb6.png" alt="总流程"></a></p><h3 id="目标检测Fast-R-CNN"><a href="#目标检测Fast-R-CNN" class="headerlink" title="目标检测Fast R-CNN"></a>目标检测Fast R-CNN</h3><h4 id="Preface-3"><a href="#Preface-3" class="headerlink" title="Preface"></a>Preface</h4><ul><li>了解Fast R-CNN的结构特点</li><li>说明RoI pooling 的特点</li><li>了解多任务损失</li></ul><p>SPPNet性能已经得到了很大的改善，但是由于网络之间不统一训练（又要训练卷积，又要训练SVM，又要训练regression……），造成很大麻烦，所以接下来的Fast R-CNN就是为了解决这样的问题，直接将那些统一到一起了。</p><h4 id="改进之处"><a href="#改进之处" class="headerlink" title="改进之处"></a>改进之处</h4><ul><li>提出了一个RoI pooling,然后整合整个模型，把CNN、RoIpooling、分类器、bbox回归几个模块整个一起训练</li></ul><p><a href="https://imgtu.com/i/hGfdpQ" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hGfdpQ.png" alt="ROI pooling"></a></p><ul><li>步骤<ul><li>首先将整个图片输入到一个基础卷积网络，得到整张图的feature map</li><li>将选择性搜索算法的结果region proposal（ROI)映射到feature map中(前两步和SPPNet一样哦)</li><li>ROI pooling layer（与SPPNet对比）提取一个固定长度的特征向量，每个特征会输入到一系列全连接层，得到一个ROI特征向量（<strong>此步骤是对每一个候选区域都会进行相同的操作</strong>）<ul><li>其中一个是传统softmax层（不同于SVM）进行分类，输出类别有k个类别加上“背景类”</li><li>另一个是bounding box regressor</li></ul></li></ul></li></ul><h4 id="ROI-pooling"><a href="#ROI-pooling" class="headerlink" title="ROI pooling"></a>ROI pooling</h4><p>首先RoI pooling只是一个简单版本的SPP，目的是为了减少计算时间并且得出固定长度的向量。</p><p><a href="https://imgtu.com/i/hG4VPO" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hG4VPO.png" alt="ROI AND SPP"></a></p><ul><li>只使用一种比如说4×4=16空间盒数</li><li>ROI池层使用最大池化将任何有效ROI区域内的特征转换成具有H×W的固定空间范围的小feature map，其中H和W是超参数 他们独立于任何特定的ROI。</li></ul><p>为什么要设计单个尺度呢？这要涉及到single scale 与 multi scale两者的优缺点</p><ul><li>single scale， 直接将image定为某种scale，直接输入网络来训练即可。（Fast R-CNN)</li><li>multi scale, 也就是要生成一个金字塔</li></ul><p><strong>后者比前者更加准确些，但准确率并没有高很多，不过时间要节省很多，所以实际采用的是第一个策略，因此Fast R-CNN要比SPPNet快很多也是因为这里的原因。</strong></p><h4 id="End-to-End-model"><a href="#End-to-End-model" class="headerlink" title="End-to-End model"></a>End-to-End model</h4><p>从输入端到输出端直接用一个神经网络相连，整体优化目标函数</p><h4 id="接着我们来看看为什么后面的整个网络能进行统一训练？"><a href="#接着我们来看看为什么后面的整个网络能进行统一训练？" class="headerlink" title="接着我们来看看为什么后面的整个网络能进行统一训练？"></a>接着我们来看看为什么后面的整个网络能进行统一训练？</h4><p>特征提取CNN的训练和SVM分类器的训练在时间上是先后顺序，两者的训练方式独立，因此SVMs的训练Loss无法更新SPP-Layer之前的卷积层参数，去掉了SVM分类这一过程，所有特征都存储在内存中，不占用磁盘空间，<strong>形成了End-to-End模型</strong>（除了选择性搜索得到候选框也即proposal除外，end-to-end在Faster -RCNN中得以完善）</p><ul><li>训练会比较统一：废弃了SVM以及SPPnet<ul><li>ROI pooling layer  + softmax </li><li>.</li></ul></li></ul><h4 id="多任务损失"><a href="#多任务损失" class="headerlink" title="多任务损失"></a>多任务损失</h4><p><em>这是Fast R-CNN的一个特点</em></p><p>两个loss，分别是：</p><ul><li>对于分类loss, 是一个N+1路的softmax输出，其中的N是类别 个数，1是背景，使用交叉熵损失</li><li>对于回归loss，是一个4×N路输出的regressor，也就是说对于每个类别都会训练一个单独的regressor的意思，<strong>使用平均绝对误差损失（MAE）即L1损失</strong></li><li><a href="https://imgtu.com/i/hGbcAs" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hGbcAs.png" alt="L1 Loss"></a></li></ul><ul><li>fine-tuning训练<ul><li>在微调时，调整CNN+ROI pooling + softmax</li><li>调整bbox regressor 回归当中的参数</li></ul></li></ul><h4 id="R-CNN、SPPNet、Fast-R-CNN效果对比"><a href="#R-CNN、SPPNet、Fast-R-CNN效果对比" class="headerlink" title="R-CNN、SPPNet、Fast R-CNN效果对比"></a>R-CNN、SPPNet、Fast R-CNN效果对比</h4><table><thead><tr><th align="center">参数</th><th align="center">R-CNN</th><th align="center">SPPNet</th><th align="center">Fast R-CNN</th></tr></thead><tbody><tr><td align="center">训练时间（h）</td><td align="center">84</td><td align="center">25</td><td align="center"><strong>9.5</strong></td></tr><tr><td align="center">测试时间/图片</td><td align="center">47.0s</td><td align="center">2.3s</td><td align="center"><strong>0.32s</strong></td></tr><tr><td align="center">mAP</td><td align="center">66.0</td><td align="center">63.1</td><td align="center"><strong>66.9</strong></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="Fast-R-CNN总结"><a href="#Fast-R-CNN总结" class="headerlink" title="Fast R-CNN总结"></a>Fast R-CNN总结</h4><p><a href="https://imgtu.com/i/hGXGxP" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hGXGxP.png" alt="Fast R-CNN"></a></p><p>基本上已经算是一个完整的神经网络了</p><ul><li>缺点<ul><li>Selective Search 提取Region Proposals, <strong>没有真正意义的端到端</strong>，操作也比较耗时</li></ul></li></ul><p>接下来便是我们的最终优化改进，Faster R-CNN的登场了！</p><h3 id="目标检测Faster-R-CNN"><a href="#目标检测Faster-R-CNN" class="headerlink" title="目标检测Faster R-CNN"></a>目标检测Faster R-CNN</h3><h4 id="Preface-4"><a href="#Preface-4" class="headerlink" title="Preface"></a>Preface</h4><ul><li>了解Faster R-CNN的特点</li><li>知道RPN的原理以及作用</li><li>候选区域融合到网络之中。</li></ul><p>在Fast R-CNN还存在着瓶颈问题：Selective  Search （选择性搜索）。要找出所有的候选框，那我们有没有一个更加高效的方法来求出这些候选框呢？</p><h4 id="改进之处-1"><a href="#改进之处-1" class="headerlink" title="改进之处"></a>改进之处</h4><p>在Faster R-CNN中加入了一个提取边缘的神经网络，也就是说找候选框的工作也交给了神经网络来做了。这样，目标检测的四个基本步骤（<strong>候选区域生成，特征提取，分类，位置精修</strong>）终于被统一到一个深度网络框架之内。</p><p>我们不妨先看一下三种网络的对比：</p><p><a href="https://imgtu.com/i/hGjR6P" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hGjR6P.png" alt="三种方法对比"></a></p><p>可以明显看出我们的faster相比之下候选区域的推荐也融进去了，将以上说的四个步骤：<strong>候选区域生成，特征提取，分类，位置精修</strong>都融进去了。</p><p>Faster R-CNN可以简单地看成是<strong>区域生成网络+Fast R-CNN的模型</strong>， 用区域生成网络（Region Proposal Network, 简称RPN）来代替Fast R-CNN中的选择性搜索方法，结构如下：</p><p><a href="https://imgtu.com/i/hGjx7F" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/29/hGjx7F.png" alt="RPN结构"></a></p><h4 id="RPN"><a href="#RPN" class="headerlink" title="RPN"></a>RPN</h4><ul><li><p>首先向CNN网络（VGG-16)输入图片，Faster R-CNN使用一组基础的conv+relu+pooling层提取feature map.该<strong>feature map被共享用于后续RPN层和全连接层</strong>。</p></li><li><p>Region Proposal Networks. RPN网络用于生成region proposals, faster rcnn中称之为anchors</p><ul><li><strong>通过softmax判断anchors属于foreground 或者background</strong></li><li><strong>再利用bounding box regression 修正anchors获得精确的proposals， 输出器Top-N(默认为300)的区域给RoI pooling</strong></li><li>得到默认300个候选区域</li></ul></li><li><p>生成anchors-&gt;softmax分类器提取fg anchors -&gt; bbox reg回归 fg anchors -&gt; Proposal Layer生成proposals</p></li><li><p>后续就是Fast RCNN操作</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210829221422804.png" alt="全过程"></p><ul><li>RPN就是我们的从Feature Map到ROIPooling这中间的部分，也就是图片左下角这么一块部分。</li><li>原来我们是将我们的feature map通过SS（选择性搜索）得到我们的候选区域然后映射到我们的ROIPooling处理后的结果得到最终候选区域</li><li>现在我们可以说RPN完全取代了我们SS所承担的任务，直接通过我们的RPN在我们的feature map来得到我们候选区域，然后也是同样的映射到ROIPooling处理后的结果。</li></ul><h4 id="RPN原理"><a href="#RPN原理" class="headerlink" title="RPN原理"></a>RPN原理</h4><p>RPN网络的主要作用是得出比较准确的候选区域。整个过程分为两步</p><ul><li>用n×n（默认3×3=9）的大小窗口去扫描特征图，每个滑窗位置映射到一个低维的向量（默认256维），并为每个滑窗位置考虑k种（在论文设计中k=9）可能的<strong>参考窗口（论文中称为anchors）</strong></li><li>这里滑动的方式请注意，这里会以每一个像素为中心点生成k种可能的参考窗口。假设我们的输入feature map是20*20*256的，那么我们会得到20*20*9=3600个参考窗口（anchors）（当然我们的每一个anchors也有256个通道）。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/30/htGhbn.png" alt="建议框"></p><ul><li><p>我们可以看一下他所给出的每个像素点为中心的九种窗口大小的选取：</p><p><a href="https://imgtu.com/i/htNkMF" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/30/htNkMF.png" alt="九种窗口"></a></p></li></ul><ul><li>3*3卷积核的中心点对应原图上的位置，将该点作为anchor的中心点，在原图中框出多尺度、多种长宽比的anchors，三种尺度（128，256，512），三种长宽比（1：1，1：2，2：1），每个特征图种的像素点有9种框。上边就是所谓的图。</li></ul><p>举个例子（以下图为例）：</p><p><a href="https://imgtu.com/i/htUVl8" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/30/htUVl8.png" alt="流程"></a></p><p>假设我们最后feature shape为51*39*256, 那么我们会最终得到</p><h4 id="Faster-R-CNN训练"><a href="#Faster-R-CNN训练" class="headerlink" title="Faster R-CNN训练"></a>Faster R-CNN训练</h4><p>Faster R-CNN的训练分为两部分，即两个网络的训练。</p><ul><li><p>RPN训练</p><ul><li>目的：从众多的候选区域中提取出score较高的，并且经过regression调整的候选区域</li><li>分类：二分类，softmax，logistic regression</li><li>候选框的调整：均方误差修正</li></ul></li><li><p>Fast R-CNN部分的训练：</p><ul><li>Fast R-CNN classification(over classes): 所有类别分类N+1，得到候选区域的每个类别概率</li><li>Fast R-CNN regression(bbox regression): 得到更好的位置</li></ul></li></ul><ul><li>预测类别训练：softmax</li><li>预测位置的训练：均方误差损失</li></ul><p><a href="https://imgtu.com/i/hN3s7q" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/30/hN3s7q.png" alt="总流程"></a></p><h4 id="候选区域的训练"><a href="#候选区域的训练" class="headerlink" title="候选区域的训练"></a>候选区域的训练</h4><ul><li>训练样本anchor标记<ul><li>每个ground-truth box有着最高的IOU的anchor标记为正样本</li><li>剩下的anchor/anchors与任何ground-truth box的IOU大于0.7的记为正样本，IOU小于0.3，记为负样本</li><li>剩下的样本全部忽略</li><li>正负样本比例为1：3</li></ul></li></ul><p><a href="https://blog.csdn.net/qq_40212975/article/details/107214896" target="_blank" rel="noopener">关于正负样本、简单困难样本</a></p><p><a href="https://imgtu.com/i/hNB5KP" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/30/hNB5KP.png" alt></a></p><ul><li>训练损失<ul><li>RPN classification(anchor good/bad), 二分类，是否有物体，是，否。</li><li>RPN， 回归</li><li>注：这里使用的损失函数和Fast R-CNN内的损失函数原理类似，同时最小化两种代价</li></ul></li></ul><p><strong>候选区域的训练是为了让得出来的正确的候选区域，并且候选区域经过了回归微调。在这基础上做Fast RCNN训练是得到特征向量做分类预测和回归预测。</strong></p><h4 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h4><p><a href="https://imgtu.com/i/hNrmSs" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/30/hNrmSs.png" alt="三种R-CNN对比" style="zoom:150%;"></a></p><p>Faster R-CNN很明显速度会更快一些，性能提升非常显著。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>优点</p><ul><li>提出RPN网络</li><li>端到端网络模型</li></ul></li><li><p>缺点</p><ul><li>训练参数过大</li></ul></li></ul><p>可以改进的需求：</p><ul><li>RPN（Region Proposal Networks)改进对于小目标选择利用多尺度特征信息进行RPN</li><li>速度提升，如YOLO系列算法，删去了RPN，直接对proposal进行分类回归，极大的提升了网络的速度</li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> Faster RCNN </tag>
            
            <tag> RCNN </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Fast RCNN </tag>
            
            <tag> SPPNet </tag>
            
            <tag> ResNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据增强</title>
      <link href="/2021/09/06/shu-ju-zeng-qiang/"/>
      <url>/2021/09/06/shu-ju-zeng-qiang/</url>
      
        <content type="html"><![CDATA[<h2 id="数据增强（Data-Augmentation"><a href="#数据增强（Data-Augmentation" class="headerlink" title="数据增强（Data Augmentation)"></a>数据增强（Data Augmentation)</h2><h4 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h4><p>由于数据增强本人目前只是简单了解，并没有理解的太深入，所以这个博客会持续更新。目前仅记录了一些自己的笔记。</p><h3 id="一些简单介绍"><a href="#一些简单介绍" class="headerlink" title="一些简单介绍"></a>一些简单介绍</h3><ul><li>增加已有的数据集，使得有更多的多样性<ul><li>在语言里面加入各种不同的背景噪音</li><li>改变图片的颜色和形状（色温呀、类似的）</li></ul></li></ul><ul><li>数据增强是<strong>在线、随机</strong>生成的<ul><li>在线是指我们由原始的数据集，然后对原始数据集进行处理处理后并不存储在磁盘里，仅仅存到内存中，就相当于临时存储加工数据了，这个是我们的此刻的一个处理，相当于<strong>数据集临时得到了扩充</strong></li><li>随机是指我们的数据集进行数据增强的操作是随机选取的图片进行数据增强，每次数据增强选取的图片可能都不一样。</li></ul></li></ul><ul><li>测试的时候一般不会进行图片增强（<del>欸？为什么不行呢？我觉得很有道理啊</del>）<ul><li>可以认为数据增强是作用到训练的时候的一个正则项。</li></ul></li></ul><h3 id="常见数据增强操作"><a href="#常见数据增强操作" class="headerlink" title="常见数据增强操作"></a>常见数据增强操作</h3><h4 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h4><ul><li>左右翻转,又称为镜像对称，这个似乎是最常见的，最实用的。</li><li>上下翻转，但是上下翻转不总是行的，如果我们图片是建筑物图片，就不太好上下翻转</li></ul><p><a href="https://imgtu.com/i/h9obo4" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/h9obo4.png" alt="翻转"></a></p><h4 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h4><p>随机裁剪,随机选取一部分进行裁剪。</p><p><a href="https://imgtu.com/i/h9TT1I" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/h9TT1I.png" alt="Random Cropping"></a></p><h4 id="色彩转换（Color-Shifting"><a href="#色彩转换（Color-Shifting" class="headerlink" title="色彩转换（Color Shifting)"></a>色彩转换（Color Shifting)</h4><p>提供一个图片，我们把RGB三个通道加上不同的偏移值。然后我们就得到了一个较为失真的图片。当然实际使用的时候并不是任意修改RGB值的，我们会选择基于某种分布更改RGB值。</p><p><a href="https://imgtu.com/i/h974bT" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/h974bT.png" alt="Color Shifting"></a></p><p>这么做目的就是使用RGB改变颜色、色温这些东西，<strong>注意这些是有用的！！</strong></p><p>我们有一些现实的案例：</p><p><a href="https://imgtu.com/i/h97cCj" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/23/h97cCj.png" alt="CES"></a></p><p>这就是我们为什么要改变这些颜色来增强数据。<strong>这会让我们的模型对颜色的更改更具有鲁棒性</strong></p><p><em>我们可以不理解我们更改的RGB的改变方式，我们对具体的颜色改变的方式叫做PCA颜色增强（PCA color augmentation)（<del>PCA是主成分分析的意思，是我听说过但不曾学过的降维方法，但这里很明显不是这个意思</del>）,这个在Alex的论文中首次提到。而这个的大概含义就是如果我们的图片呈现紫色，即主要含有红色和蓝色，有很少的绿色。那么PCA  color Augmentation 算法便会减少大量的R 和B值，而保留较多的G值一是我们总体的颜色保持一致。</em></p><h3 id="关于数据增强的多线程CPU加载过程"><a href="#关于数据增强的多线程CPU加载过程" class="headerlink" title="关于数据增强的多线程CPU加载过程"></a>关于数据增强的多线程CPU加载过程</h3><p>这些我们估计没有办法进行一个简单的讲解，可以看这个<a href="https://www.bilibili.com/video/BV1y7411476v?p=21" target="_blank" rel="noopener">课程</a>,从6：22开始看。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 数据增强 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 路径相互引用导入问题(转)</title>
      <link href="/2021/09/01/python-lu-jing-xiang-hu-yin-yong-dao-ru-wen-ti/"/>
      <url>/2021/09/01/python-lu-jing-xiang-hu-yin-yong-dao-ru-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><a href="https://segmentfault.com/u/huaweiyunkaifazheshequ" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://avatar-static.segmentfault.com/310/908/3109081790-5eb6281a8ede6_huge128" alt><strong>华为云开发者社区</strong></a>发布于 2 月 5 日<a href="https://segmentfault.com/a/1190000039175570" target="_blank" rel="noopener">终于搞懂了Python模块之间的相互引用问题</a></p><blockquote><p>摘要：详细讲解了相对路径和绝对路径的引用方法。</p></blockquote><p>在某次运行过程中出现了如下两个报错：</p><pre class="line-numbers language-ceylon"><code class="language-ceylon">报错1： ModuleNotFoundError: No module named '__main__.src_test1'; '__main__' is not a package报错2： ImportError: attempted relative import with no known parent package <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>于是基于这两个报错探究了一下python3中的模块相互引用的问题，下面来逐个解析，请耐心看完。</p><p>好的，我们先来构造第一个错：</p><p><strong>测试代码结构如下：</strong></p><pre class="line-numbers language-1c"><code class="language-1c">|--- test_main.py|--- src  |--- __init__.py                                                                  |--- src_test1.py    |--- src_test2.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>src_test2.py 代码</strong></p><pre class="line-numbers language-angelscript"><code class="language-angelscript">class Test2(object):    def foo(self):        print('I am foo')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>src_test1.py 代码，引用Test2模块</p><pre class="line-numbers language-isbl"><code class="language-isbl">from .src_test2 import Test2def fun1():    t2 = Test2()    t2.foo()if __name__ == "__main__":    fun1()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时运行 src_test1.py 报错“No module named ‘<strong>main</strong>.src_test1’; ‘<strong>main</strong>‘ is not a package”</p><p>问题原因：</p><p>主要在于引用src_test2模块的时候，用的是相对路径”.”，在import语法中翻译成”./“，也就是当前目录下，按这样理解也没有问题，那为什么报错呢？</p><p>从 PEP 328 中，我们找到了关于 the relative imports（相对引用）的介绍</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://segmentfault.com/img/bVcOxvT" alt></p><p>通俗一点意思就是，你程序入口运行的那个模块，就默认为<strong>主模块</strong>，他的name就是‘main’，然后会将本模块import中的点(.)替换成‘<strong>main</strong>’，那么 .src_test2就变成了 <strong>main</strong>.src_test2，所以当然找不到这个模块了。</p><p><strong>解决方法：</strong></p><p>因此，建议的做法是在 src同层级目录创建 引用模块 test_main.py（为什么不在src目录下创建，待会下一个报错再讲），并引用src_test1模块，代码如下：</p><pre class="line-numbers language-capnproto"><code class="language-capnproto">from src.src_test1 import fun1if __name__ == "__main__":    fun1()test_src 代码:from src_test1 import fun1if __name__ == "__main__":    fun1()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行报错：ImportError: attempted relative import with no known parent package</p><p>问题原因：</p><p>当执行test_src时，按上文理解，此时执行文件所在的目录为根目录，那么引用test1的时候，需要注意的是，此时test1的name属性不再是src.src_test1，因为程序感知不到src的存在，此时他的绝对路径是 src_test1，此时再次引用相对路径查找的test2，同样的步骤，需要先找到父节点，而此时他自己就是根节点了，已经没有父节点了，因此报错“no known parent package”。</p><p>解决方法：</p><p>此时为了避免父节点产生矛盾，因此将test1中的引入去掉相对引用即可</p><pre class="line-numbers language-clean"><code class="language-clean">from .src_test2 import Test2    -->    from src_test2 import Test2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>继续深入：</strong></p><p>那使用相对路径和绝对路径，编译器是怎么找到这个模块的呢？</p><p>执行import的时候，存在一个引入的顺序，即优先查找执行目录下有没有此文件，如没有，再查找lib库下，如还没有，再查找sys.path中的路径，如再没有，报错。</p><p>所以不管是当前目录，还是 sys.path中的目录，都可以查到 src_test2这个模块，就可以编译成功。</p><p><strong>号外</strong>：</p><p>解决完上述问题后，不管我们用哪种方式，我们调试代码时，都是单个文件调试，但此时根目录就不对了，import方式又要改动，执行起来很麻烦，所以这里推荐另一种方式（有更好的方式欢迎留言），使用sys.path.append()的方法</p><pre class="line-numbers language-moonscript"><code class="language-moonscript">import sys,ossys.path.append(os.getcwd())from src.src_test2 import Test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用append的方式，将程序文件根目录放进了sys.path中，然后再引用<strong>绝对</strong>路径，这样的方式，不管使用上文中的第一或第二执行方式都可以调用，也可以单独编译test1文件，不用修改import路径，也是相对安全的方式。但是缺点就是，如果你修改了某一个包名，需要将所有引用地方都修改一下，工作量大，所以因地制宜。</p><p>综上，详细讲解了相对路径和绝对路径的引用方法，现在你应该对import导入的问题有了清晰的理解吧</p>]]></content>
      
      
      <categories>
          
          <category> 语法知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 语法 </tag>
            
            <tag> 路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度还有翻盘的机会吗</title>
      <link href="/2021/08/26/bai-du-huan-you-fan-pan-de-ji-hui-ma/"/>
      <url>/2021/08/26/bai-du-huan-you-fan-pan-de-ji-hui-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="前面写点个人感想"><a href="#前面写点个人感想" class="headerlink" title="前面写点个人感想"></a>前面写点个人感想</h2><p>我对于BAT的态度，可能目前百度不配了。但是这并不妨碍我最喜欢百度。我认为百度一直是一家技术公司。当然现在百度没落了，不过我认为，也希望百度可以靠人工智能，靠AI翻盘。个人看来，百度可能是为数不多的未来可以做到和Google、Amazon一样的全球性质的高科技互联网公司，我认为全球高科技互联网公司，中国目前只有百度可以做到。当然现在百度有着太多太多的问题。产品体验过差确实是硬伤。不过目前最困难的时刻已经过去了，希望百度能够挺住熬过目前的困难，百度加油！</p><p>知乎上、各个论坛上都在骂百度的垃圾产品百家号，垃圾的广告，黑暗的竞价排名，百度客服的混乱与不负责任，已经看不到的企业文化（虽然我觉得现在阿里的也不咋地）……到处都是在吐槽诟病百度的目前种种缺点，好像现在百度就像是一个生病的巨人。靠着仅存的搜索引擎优势在苟活……</p><p>的确，以上都是很致命、很招人厌的缺点。我也认为如果这么继续下去百度可能真的要完了……</p><p>但是我还是很崇敬百度的许多举措……</p><p>他是国内为数不多的在<strong>认真</strong>做自己的深度学习框架paddlepaddle的企业，也是在企业已经如此境地的情况下坚持布局AI，8年无产出的投入近千亿研究AI的企业<del>（就这一点我觉得我对这个企业就绝对讨厌不起来）</del>, 仍然是自动驾驶这个领域甚至是全球领先的企业。可以说这是为数不多的国内高科技、搞技术的高新企业。像这么一个规模的企业，几乎都是在做产品，甚至阿里达摩院在承接外包，自负盈亏……</p><p>个人真心希望百度可以改善自己产品，优化形象，成功转型，成功赶上甚至引领AI的风口。逆势而为，未来是星辰大海！</p><blockquote><p>以下是转载内容，如有侵权，请联系博主<a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a>：</p><p> 本文来自微信公众号<a href="https://mp.weixin.qq.com/s/FweA28zX0sjHsGY4cf-wDA" target="_blank" rel="noopener">“智慧云董事会”（ID:izhihuiyun）</a>，作者：陈雪频</p><p>看了许多百度的分析，大多数都是吐槽和不看好，真正细致分析的、客观的几乎没有。直到我看到这篇文章，感觉写得非常精彩！也让我对百度的规划与政策有了更好的了解与理解，转载匆忙，如果这篇文章有侵权，请立刻联系本人<a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a>，侵删</p></blockquote><blockquote><p> 百度一度是中国市值最高的互联网公司，但在最近几年增长缓慢，不仅被阿里巴巴和腾讯超越，甚至市值落后于后来者美团和拼多多。本文通过对百度在战略和业务布局的分析，发现百度虽然在移动互联网时代一度落后，但在人工智能领域还有机会翻盘，上演一出类似于微软转型的好戏，但前提是百度必须在组织和文化方面持续优化，打造一个更加开放的生态型组织。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_21c213531bfa495bbe7effb905caad60_img_000" alt="李彦宏"></p><p>过去两年，<a href="https://36kr.com/projectDetails/28215" target="_blank" rel="noopener">百度</a>在资本市场的表现平平。2018年5月31日，百度的股价达到历史的最高点284美元，市值也达到历史最高点980亿美元。这之后，百度的股价就一直处在下跌通道中，一直跌到2020年3月31日的82美元才开始反弹。此时百度的市值为283亿美元，和20个月前相比跌幅超过70%，和10年前百度的市值相当。这之后百度的股价开始反弹，并在2020年6月22日反弹到123美元，和两个多月前相比上涨了近50%。</p><p>再把时间线拉长，百度在过去十年的股价也是起起伏伏。2011年，百度曾经一度是中国市值最高的互联网公司，和<a href="https://36kr.com/projectDetails/7133" target="_blank" rel="noopener">阿里巴巴</a>和腾讯并称BAT。当时的腾讯刚刚经历过3Q大战的洗礼，公司内部士气低迷，阿里巴巴只有B2B业务上市，股价也是一度低迷。当时投资人更看好在搜索领域一枝独秀的百度，而不是还在不断探索业务边界的阿里巴巴和腾讯。大家都认为百度是中国技术势力最雄厚的互联网公司，未来的想象空间更大。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_a3bd449a305d4ac8bd4c5722f936e4ce_img_000" alt="百度过去10年的股价变迁图"></p><p>十年过去了，腾讯的股价上升了20多倍，阿里巴巴在经历了B2B业务退市和集团上市，两家公司的市值都突破了5000亿美元，但百度的市值依然起起伏伏。十年前，美团、<a href="https://36kr.com/projectDetails/99343" target="_blank" rel="noopener">字节跳动</a>、滴滴和<a href="https://36kr.com/projectDetails/81304" target="_blank" rel="noopener">拼多多</a>还没有创立，但如今美团和拼多多的市值都超过了千亿美元，字节跳动和滴滴在一级市场的估值也都高于百度。虽然每家公司的商业模式都不一样，仅仅用市值来判断一家公司的价值未必正确，但至少能反应投资人对这家公司的信心。</p><p>“市场短期是投票器，长期是称重器。”这是价值投资教父本杰明.格雷厄姆的名言，也被他的学生沃伦.巴菲特奉为圭臬，意思是一家公司的股价波动短期来看是股民以持有市值投票的结果，长期来看这家公司的股价则能反映这个公司的真实价值。如果用价值投资的理念去判断一家企业，我就不能仅仅通过这家公司财报去衡量一家公司的未来，更要通过这家公司的战略、产品、组织、人才和文化等视角去判断这家公司的前景，从而评估它的价值。</p><p>这篇文章从价值投资的视角，分析百度在资本市场表现不佳的原因，并根据它在战略和业务上的布局，预测它未来可能的市场表现。这篇文章也希望能回答这样一个问题：一家曾经的行业霸主在遭遇增长失速之后，它还能恢复到以前的活力吗？</p><h2 id="01、百度市值下滑背后的原因何在？"><a href="#01、百度市值下滑背后的原因何在？" class="headerlink" title="01、百度市值下滑背后的原因何在？"></a>01、百度市值下滑背后的原因何在？</h2><p>关于百度市值下滑分析的文章不少，大都基于定量和定性的分析。不管是那种分析方法，都要从百度的财报看起，让我们先来分析百度过去三年多的财务报表。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_6659b27cca2a49a2b00183a825376b97_img_000" alt="财务报表"></p><p>百度2017—2020年的财务报表分析</p><p>从百度的财务报表可以看到，百度的主要收入为在线广告，尤其是搜索引擎和视频广告。从数据来看，百度在线广告的收入这3年没有大幅增长。2020年春节后，由于新冠病毒疫情的缘故，广告投放量大幅下滑，也导致百度在2020年第一季度的收入出现了两位数的下滑。再加上3月份美国遭遇了百年不遇的股灾，所有股票都大幅跳水，两个原因叠加在一起，这也是百度在今年股价大幅下滑的主要原因。</p><p>从细分行业的增长性来看，百度核心收入的增长缓慢和互联网的流量变迁有很大关系。在PC互联网时代，百度掌控了互联网信息的入口，“有事情、百度一下”，成为一代人的行为习惯。但随着移动互联网尤其是社交媒体的兴起，搜索引擎的信息掌控优势被削弱，信息获取的方式变得更加多元化，微信、<a href="https://36kr.com/projectDetails/38685" target="_blank" rel="noopener">微博</a>、视频、头条、抖音都在分散百度的流量，伴随着流量的分散，搜索带来的在线广告收入下滑不可避免。</p><p>根据中关村互动营销实验室发布的《2019年互联网广告发展报告》，2019年中国互联网广告总收入约4367亿人民币，相较于上一年增长率为18.2%。其中来自电商平台的广告占总量的35.9%，稳居第一，比2018年增长3%；搜索类平台广告以14.9%的份额仍居第二位，但比2018年的21%下滑了近三分之一；视频类平台收入同比增长43%，取代新闻资讯类平台，成为第三大互联网广告投放平台。百度的主要收入来源是搜索引擎和视频类平台带来的收入，尤其是搜索带来的广告收入，因此收入受行业影响下滑就难免了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_40ff7904ebb94ac4951e3f3ab7c0419a_img_000" alt="2019年在线广告收入的媒体平台类型排名"></p><p>再来分析一下中国互联网广告的前十名排名。中国在线广告收入最多的公司是阿里巴巴，这主要是因为阿里巴巴是电子商务平台的领导者，而这个细分赛道又在所有在线广告媒体渠道中占据了35.9%的收入，因此收入超过千亿人民币。由于字节跳动在短视频（抖音）和新闻资讯类媒体（今日头条）的表现突出，导致其收入已经超过百度，成为中国在线广告收入排名第二的公司。由此可见，百度增长失速的最重要的原因还是所在细分行业增幅下滑导致的。</p><p>决定一家公司市值的原因很多，有关这方面的财务模型也不少。如果高度简化的话，市值是投资人对公司未来价值的判断，这种判断一般基于两点：一是公司现在的财务表现，核心数据包括公司的销售额和利润，这是一个定量和相对静态的概念；第二是公司未来的增长潜力，包括这家公司过去一段时间的增长趋势，以及这家公司在增长潜力方面的综合判断，这是一个定性和相对动态的判断。</p><p>用这个市值模型可以看出，百度市值下滑的主要原因有三个：第一是核心业务收入下滑，导致公司的财务表现不佳，影响了投资者的信心。第二是百度虽然过去三年多的研发投入都在稳步增加，而且在AI方面获得技术突破，在AI领域的收入也在上涨，但投资者都这个领域的未来还持观望状态。第三是外部环境遭遇到了百年一遇的疫情和股灾影响，导致所有企业都遭遇了股价下跌，百度当然也不例外。</p><p>现在看来，百度最糟糕的时间应该已经过去了。</p><p>首先，百度搜索有两个显性变化，一是端内搜索不断增长，已经占到整体移动搜索50%以上；二是AI搜索带来近60%的登录用户，越来越多的广告主使用百家号、托管页和小程序营销运营。百度<a href="https://36kr.com/projectDetails/107450" target="_blank" rel="noopener">搜索广告</a>历史上曾经有高达50%的运营利润率，如今利润率保持40%以上，预期核心收入同比趋势变好。</p><p>其次，由于疫情放缓和经济复苏，导致百度在核心业务方面的广告收入也在快速复苏。再加上随着国家在新基建领域的十万亿级投资，百度在AI领域的收入一定会迎来爆发。</p><p>再次，美国最近实现量化宽松的货币政策，过去一段时间在美上市公司的股价都强力反弹，因此百度在未来一段时间的股价应该会持续走高。这也是百度在过去两个多月股价上涨50%的几个原因。</p><p>当然，我们也不能仅仅因根据一家公司的财报来判断这家公司的价值，更不能判断这家公司在未来的市值走向。想要对百度未来的发展有一个清晰的判断，还需要从百度的战略、产品、服务、组织、人才、运营、管理等层面去分析它，从而对百度的未来有一个更加完整的认识。</p><h2 id="02、百度在移动业务上还能获得增长吗？"><a href="#02、百度在移动业务上还能获得增长吗？" class="headerlink" title="02、百度在移动业务上还能获得增长吗？"></a>02、百度在移动业务上还能获得增长吗？</h2><p>首先我们来分析百度的战略布局。百度的战略是：“夯实移动基础、决胜AI时代”。其中，目前百度的主要收入来源就是移动业务（相当于现金流业务），包括PC搜索和移动搜索等，以及围绕着流量的视频、社群、知识和工具类服务。AI（人工智能）则是百度正在大力探索的业务（相当于未来的明星业务），这一块主要还在投入期，可以理解为百度的“第二曲线”业务。百度的战略核心就是在移动板块保持领先，确保现金流的稳定，同时在AI方面快速布局，获得更大的想象空间。</p><p>百度CEO李彦宏对“夯实移动基础”的理解是，百度要构建一个空前繁荣强大的移动生态。这个强大的移动生态不是简单的简单的“搜索+feed”，它们是百度的双引擎，但不是百度移动生态的全部。移动生态是指整个生态的相互依存关系是顺的，它能够孵化出强大的产品、好用的功能、好的用户体验。</p><p>分析百度在移动版图的布局，可以看出百度的主要做法是围绕着百度APP来展开的，通过百度APP的超级流量带动了知识、视频、社群和工具类产品。然后在一些垂直领域的内容和商业应用方面都有布局，其中大多数是百度自营的内容平台，还有一些是通过投资实现细分内容的连接，比如<a href="https://36kr.com/projectDetails/26201" target="_blank" rel="noopener">知乎</a>，果壳、<a href="https://36kr.com/projectDetails/50809" target="_blank" rel="noopener">凯叔讲故事</a>、<a href="https://36kr.com/projectDetails/30367" target="_blank" rel="noopener">网易</a>云音乐、<a href="https://36kr.com/projectDetails/113287" target="_blank" rel="noopener">梨视频</a>、<a href="https://dianping.36kr.com/space/4879001014" target="_blank" rel="noopener">有赞</a>等。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_68b486f043d341ae85018ad61447299a_img_000" alt="百度移动版图"></p><p>百度对优质内容非常重视，一个重要的原因是百度一直希望打造信息入口，这也决定了他们需要更加优质的内容。在PC互联网时代，百度就先后推出了贴吧、知道、百科等内容产品，至今这些产品仍是百度移动生态的重要组成部分。到了移动互联网时代，“信息孤岛”让百度可以获取的优质内容减少，于是百度先是发力百家号，为移动端提供优质内容，后又在2018年推出智能小程序，构建新的内容生态环境。</p><p>到目前为止，百度在包括知道、百科、文库等知识内容方面积累了超10亿的高质量内容。百度百科是全球最大的中文百科全书，拥有1600万个词条；百度知道是全球最大的互动问答平台，累积问答数达到5.5亿；百度文库是中国最大的文档分享平台，在线文档数超6亿。另外，百家号拥有240万内容生产者，生产内容包括文章、图片、短视频等；百度智能小程序月活跃用户达3亿，入驻小程序数量达到30万。</p><p>由此，百度构建了中国最大的以信息和知识为核心的移动生态。通过对百度在移动版图的布局可以看出，百度一方面通过双引擎——搜索和信息流的方式分发内容，并形成每天百亿级的流量分发，一方面通过百家号和智能小程序形成一个内容生态。与此同时，百度还通过战略投资的方式拓宽内容维度，满足更多用户多样化的内容需求，提高用户满意度，增加用户黏性，夯实以信息和知识为核心的移动生态。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_0fe877ed19e5421db2c72ac41b9b08b8_img_000" alt="百度在2018—2019年在移动赛道上的投资版图"></p><p>比如说，在百度投资的项目中，知乎拥有2.2亿用户，1.3亿回答数量，是国内头部知识问答社区。这些内容以智能小程序的形式接入百度App后，不仅拓宽了百度App内容生态维度，也为用户提供更广泛的知识内容，提升了用户体验。同样，果壳、凯叔讲故事、七猫小说、网易云音乐的接入，不仅满足用户对于图文、资讯、音频、视频、阅读等多种娱乐内容诉求，增强用户对于产品的黏性，提升用户使用时长。</p><p>百度想要在移动版图上保持增长，除了保持在搜索业务的稳定之外，还需要拓展自己在视频和新闻资讯领域的增长速度，这也是百度在内容生态方面发力的主要驱动力。从战略层面来看，百度已经看到了这个趋势，因此积极在内容端去发力，以获得未来的可持续增长。</p><p>随着百度搜索从网页端搜索向APP端和智能终端搜索转化，导致百度APP已经占到了百度收入的一半以上，而且越来越多的广告通过百家号和小程序来实现。2019年，百度的核心广告业务总收入约为 781 亿，净利润达到228亿，利润率接近30%。假设百度的核心广告业务收入长期保持10%的增长率，市盈率不低于12倍（这两个数字都比较保守），百度在移动业务的估值就应该不低于450亿美元，高于目前整个百度的市值。</p><p>综上所述，只要百度守住了移动业务的基本盘，保持稳健的现金流，就有翻盘的机会。</p><h2 id="03、AI商业化是否可期？"><a href="#03、AI商业化是否可期？" class="headerlink" title="03、AI商业化是否可期？"></a>03、AI商业化是否可期？</h2><p>如果说移动业务是百度的现金流业务，是百度的立身之本，但在这个领域由于竞争已经比较充分，这个领域发展得再好也只能是保持优势。百度要想恢复BAT时代的荣耀，市值在现有基础上增长10倍以上，和腾讯和阿里巴巴比肩，就需要在这个领域能有突破性的发展。</p><p>为什么这么说呢？主要原因有两个：第一是大势所趋，在未来数字经济将会迎来一波爆发性的增长，这里面存在十万亿级的市场，其中AI则是数字经济的核心驱动因素。第二是相对优势，现在各大公司都在发力AI，但百度在这个领域耕耘时间最长，拥有的专利最多，相比其他企业更具优势。一个好战略应该满足三个条件：有现实的市场需求，企业有资源和技术，有差异化的竞争优势。AI对于百度来说是三者兼备。</p><p>通过对政治、经济、社会和科技做分析（PEST分析），都会发现AI是大趋势。从政治来看，国家在AI方面出台了一系列政策，在2020年推出的新基建中，AI是七大部分之一。从经济来看，中国经济的转型升级，企业面临数字化转型，而AI在数字化转型中扮演大脑角色。从社会来看，2020年的新冠病毒疫情中，AI扮演了非常重要的角色。从科技来看，现在各种AI的应用越来越成熟，并形成了一个完整的产业链。</p><p>2018年12月，中央经济工作会议在北京举行，会议重新定义了基础设施建设，把5G、人工智能、工业互联网、物联网定义为“新型基础设施建设”，简称“新基建”。在新基建中，人工智能扮演中大脑的角色，在这个领域未来会有数以千亿的投资，而百度在这个领域具备优势。2020年，新冠肺炎疫情发生以来，AI在医疗、配送、巡检等方面<a href="https://36kr.com/projectDetails/461959" target="_blank" rel="noopener">大显</a>身手，“新基建”也按下快进键，双重因素叠加，导致AI正迎来新的发展新机遇。AI的商业化也开始迎来了春天，作为AI领域的领导者，百度具有很大的想象空间。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_c7b3511b68354d71b9519f1984c7e1a6_img_000" alt="百度的AI新基建版图"></p><p>AI会在三个层次带来实质的经济和产业结构性影响，而百度在这三个层次上都有布局：</p><p>首先是智能交互层，对应的是各种终端设备和应用服务，主要商业模式是2C。在移动互联网时代对应的是智能手机和各种APP应用，但人工智能和物联网会超越智能手机的范围，比如智能音箱，各种可穿戴设备，传感装置和机器人等，这必将导致整个行业被重新洗牌。百度在这个领域非常有优势，移动端拥有十亿以上的用户，对话式语音交互的小度音箱中国市场份额第一，他们都是AI的终端设备和应用。</p><p>其次是基础设施层，对应的是5G网络、云计算、大数据和AI等，这些基础设施最终都会通过云服务的模式对外开放共享，其主要商业模式是2B。这个层次的创新不如用户终端层面那样明显，但影响却非常深远。国外的谷歌、亚马逊和微软都在这个基础设施领域长期投资，这也是支撑他们的市值超过一万亿美元的重要基础。在国内，<a href="https://36kr.com/projectDetails/25167" target="_blank" rel="noopener">华为</a>、百度、腾讯和阿里巴巴都在这里投以重金，其中百度则以AI见长。</p><p>最后是产业智能化层面，对应的是交通、医疗、城市、教育等等具体行业的智能化，以及在智能化基础之上，这些行业之间的相互影响，其商业模式可能是垂直整合的，既有2B的成分，也有2C的成分。数字技术对行业的改造主要集中在信息、零售、旅游、酒店、本地生活服务和金融等个人信息驱动的行业，但物联网和人工智能驱动的智能经济不但包括了个人信息，还包括了物的信息，比如无人驾驶就聚合很多创新机会。百度、腾讯和阿里巴巴都在推出产业互联网，其主要的思路就是利用AI等数字技术推动传统产业的转型升级。其中，百度在交通、能源、教育等领域的数字技术方面比较有优势。</p><p>百度在AI领域的优势在于它布局很早。从2017年起，AI作为百度新的驱动引擎，逐渐深入其各项业务中，无论是搜索、内容分发，还是智能驾驶、医疗等，都打上了AI的烙印。基于庞大的用户数据能够让百度在AI算法上占领优势，因此百度一直在不断加码基础设施建设，不断投资人工智能基础技术。百度在中国建立了十几个云计算中心，并投资了40千兆交换机，为人工智能技术和存储提供重要支持。“百度大脑”的参数规模已经达到百亿级，创造了世界上最大的深度神经网络。</p><p>中国专利保护协会发布的《人工智能技术专利深度分析报告》显示，2019年百度以2368件的AI专利申请量在国内位居第一，是腾讯的2倍，阿里巴巴的3倍以上。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_af6955ea361f43e4bbf73c462cebffb9_img_000" alt="百度在AI领域的布局"></p><p>百度还通过投资在泛互联网和AI企业，营造AI的产业生态。其中，2016 年 9 月，百度成立百度风投，基金规模超过 30 亿人民币，专注于投资人工智能领域的早期项目；2016 年 10 月，百度成立百度资本，基金规模 200 亿人民币，投资于泛互联网领域中后期项目。2018年4月，百度还成立了长成基金，出资额为5亿美元，投资泛互联网和人工智能领域的创新企业。</p><p>百度一直在用AI思维看出行，围绕人和车，百度分别推出了对话式人工智能系统DuerOS、自动驾驶汽车平台Apollo和百度云，这也是百度人工智能商业化的重要部分。在百度的投资版图中，交通出行领域一直都深得百度青睐，百度投资了长沙智能驾驶研究院、VisualThreat、<a href="https://36kr.com/projectDetails/5263" target="_blank" rel="noopener">环宇智行</a>、Lunewave等出行领域相关的项目。百度在教育领域的投资也透露着AI思维，比如百思编程、<a href="https://36kr.com/projectDetails/123796" target="_blank" rel="noopener">海豚思维</a>和Snark AI等项目。</p><p>从市值走势来看，百度在智能驾驶和车联网方面拥有较大的想象空间。同比自动驾驶企业Waymo，它在上一轮融资估值就有 300 亿美金，这说<a href="https://36kr.com/projectDetails/78900" target="_blank" rel="noopener">明投</a>资者对这个领域非常看好。百度拥有全球领先的自动驾驶开放平台和国内领先的车联网，目前 60 车厂的400 款车型有搭载百度的系统，无论是技术还是市场影响力要超过了Waymo，体现在资本市场的估值方面，也应该会有比较大的想象空间。</p><p>在2018年的AI开发者大会上，来自全球的7000多位AI开发者和爱好者见证了百度在AI领域的发展：云端全功能AI芯片“昆仑”、百度大脑3.0、百度智能小程序、DuerOS 3.0开放平台、Apollo3.0开放平台、AR仿真等。由此可见，在百度一个全产业链高度开放的生态系统已然成型，市场也越来越成熟了。</p><p>在百度的财报中可能看到这种变化，基于AI业务的收入也增长迅速，从2017年的117亿增加到2019年的293亿人民币，增幅超过150%。2020年全球遭遇新冠肺炎疫情，导致百度的在线广告收入和去年同比下滑了19%，但以AI为主的其他业务收入则逆市增长了28%。此消彼长，相信不会超过几年，百度在AI领域的收入就会超过移动版图的收入，从而成为一个以AI为主导的公司。</p><h2 id="04、如何将技术优势转化为市场表现？"><a href="#04、如何将技术优势转化为市场表现？" class="headerlink" title="04、如何将技术优势转化为市场表现？"></a>04、如何将技术优势转化为市场表现？</h2><p>通过上面的分析我们可以看出，百度的在移动板块的业务布局完整，收入增长也相对稳健；在AI领域的技术积累有优势，所在赛道未来有很大的增长潜力。从2017年到现在，百度在研发方面的投入合计超过500亿人民币，在移动生态和AI领域的投资加起来的投资超过了300亿人民币。从财报来看，百度在AI领域的收入在快速增长，也证明战略方向上是正确的。</p><p>不过，要把技术优势转化为市场成果，要把研发投入和投资转化为财务数据，并最终在资本市场上体现为市值增长，百度还需要在组织、人才、运营、管理方面持续优化，确保战略能够落地。</p><p>根据<a href="https://36kr.com/projectDetails/442969" target="_blank" rel="noopener">罗伯特</a>·卡普兰和戴维·诺顿提出的战略地图模型，一家公司的长期股东价值最直接的原因是财务表现，包括说收入、利润、现金流和投资回报率等，但财务表现往往是由客户价值决定的，包括公司的产品、服务、品牌等。而支持客户价值的则是公司内部运营，包括创新、运营管理和客户管理。在这个基础下面，则是公司的人力资本和组织资本，以及企业的领导力、价值观和企业文化等。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_503efc82a5d34313aecd4f943b4f245b_img_000" alt="战略地图框架"></p><p>百度要面临的第一个挑战是在产品和运营方面的优化。业内流传这样一句话：百度的技术、腾讯的产品和阿里的运营。这句话未必非常精确，但确实也能反映一些问题，那就是百度骨子里是一家技术公司，在技术方面存在优势，但在产品和运营方面还存在诸多不足。相当长的时间里，百度的核心业务是搜索引擎，主要针对的客户是个人，这种商业模式决定了百度会把更多精力放在技术创新上，而不需要在产品打磨和运营方面花太多精力，久而久之也就塑造了百度的组织能力和企业文化。</p><p>现在百度的商业模式需要它在内容和AI方面发力。内容主要针对个人客户，对产品能力要求很高，这是腾讯比较强的地方；AI主要针对企业客户，对运营能力要求很高，这是阿里巴巴比较强的地方。百度在AI领域的专利数量比阿里巴巴和腾讯都要领先，但在AI领域的市场表现还没有完全迸发出来，也说明百度在产品和运营能力方面需要加强。如果百度要赢得竞争，就需要强化自己这两方面的组织能力。</p><p>组织能力背后是企业的人力资本。百度这些年增长乏力，给人的感觉还是百度对优秀人才的吸引力不够。我曾经听过百度内部管理者的解释，大意是技术人才对平台的依赖程度不如产品管理者和运营管理者，他们更容易跳槽到另一个平台，或者获得投资方的支持去创业。这个理由也能自圆其说，但也不能掩盖百度在人才吸引和激励方面的问题。比如陆奇和张亚勤都曾经做过微软的全球副总裁，到百度之后没有发挥期望中的价值，他们的离职处理得很体面，但还是让人感觉略有遗憾。</p><p>战略和组织相互影响，再好的战略如果没有和战略匹配的组织能力也很难落地，而组织能力的核心是高绩效的管理者。比如说，百度看到了O2O领域的巨大潜力，投以几百亿人民币，最后惨淡收场。从赛道选择来看，百度的战略判断并没有错，美团现在的成功证明了这一点。百度在糯米项目上的失败和缺乏相关领军人才有很大的关系，因为O2O对运营的要求非常高，如果没有这个领域的领军人才，再好的战略也无法落地。</p><p>说到领导梯队，还是忍不住要拿百度和阿里巴巴和腾讯对比。马云已经退休了，马化腾也很少露面，但这毫不影响他们业务的增长，一个很重要的原因就是这两家公司都有“良将如潮”的领导梯队，而这些领导人才大都是内部培养出来的，背后有一个完善的人才培养、选拔和激励机制。但在很长一段时间里，百度似乎更青睐外部的明星经理人，更愿意用高薪去吸引人才，而不太愿意培养和提拔内部管理者，导致百度内部的高潜人才出不来，久而久之就没有形成一个“良将如潮”的领导梯队。</p><p>总的来说，百度的战略上有很好的布局，而且在技术积累方面有一定的优势，但想要把技术优势转化为市场优势，就必须在组织能力和企业文化方面做出转变，这是百度要面临的挑战。</p><h2 id="05、百度正在开始新的长征"><a href="#05、百度正在开始新的长征" class="headerlink" title="05、百度正在开始新的长征"></a>05、百度正在开始新的长征</h2><p>好消息是，百度正在发生积极的变化。分析百度在2019年开始的变化，我们发现百度在组织构架、人才结构和企业文化方面都在做出大幅调整，这种调整产生的积极效果也开始初步显现出来。</p><p>2019年1月17日，李彦宏发全员邮件，发布百度的新愿景：“今天，我们把这样的思考、这样的认识明确为公司的愿景，那就是：成为最懂用户，并能帮助人们成长的全球顶级高科技公司。这是百度历史上首次发布愿景，这24个字将上承新使命、下展公司‘夯实移动基础、决胜AI时代’的整体战略，锚定百度在未来的新坐标——不仅是聚焦用户、成就他人的百度，也是立足全球、有所作为的百度！”</p><p>随后不久，百度开始了在组织构架和人才方面的大幅调整。2019年5月17日，百度发布2019年第一季度财报，财报显示其遭遇了上市以来的首个季度亏损，同时还宣布了百度高级副总裁、搜索公司总裁向海龙辞职的消息，以及将百度搜索公司已改组“移动生态事业群”（简称MEG）。向海龙作为百度核心业务的负责人，曾经一度被认为“最不可能动”的人。向海龙的离职是一个标志性事件，意味着百度开始大幅调整高管。</p><p>人事变动往往表明了公司在发展态度上的改变。2019年，通过密集的调兵遣将，百度形成了1（李彦宏）+15 （VP以上高管）的新决策层。根据<a href="https://36kr.com/projectDetails/29820" target="_blank" rel="noopener">猎云网</a>的梳理，这15位高管中有12名是新晋高管，其中5位来自内部晋升，3位元老回归，4位外部引进，这12个人都是75后-85后，平均在百度服务时间为8年。百度组建了近5年来最年轻的高管团队。</p><p>就在2019年5月17号李彦宏与百度MEG管理层的沟通会上，李彦宏还提出了三点新的要求：第一、确保公司彻底透明，必须说实话，必须信息透明，绝对不能欺上瞒下；第二、重新评估约定俗成的一些做法，找到新的机会，才有创新的空间，才能够比以前做得更好；第三、谁受益、谁推动，解决不了往上报。有些事情，靠一个人的力量完不成，别人又不同意你，那就把这件事情反馈到两个人的共同老板那里，让他来做这个决策，到底行还是不行。这三点要求说明百度在企业文化方面开始重点调整。</p><p>企业文化建设是HR部门的工作，但百度的企业文化历来比较弱，导致百度留不住人，变成“互联网黄埔军校”。为了改变企业文化，百度把曾经的创业元老崔珊珊请回来担任新的HR副总裁，她在2000年就加入百度，对百度很有感情，用百度内部人的话来说就是“一心就想让百度好”，由她来推动企业文化变革正合适。</p><p>在2019年7月11日百度公司的总监会上，负责HR的副总裁崔珊珊讲话的主题就是，“提升组织能力，开始新的长征。”，面对百度的核心管理层，崔珊珊直言不讳：“领军人物要为业绩负责，那些干得不好的、不好好做管理的、把业绩做差了的人，就要为差的业绩买单。”</p><p>曾经拯救过IBM的郭士纳认为，要让一家企业重新焕发活力，秘诀就是文化和绩效。用他的话来说，“公司文化不仅仅是游戏的一个方面——它就是游戏本身”，那么绩效其实就是游戏规则。为了更好地改变企业文化，百度也把公司的绩效考核方法快速从传统的KPI切换到OKR。</p><p>李彦宏曾在邮件里批评了公司的KPI文化：“如果你用一个简单的机械的KPI往下分解和传递，那么很可能到基层到一线员工的时候，他完全不理解我们为什么要干这个事儿。这个时候如果他心目当中想的不是用户体验，想的不是市场需求，想的是我怎么能够完成这个数，那这个公司真的是时间一长就完蛋了。”</p><p>这种KPI的绩效考核指标导致了公司内部上下上下信息不对称，主管和员工不能够正确地沟通，员工之间也都是各干各的，少有相互看齐；管理层为了让数据好看去玩小动作，而且让人才识别有问题。更严重的是，由于KPI过于强调公司业绩，不管实现路径是什么，是不是对用户体验、公司品牌有伤害，导致价值观严重变形。百度在过去发生过的一些危机，都或多或少和这种KPI导致的价值观变形有关。</p><p>百度到目前为止推行OKR已经一年多的时间了，最重要的作用就是落实了上下同心。OKR是横向和纵向都可见的，公司里每个人都知道李彦宏的OKR是什么，总监知道VP的OKR是什么，员工知道部门领导的OKR是什么，这样就能够让公司的战略目标层层嵌套，层层对齐，有利于提升效率，减少资源浪费。</p><h2 id="06、腾讯和微软转型给百度的启示"><a href="#06、腾讯和微软转型给百度的启示" class="headerlink" title="06、腾讯和微软转型给百度的启示"></a>06、腾讯和微软转型给百度的启示</h2><p>任何变化都需要一定的时间才能产生结果。现在判断百度转型是否成功还言之太早。但观察同类公司在经历过危机之后的转变，或许对百度的未来会有些启发。</p><p>第一个值得借鉴的公司是腾讯。之所以拿腾讯和百度相比，是因为腾讯也曾经历过严重的声誉危机。2010年的“3Q大战”，虽然当时腾讯赢了针对360的官司，但品牌形象也受到了严重伤害。腾讯的企业文化一度内向，他们把精力专注在用户和产品上，看到有什么产品流行就拿来模仿，然后利用自己的流量优势去碾压对手。同时由于腾讯和外部专家、媒体和同行都交流不多，外部对腾讯也充满了误读，导致市场口碑不太好。</p><p>2011年，腾讯组织了一批外部专家“诊断腾讯”，给腾讯提了很多尖锐的意见。在这种外部刺激之下，腾讯也开始变得更加开放起来。这种开放不只是企业文化的开放，在战略布局上也更加开放，不再像以前看到一个机会就去自己干，而是投资业内的优秀企业，通过为他们赋能来谋求共生。同时，腾讯开始组织结构调整，让组织更加匹配战略。在新的组织构架和企业文化下，腾讯孵化出了微信等现象级产品，并在2017年开始推出产业互联网。这一些系列战略布局和组织变革，也让腾讯的市值10年内增加了20多倍，成为一家生态级的企业。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_7b0e36d940d7420db1f1d1b722401634_img_000" alt="腾讯过去10年的股价变迁图（东方财富网）"></p><p>另一个值得借鉴的公司是微软。微软曾经是PC时代的王者，在互联网时代也布局很早，但似乎一直没有做得特别出色，也先后错过了收购雅虎、谷歌和facebook的机会，甚至有人说微软错过了互联网的竞争。当时微软的企业文化也比较糟糕，部门之间内斗得很厉害，公司内部士气低落，大量优秀人才纷纷离开。在这样的背景下，微软的收入止步不前，股价也一路下跌，市值一度跌破700亿美元。</p><p>幸运的是，微软看准了云计算的趋势，由于这一块的业务增长很快。负责云计算业务的萨提亚·纳德拉在2014年担任微软新任CEO。萨提亚·纳德拉担任微软CEO之后，开始“刷新”微软，不仅把微软的战略重心调整为云计算，而且在企业文化方面做了达到大刀阔斧的变革，让整个企业更得更加有执行力，也让微软创新焕发生机。伴随着这种变化的是，微软的股价在他上任之后上涨了超过6倍，并在2020年6月22日的市值达到1.52万亿美元，成为全球仅次于苹果公司的科技公司。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.36krcdn.com/20200624/v2_c9bfc4e75c174c6eaed12d75b58c6194_img_000" alt="微软过去10年的股价变迁图（东方财富网）"></p><p>从腾讯和微软的例子都可以看到：一家曾经遭遇危机、增长失速的企业依然可以重启增长，但前提是选准战略方向，汇聚优秀人才，刷新企业文化，增强组织能力。这是百度正在做的事情，我们无法预测百度未来的市值会不会也会迎来10倍以上的增长，但至少它又重新走在了正确的路上。</p><p>百度的未来在哪里？或许辛弃疾的这首词里蕴藏了答案：众里寻他<a href="https://36kr.com/projectDetails/187422" target="_blank" rel="noopener">千百度</a>，蓦然回首，那人却在，灯火阑珊处。灯火阑珊处，也是星辰大海。</p><p>参考资料：</p><p>潘乱：《百度正在刷新：四万人开始新长征》</p><p>财经：《百度推动全员绩效变革，李彦宏的OKR有哪些？》</p><p>中关村互动营销实验室：《2019年互联网广告发展报告》</p><p>凤凰网：《百度是否被低估？》</p><p>作者 | 陈雪频，<a href="https://36kr.com/projectDetails/29044" target="_blank" rel="noopener">智慧云</a>创始合伙人，多家高成长企业的战略顾问和总裁教练。</p><p>编辑 | 智慧云董事会，定位于”高成长企业的外部董事会”，致力于提升企业家领导力，助力企业高速成长。</p>]]></content>
      
      
      <categories>
          
          <category> 互联网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度 </tag>
            
            <tag> 科技 </tag>
            
            <tag> 企业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音频可视化：采样、频率和傅里叶变换（转）</title>
      <link href="/2021/08/25/yin-pin-ke-shi-hua-cai-yang-pin-lu-he-fu-li-xie-bian-huan/"/>
      <url>/2021/08/25/yin-pin-ke-shi-hua-cai-yang-pin-lu-he-fu-li-xie-bian-huan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>真是金子一样的文章！我觉得这一篇文章写的真是太有水平了！很感谢这样良心乐于分享的作者。  </p><p>本博客转载自<a href="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/" target="_blank" rel="noopener">cjting</a>, 如有侵权，请立刻联系博主<a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a>.</p></blockquote><h1 id="音频可视化：采样、频率和傅里叶变换"><a href="#音频可视化：采样、频率和傅里叶变换" class="headerlink" title="音频可视化：采样、频率和傅里叶变换"></a>音频可视化：采样、频率和傅里叶变换</h1><p>2021.08.07</p><p>[TOC]</p><p>印象中使用的第一个 PC 音乐播放器是「千千静听」，大概是 08 年左右。我还清楚地记得它自带了一首梁静茹的歌「Love is everything」，动听的旋律至今萦绕耳旁。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/qianqian.jpeg" alt="img"></p><p>千千静听的左上角有一组随着音乐跳动的柱子，我想大家都习以为常了，很多播放器都有这功能。但是其实有没有想过，这是怎么实现的？</p><p>要理解这个问题，我们首先要理解声音是什么。</p><h2 id="波"><a href="#波" class="headerlink" title="波"></a>波</h2><p>中学物理有介绍过，声音是由物体振动产生的，这个振动经由介质传导到我们的耳朵中引起耳膜振动从而让我们听见声音。</p><p>我们可以用波形来描述振动，其中横轴是时间，纵轴是振动的位移，也就是离开原点的距离。</p><p>振动的两个关键属性是频率和振幅，频率是指一秒钟振动多少次，对应于音高，频率越高声音越尖锐刺耳。</p><p>振幅则表示最大的位移值，对应于音量，振幅越大声音越响。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/200hz.png" alt="img"></p><p>上图是用 <a href="https://matplotlib.org/" target="_blank" rel="noopener">matplot</a> 绘制的一个正弦波，可以看出在 0.01s 内振动了 2 次，因此频率是 200，振幅是 1。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">sin_wave</span><span class="token punctuation">(</span>hz<span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">*</span> hz <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Time"</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>sin_wave<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种最简单的波形对应的声音叫做 pure tone，顾名思义，非常的简单而且纯粹。</p><p>下面是用 <a href="https://www.scipy.org/" target="_blank" rel="noopener">scipy</a> 生成的 200hz 的声音，大家可以听听看。</p><p><audio controls style="width: 680px; margin: 16px 0px;"></audio></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token punctuation">.</span>io<span class="token punctuation">.</span>wavfile <span class="token keyword">as</span> wavSAMPLE_RATE <span class="token operator">=</span> <span class="token number">44100</span>DURATION <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">write_wav</span><span class="token punctuation">(</span>hz<span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> DURATION<span class="token punctuation">,</span> SAMPLE_RATE <span class="token operator">*</span> DURATION<span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  tone <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">*</span> hz <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>  normalized_tone <span class="token operator">=</span> np<span class="token punctuation">.</span>int16<span class="token punctuation">(</span><span class="token punctuation">(</span>tone <span class="token operator">/</span> tone<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">32767</span><span class="token punctuation">)</span>  wav<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token string">"{hz}hz.wav"</span><span class="token punctuation">,</span> SAMPLE_RATE<span class="token punctuation">,</span> normalized_tone<span class="token punctuation">)</span>write_wav<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是 800hz 的声音，可以明显感觉到，声音更加尖锐了。</p><p><audio controls style="width: 680px; margin: 16px 0px;"></audio></p><p>现实世界中我们听到的声音不会是 pure tone，而是各种 pure tone 叠加的结果。</p><p>下图中蓝色是 200hz，黄色是 800hz，而绿色则是它们叠加的结果，已经不再是一个 pure tone 了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/200-add-800hz.png" alt="img"></p><p>下面是绿色曲线听起来的效果。</p><p><audio controls style="width: 680px; margin: 16px 0px;"></audio></p><p>总结一下：</p><ul><li>我们可以用一个波形图来表示声音，其中 X 轴是时间，Y 轴是振动的位移</li><li>最简单的正弦波对应的声音叫做 pure tone</li><li>日常中我们听到的声音都是各种 pure tone 叠加的结果</li></ul><p>Tip:</p><p>如果想了解一点乐理，<a href="https://www.lightnote.co/music-theory/sound-waves" target="_blank" rel="noopener">LITENOTE</a> 非常不错。</p><p>它的网页做得很棒，通过互动的形式讲述基本的乐理知识，包括音阶、和弦，十二平均律等。</p><h2 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h2><p>因为声音是一个随时间变化的连续函数，任意一段间隔内都有无穷多个值，而无穷多的数据是没办法存储在计算机中的。</p><p>想要存储，我们就需要将它离散化变成离散序列，具体的方法就是采样，使用固定的间隔对函数进行求值。</p><p>这是原始的声音。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/origin.png" alt="img"></p><p>这是采样后的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/sampled.png" alt="img"></p><p>通过采样，我们将一个无尽序列变成了一个有限序列，其中每一个值叫做样本，这样就可以方便地在计算机中存储了。</p><p>采样的关键参数有两个，分别是采样频率和采样深度。</p><p>采样频率是指每秒钟采样多少次，很明显，采样频率越高，样本越多，数据量越大，同时也更接近原始的声音。</p><p>采样深度是指用多少比特去存储采样得到的值，使用的比特越多，还原得到的声音越细腻，和图片的色彩深度是一个道理。</p><p>假设我们用 16bit 采样深度和 44100 的采样频率，那么一段一秒钟的声音就变成了一个 44100 大小的 int16 数组。</p><p>得到采样值数组以后，接下来如何存储这个数组就是编码的范畴了。我们可以直接存，也可以采用某种算法压缩以后再存。各种各样的办法，对应着各种各样的音频格式，比如 MP3, AAC, WAV 等。</p><p>这其中 AAC 和 MP3 格式是有损的，也就是存储以后再读出来，得到的样本和原始的会有一些区别，但这些区别很细微，可以忽略。有损的特点就是在基本不影响最终播放效果的情况下，大幅度减少文件体积。</p><p>而 WAV 则是无损的，输入是什么，读出来就是什么，缺点自然是体积要大很多。</p><p>我们可以通过 scipy 来读取 WAV 音频。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token punctuation">.</span>io<span class="token punctuation">.</span>wavfile <span class="token keyword">as</span> wavrate<span class="token punctuation">,</span> all_samples <span class="token operator">=</span> wav<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"xxx.wav"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rate<span class="token punctuation">,</span> len<span class="token punctuation">(</span>all_samples<span class="token punctuation">)</span><span class="token punctuation">,</span> all_samples<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 44100 10639873 int16</span><span class="token comment" spellcheck="true"># 上面分别是：采样率，样本总数，以及样本值的类型</span><span class="token comment" spellcheck="true"># int16 说明每一个样本是 16bit 整数</span><span class="token keyword">print</span><span class="token punctuation">(</span>all_samples<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [-41 -51 -49 -41 -28 -15 -20 -33 -32 -38 -54 -54 -44 -30  -8  10  11   2</span><span class="token comment" spellcheck="true"># -14 -36]</span><span class="token comment" spellcheck="true"># 可以看到样本就是一组数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，采样频率是 44100，一共有 10639873 个样本，使用 int16 进行存储，计算可知这首歌的时间是 241 秒。</p><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><p>给定一个 200hz 的波形和一个 800hz 的波形，计算它们叠加以后的结果非常简单，没有任何难度。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/200-add-800hz.png" alt="img"></p><p>但是，如果给到叠加以后的结果呢？</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/mixed.png" alt="img"></p><p>能看出上面的绿色曲线是 200hz+800hz 叠加得到的吗？完全看不出来，甚至，这样的逆推真的可行吗？还是说和永动机一样在原理上就是不可行的？</p><p>答案是可行的，通过傅里叶变换，我们可以将一个复合波形拆解为构成它的简单波形。</p><p>想想都觉得不可思议，这是怎么做到的？傅里叶又是怎么想到的？不得不说十八世纪的法国数学家傅里叶是一个天才，让人仰望。</p><p>Tip: 3Blue1Brown 有一个视频介绍傅里叶变换的原理，非常棒：<a href="https://www.youtube.com/watch?v=spUNpyF58BY" target="_blank" rel="noopener">形象的介绍：什么是傅里叶变换？</a></p><p>接下来我们来看看怎样通过傅里叶变换来拆解复合波形。</p><p>我们可以认为傅里叶变换是一个函数，它的输入为 N 个实数，代表采样值，输出为 N 个复数，代表不同频率的分量，这里我们忽略复数的实部和虚部，只关心它的模，也就是绝对值。</p><p>Tip: 这里关于傅里叶变换的说法并不完整，比如傅里叶变换的输入也可以是复数。但是对我们来说理解到这一层面就够了。如果想要深入研究，可以去学习数字信号处理相关的课程。</p><p>我们使用 scipy 来实际进行一下傅里叶变换。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>fft <span class="token keyword">import</span> fft<span class="token punctuation">,</span> fftfreq<span class="token comment" spellcheck="true"># 这是即将进行变换的采样值: [0, 1, 2, 3, 4, 5, 6, 7]</span>samples <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这是傅里叶变换的结果</span>y <span class="token operator">=</span> fft<span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 变换结果为 8 个复数</span><span class="token comment" spellcheck="true"># (28-0j)</span><span class="token comment" spellcheck="true"># (-3.9999999999999996+9.65685424949238j)</span><span class="token comment" spellcheck="true"># (-4+4j)</span><span class="token comment" spellcheck="true"># (-4+1.6568542494923797j)</span><span class="token comment" spellcheck="true"># (-4-0j)</span><span class="token comment" spellcheck="true"># (-4-1.6568542494923797j)</span><span class="token comment" spellcheck="true"># (-4-4j)</span><span class="token comment" spellcheck="true"># (-3.9999999999999996-9.65685424949238j)</span><span class="token comment" spellcheck="true"># x 是上面每个结果对应的频率</span><span class="token comment" spellcheck="true"># 这里 fftfreq 函数的第一个参数为样本数量</span><span class="token comment" spellcheck="true"># 第二个参数为 采样率的 倒数，我们假定采样率为 8</span>x <span class="token operator">=</span> fftfreq<span class="token punctuation">(</span>len<span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [ 0.  1.  2.  3. -4. -3. -2. -1.]</span><span class="token comment" spellcheck="true"># 这里意味着 y[0] 对应的频率是 0，y[1] 对应的频率是 1</span><span class="token comment" spellcheck="true"># 负数频率是什么含义？我们可以不管，忽略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码我们构造了 8 个数字进行傅里叶变换，并假定这组样本是使用采样率 8 进行采样得到的。</p><p>变换的结果是 8 个复数，这 8 个复数对应 8 个频率，我们可以看出，正频率和负频率对应的变换结果是一样的，也就是变换后的结果是对称的。</p><p>上面得到的结果意义不大，因为输入没什么意义。现在我们使用傅里叶变换处理一下 200hz+800hz 叠加后的波形，看看是否能还原回 200hz 和 800hz。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">import</span> figure<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>fft <span class="token keyword">import</span> fft<span class="token punctuation">,</span> fftfreqfigure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>DURATION <span class="token operator">=</span> <span class="token number">0.01</span>SAMPLE_RATE <span class="token operator">=</span> <span class="token number">44100</span><span class="token keyword">def</span> <span class="token function">gen_sine_wave</span><span class="token punctuation">(</span>freq<span class="token punctuation">)</span><span class="token punctuation">:</span>  x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> DURATION<span class="token punctuation">,</span> int<span class="token punctuation">(</span>DURATION <span class="token operator">*</span> SAMPLE_RATE<span class="token punctuation">)</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x <span class="token operator">*</span> freq <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>  <span class="token keyword">return</span> yhz200 <span class="token operator">=</span> gen_sine_wave<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>hz800 <span class="token operator">=</span> gen_sine_wave<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 叠加后的采样数据</span><span class="token comment" spellcheck="true"># 这里每个样本不是 int16，而是 float，无关紧要</span>total <span class="token operator">=</span> hz200 <span class="token operator">+</span> hz800y <span class="token operator">=</span> fft<span class="token punctuation">(</span>total<span class="token punctuation">)</span>x <span class="token operator">=</span> fftfreq<span class="token punctuation">(</span>len<span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> SAMPLE_RATE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 此时横轴是频率，纵轴是该频率的分量</span><span class="token comment" spellcheck="true"># 使用 np.abs 计算复数的模</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图中我们可以看出，首先输出结果是左右对称的，我们忽略掉负频率部分，只关注正频率。</p><p>其次，傅里叶变换告诉我们该输入信号由 2 个频率组成，程序运行时鼠标放上去可以看出是 200 和 800。也就是说，通过傅里叶变换，我们将复合波形拆解为了简单波形。</p><p>或者说，通过傅里叶变换，我们将一个信号拆解为了一组不同频率的正弦波，将它从时域变换到了频域。信号还是这个信号，只不过换个角度去看它。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cjting.me/2021/08/07/fourier-transform-and-audio-visualization/transform.png" alt="img"></p><p>总结一下：</p><ul><li>傅里叶变换是一个函数，输入一串数字代表样本值，输出一串复数代表频率分量</li><li>每个数字具体代表的频率可以根据样本数量和采样频率计算得知</li><li>我们不关心复数的方向，我们只关心复数的模</li><li>傅里叶输出的结果是左右对称的，因此只有一半的信息有价值</li></ul><p>因为输出结果是对称的，只有一半的信息有价值，因此有一个变体叫做 <code>rfft</code>，只返回一半的信息，计算速度可以更快一些。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>fft <span class="token keyword">import</span> rfft<span class="token punctuation">,</span> rfftfreqSAMPLE_RATE <span class="token operator">=</span> <span class="token number">8</span>samples <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 此时 x 和 y 都是 5 个值</span>y <span class="token operator">=</span> rfft<span class="token punctuation">(</span>samples<span class="token punctuation">)</span>x <span class="token operator">=</span> rfftfreq<span class="token punctuation">(</span>len<span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> SAMPLE_RATE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># y[0] 表示频率 0 的分量</span><span class="token comment" spellcheck="true"># y[1] 表示频率 1 的分量</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0. 1. 2. 3. 4.]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 和之前 fft/fftfreq 的输出对比，可以发现结果是一样的，只不过去掉了对称的冗余信息</span><span class="token comment" spellcheck="true"># (28+0j)</span><span class="token comment" spellcheck="true"># (-3.9999999999999996+9.65685424949238j)</span><span class="token comment" spellcheck="true"># (-4+4j)</span><span class="token comment" spellcheck="true"># (-4+1.6568542494923797j)</span><span class="token comment" spellcheck="true"># (-4+0j)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="音频可视化"><a href="#音频可视化" class="headerlink" title="音频可视化"></a>音频可视化</h2><p>到了这里所有实现音频可视化所需要的知识都备齐了。</p><p>首先我们可以猜到，随音乐跳动的每个柱子，对应的是一个频率或一组频率，而柱子的高度则是频率的分量大小，这两个信息傅里叶变换都能给到。</p><p>现在剩下的问题则是输入是什么？我们不可能把一首歌曲的所有样本作为输入进行傅里叶变换，如果这样做，我们只能得到一份频率数据。</p><p>我们希望得到的频率数据随着音乐在变化，因此这里要选择一个窗口大小（FFT_SIZE），比如 2048。随着音乐的播放，我们每次都从当前播放位置选择 2048 个样本然后进行傅里叶变换。</p><p>现在我们的初步音频可视化方案就确定了：</p><ul><li>解析音频文件得到 allSamples</li><li>每次绘图时，从当前 sample 开始选择 FFT_SIZE 个 sample</li><li>对这些 sample 进行傅里叶变换</li><li>对变换得到的复数求模</li><li>把结果变换到 0 ~ 1 然后绘图</li></ul><p>接下来我们用 Web 来实现一个简单的音频可视化工具。</p><p>首先，解析音频文件得到 allSamples 我们可以使用 WebAudio 的 API。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 得到某个音频文件的二进制数据</span><span class="token keyword">const</span> ab <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"xxx.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 新建 WebAudio context</span><span class="token keyword">const</span> audioCtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AudioContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 解析 arrayBuffer</span><span class="token keyword">const</span> audioBuffer <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span><span class="token function">decodeAudioData</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>audioBuffer<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// AudioBuffer {length: 10639872, duration: 241.2669387755102, sampleRate: 44100, numberOfChannels: 2}</span><span class="token comment" spellcheck="true">//  duration: 241.2669387755102</span><span class="token comment" spellcheck="true">//  length: 10639872</span><span class="token comment" spellcheck="true">//  numberOfChannels: 2</span><span class="token comment" spellcheck="true">//  sampleRate: 44100</span><span class="token comment" spellcheck="true">// [[Prototype]]: AudioBuffer</span><span class="token comment" spellcheck="true">// 一般来说音频都有多个声道，用于立体声播放</span><span class="token comment" spellcheck="true">// 这里我们选第一个声道就可以了</span><span class="token keyword">const</span> allSamples <span class="token operator">=</span> audioBuffer<span class="token punctuation">.</span><span class="token function">getChannelData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// allSamples 就是我们要的样本数组，每一个样本值是浮点数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allSamples<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Float32Array(10) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我们使用 <code>requestAnimationFrame</code> 来进行绘制。</p><p>每次绘制的时候，需要先获取当前的播放位置。audioBuffer 中有音频的总时间，通过 <code>audioCtx.currentTime</code> 我们可以得知当前的播放时间，两个相除便是播放位置。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 用户点击播放时</span><span class="token keyword">const</span> onPlay <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 记录下播放的开始时间</span>  <span class="token keyword">const</span> startTime <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span>currentTime  <span class="token keyword">const</span> draw <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 目前播放了多少时间 (seconds)</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> audioCtx<span class="token punctuation">.</span>currentTime <span class="token operator">-</span> startTime    <span class="token comment" spellcheck="true">// 播放的进度是多少</span>    <span class="token keyword">const</span> per <span class="token operator">=</span> cur <span class="token operator">/</span> audioBuffer<span class="token punctuation">.</span>duration    <span class="token keyword">const</span> startIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>allSamples<span class="token punctuation">.</span>length <span class="token operator">*</span> per<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 从 startIndex 开始切割 FFT_SIZE 个 sample 出来</span>    <span class="token comment" spellcheck="true">// 此时要进行傅里叶变换的 samples 就准备好了</span>    <span class="token keyword">const</span> samples <span class="token operator">=</span> allSamples<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> startIndex <span class="token operator">+</span> FFT_SIZE<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是傅里叶变换了，这里我找了一下，JS 相关的库很少，不过验证下来 <a href="https://github.com/indutny/fft.js/" target="_blank" rel="noopener">fft.js</a> 是可用的。</p><p>Tip: 不得不说科学计算还是 Python 方便，numpy 和 scipy 真的太好用了。</p><p>经过 FFT 以后，我们得到了 1025 个复数，对这些复数取模，得到 1025 个实数。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// JS 没有复数，我们自行定义一个</span><span class="token keyword">class</span> <span class="token class-name">Complex</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>real<span class="token punctuation">,</span> imag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> real    <span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">=</span> imag  <span class="token punctuation">}</span>  <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imag<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> rfft <span class="token operator">=</span> <span class="token punctuation">(</span>samples<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FFTJS</span><span class="token punctuation">(</span>samples<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token keyword">const</span> out <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">createComplexArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> N <span class="token operator">=</span> samples<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>  f<span class="token punctuation">.</span><span class="token function">realTransform</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> samples<span class="token punctuation">)</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span>out<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 此时我们得到了一组实数</span><span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">rfft</span><span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tip:</p><p>其实这里还有一个过程，我们不会直接把 samples 进行 FFT 变换，而是会先应用一个 Window Function，这样做的目的如果感兴趣可以自行了解。</p><p>对于我们来说，Window Function 就是一个 <code>number[] -&gt; number[]</code> 的函数。</p><p>接下来就是将这些数字变换到 0 ~ 1 区间，这一步比较简单，观察一下最大最小值做个线性变换就行了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> y<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">80</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有了一组 0 ~ 1 的数字以后，我们就可以使用 Canvas 进行绘图了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> W <span class="token operator">=</span> <span class="token number">800</span> <span class="token comment" spellcheck="true">// canvas width</span><span class="token keyword">const</span> H <span class="token operator">=</span> <span class="token number">600</span> <span class="token comment" spellcheck="true">// canvas height</span><span class="token keyword">const</span> draw <span class="token operator">=</span> <span class="token punctuation">(</span>spectrum<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> W<span class="token punctuation">,</span> H<span class="token punctuation">)</span>  <span class="token keyword">const</span> barWidth <span class="token operator">=</span> W <span class="token operator">/</span> spectrum<span class="token punctuation">.</span>length  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> spectrum<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> v <span class="token operator">=</span> spectrum<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">const</span> x <span class="token operator">=</span> i <span class="token operator">*</span> barWidth    <span class="token keyword">const</span> height <span class="token operator">=</span> v <span class="token operator">*</span> H    <span class="token keyword">const</span> y <span class="token operator">=</span> H <span class="token operator">-</span> height    ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> barWidth<span class="token punctuation">,</span> height<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们来看看结果，打开 <a href="http://cjting.me/audio-vis-demo/" target="_blank" rel="noopener">audio-vis-demo</a>，选择一个音频文件，取消勾选 “Smooth”，点击播放，然后我们会发现，柱子可以正常地绘制出来，但是它们”跳跃“得非常厉害，不够平稳。</p><p>这是因为我们漏了一步，叫做 Time smoothing。</p><p>具体的机理我并不理解，所以就不再说明了，对我们的目标来说，这部分当做黑盒处理就可以了。</p><p>这里我想说明一下，在我看来，学习任何知识都是分层的，学到自己感兴趣的层级即可，对下一层有一个定性的认识，需要的时候可以再去细究。</p><p>我们可以认为 Time smoothing 就是对当前的 result 和上一个 result 进行某种操作，然后输出一组值。</p><p>下面是具体的算法，代码非常简单，但是效果非常明显。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> smoothConstantDown <span class="token operator">=</span> <span class="token number">0.08</span><span class="token keyword">const</span> smoothConstantUp <span class="token operator">=</span> <span class="token number">0.8</span><span class="token keyword">if</span><span class="token punctuation">(</span>lastY <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lastY<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lastY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      lastY<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> smoothConstantDown <span class="token operator">+</span> lastY<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> smoothConstantDown<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      lastY<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> smoothConstantUp <span class="token operator">+</span> lastY<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> smoothConstantUp<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  lastY <span class="token operator">=</span> y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在 Demo 中勾选上 “Smooth” 启用这个算法，然后就会发现图像马上变得不再跳动了，整体结果已经和其他播放器很接近了。</p><p>注意，这里我们是为了学习底层的步骤和细节，所以很多操作都自己来做。如果真的需要开发相关功能，使用 WebAudio 的 API 是更合理的选择。</p><p>我在 <a href="http://cjting.me/audio-vis-demo/" target="_blank" rel="noopener">audio-vis-demo</a> 中也基于 WebAudio 的 API 进行了实现，主要是为了对比和参考。</p><p>到这里，我们完整地实现了从一组数字到可视化图形的全过程，深切地感受到了数学的魅力。这里的编码一点也不难，难的，或者是让人赞叹的，是背后的数学，人类智慧皇冠上最灿烂的明珠。</p>]]></content>
      
      
      <categories>
          
          <category> 数码知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数码 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 音频 </tag>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch Cookbook(常用代码段)</title>
      <link href="/2021/08/25/pytorch-cookbook-chang-yong-dai-ma-duan/"/>
      <url>/2021/08/25/pytorch-cookbook-chang-yong-dai-ma-duan/</url>
      
        <content type="html"><![CDATA[<h3 id="PyTorch常用代码段整理合集"><a href="#PyTorch常用代码段整理合集" class="headerlink" title="PyTorch常用代码段整理合集"></a>PyTorch常用代码段整理合集</h3><p> <a href="https://www.ctolib.com/user/pe-12647.html" target="_blank" rel="noopener">HudsonEvangeline</a> </p><p>本文代码基于 PyTorch 1.0 版本，需要用到以下包</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> collections<span class="token keyword">import</span> os<span class="token keyword">import</span> shutil<span class="token keyword">import</span> tqdm<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> PIL<span class="token punctuation">.</span>Image<span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基础配置</p><p>检查 PyTorch 版本</p><pre class="line-numbers language-python"><code class="language-python">torch<span class="token punctuation">.</span>__version__               <span class="token comment" spellcheck="true"># PyTorch version</span>torch<span class="token punctuation">.</span>version<span class="token punctuation">.</span>cuda              <span class="token comment" spellcheck="true"># Corresponding CUDA version</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Corresponding cuDNN version</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>get_device_name<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># GPU type</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更新 PyTorch</p><p>PyTorch 将被安装在 anaconda3/lib/python3.7/site-packages/torch/目录下。</p><pre class="line-numbers language-python"><code class="language-python">conda update pytorch torchvision <span class="token operator">-</span>c pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>固定随机种子</p><pre class="line-numbers language-python"><code class="language-python">torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指定程序运行在特定 GPU 卡上</p><p>在命令行指定环境变量</p><pre class="line-numbers language-python"><code class="language-python">CUDA_VISIBLE_DEVICES<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> python train<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或在代码中指定</p><pre class="line-numbers language-python"><code class="language-python">os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'CUDA_VISIBLE_DEVICES'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0,1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断是否有 CUDA 支持</p><pre class="line-numbers language-python"><code class="language-python">torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置为 cuDNN benchmark 模式</p><p>Benchmark 模式会提升计算速度，但是由于计算中有随机性，每次网络前馈结果略有差异。</p><pre class="line-numbers language-python"><code class="language-python">torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要避免这种结果波动，设置</p><pre class="line-numbers language-python"><code class="language-python">torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清除 GPU 存储</p><p>有时 Control-C 中止运行后 GPU 存储没有及时释放，需要手动清空。在 PyTorch 内部可以</p><pre class="line-numbers language-python"><code class="language-python">torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>empty_cache<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或在命令行可以先使用 ps 找到程序的 PID，再使用 kill 结束该进程</p><pre class="line-numbers language-python"><code class="language-python">ps aux <span class="token operator">|</span> grep pythonkill <span class="token operator">-</span><span class="token number">9</span> <span class="token punctuation">[</span>pid<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者直接重置没有被清空的 GPU</p><pre class="line-numbers language-python"><code class="language-python">nvidia<span class="token operator">-</span>smi <span class="token operator">-</span><span class="token operator">-</span>gpu<span class="token operator">-</span>reset <span class="token operator">-</span>i <span class="token punctuation">[</span>gpu_id<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>张量处理</p><p>张量基本信息</p><pre><code>tensor.type()   # Data typetensor.size()   # Shape of the tensor. It is a subclass of Python tupletensor.dim()    # Number of dimensions.</code></pre><p>数据类型转换</p><pre><code># Set default tensor type. Float in PyTorch is much faster than double.torch.set_default_tensor_type(torch.FloatTensor)# Type convertions.tensor = tensor.cuda()tensor = tensor.cpu()tensor = tensor.float()tensor = tensor.long()</code></pre><p>torch.Tensor 与 np.ndarray 转换</p><pre><code># torch.Tensor -&gt; np.ndarray.ndarray = tensor.cpu().numpy()# np.ndarray -&gt; torch.Tensor.tensor = torch.from_numpy(ndarray).float()tensor = torch.from_numpy(ndarray.copy()).float()  # If ndarray has negative stride</code></pre><p>torch.Tensor 与 PIL.Image 转换</p><p>PyTorch 中的张量默认采用 N×D×H×W 的顺序，并且数据范围在 [0, 1]，需要进行转置和规范化。</p><pre><code># torch.Tensor -&gt; PIL.Image.image = PIL.Image.fromarray(torch.clamp(tensor * 255, min=0, max=255    ).byte().permute(1, 2, 0).cpu().numpy())image = torchvision.transforms.functional.to_pil_image(tensor)  # Equivalently way# PIL.Image -&gt; torch.Tensor.tensor = torch.from_numpy(np.asarray(PIL.Image.open(path))    ).permute(2, 0, 1).float() / 255tensor = torchvision.transforms.functional.to_tensor(PIL.Image.open(path))  # Equivalently way</code></pre><p>np.ndarray 与 PIL.Image 转换</p><pre><code># np.ndarray -&gt; PIL.Image.image = PIL.Image.fromarray(ndarray.astypde(np.uint8))# PIL.Image -&gt; np.ndarray.ndarray = np.asarray(PIL.Image.open(path))</code></pre><p>从只包含一个元素的张量中提取值</p><p>这在训练时统计 loss 的变化过程中特别有用。否则这将累积计算图，使 GPU 存储占用量越来越大。</p><pre><code>value = tensor.item()</code></pre><p>张量形变</p><p>张量形变常常需要用于将卷积层特征输入全连接层的情形。相比 torch.view，torch.reshape 可以自动处理输入张量不连续的情况。</p><pre><code>tensor = torch.reshape(tensor, shape)</code></pre><p>打乱顺序</p><pre><code>tensor = tensor[torch.randperm(tensor.size(0))]  # Shuffle the first dimension</code></pre><p>水平翻转</p><p>PyTorch 不支持 tensor[::-1] 这样的负步长操作，水平翻转可以用张量索引实现。</p><pre><code># Assume tensor has shape N*D*H*W.tensor = tensor[:, :, :, torch.arange(tensor.size(3) - 1, -1, -1).long()]</code></pre><p>复制张量</p><p>有三种复制的方式，对应不同的需求。</p><pre><code># Operation                 |  New/Shared memory | Still in computation graph |tensor.clone()            # |        New         |          Yes               |tensor.detach()           # |      Shared        |          No                |tensor.detach.clone()()   # |        New         |          No                |</code></pre><p>拼接张量</p><p>注意 torch.cat 和 torch.stack 的区别在于 torch.cat 沿着给定的维度拼接，而 torch.stack 会新增一维。例如当参数是 3 个 10×5 的张量，torch.cat 的结果是 30×5 的张量，而 torch.stack 的结果是 3×10×5 的张量。</p><pre><code>tensor = torch.cat(list_of_tensors, dim=0)tensor = torch.stack(list_of_tensors, dim=0)</code></pre><p>将整数标记转换成独热（one-hot）编码</p><p>PyTorch 中的标记默认从 0 开始。</p><pre><code>N = tensor.size(0)one_hot = torch.zeros(N, num_classes).long()one_hot.scatter_(dim=1, index=torch.unsqueeze(tensor, dim=1), src=torch.ones(N, num_classes).long())</code></pre><p>得到非零/零元素</p><pre><code>torch.nonzero(tensor)               # Index of non-zero elementstorch.nonzero(tensor == 0)          # Index of zero elementstorch.nonzero(tensor).size(0)       # Number of non-zero elementstorch.nonzero(tensor == 0).size(0)  # Number of zero elements</code></pre><p>张量扩展</p><pre><code># Expand tensor of shape 64*512 to shape 64*512*7*7.torch.reshape(tensor, (64, 512, 1, 1)).expand(64, 512, 7, 7)</code></pre><p>矩阵乘法</p><pre><code># Matrix multiplication: (m*n) * (n*p) -&gt; (m*p).result = torch.mm(tensor1, tensor2)# Batch matrix multiplication: (b*m*n) * (b*n*p) -&gt; (b*m*p).result = torch.bmm(tensor1, tensor2)# Element-wise multiplication.result = tensor1 * tensor2</code></pre><p>计算两组数据之间的两两欧式距离</p><pre><code># X1 is of shape m*d.X1 = torch.unsqueeze(X1, dim=1).expand(m, n, d)# X2 is of shape n*d.X2 = torch.unsqueeze(X2, dim=0).expand(m, n, d)# dist is of shape m*n, where dist[i][j] = sqrt(|X1[i, :] - X[j, :]|^2)dist = torch.sqrt(torch.sum((X1 - X2) ** 2, dim=2))</code></pre><p>模型定义</p><p>卷积层</p><p>最常用的卷积层配置是</p><pre><code>conv = torch.nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=True)conv = torch.nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, padding=0, bias=True)</code></pre><p>如果卷积层配置比较复杂，不方便计算输出大小时，可以利用如下可视化工具辅助</p><p>链接：<a href="https://ezyang.github.io/convolution-visualizer/index.html" target="_blank" rel="noopener">https://ezyang.github.io/convolution-visualizer/index.html</a></p><p>0GAP（Global average pooling）层</p><pre><code>gap = torch.nn.AdaptiveAvgPool2d(output_size=1)</code></pre><p>双线性汇合（bilinear pooling）</p><pre><code>X = torch.reshape(N, D, H * W)                        # Assume X has shape N*D*H*WX = torch.bmm(X, torch.transpose(X, 1, 2)) / (H * W)  # Bilinear poolingassert X.size() == (N, D, D)X = torch.reshape(X, (N, D * D))X = torch.sign(X) * torch.sqrt(torch.abs(X) + 1e-5)   # Signed-sqrt normalizationX = torch.nn.functional.normalize(X)                  # L2 normalization</code></pre><p>多卡同步 BN（Batch normalization）</p><p>当使用 torch.nn.DataParallel 将代码运行在多张 GPU 卡上时，PyTorch 的 BN 层默认操作是各卡上数据独立地计算均值和标准差，同步 BN 使用所有卡上的数据一起计算 BN 层的均值和标准差，缓解了当批量大小（batch size）比较小时对均值和标准差估计不准的情况，是在目标检测等任务中一个有效的提升性能的技巧。</p><p>链接：<a href="https://github.com/vacancy/Synchronized-BatchNorm-PyTorch" target="_blank" rel="noopener">https://github.com/vacancy/Synchronized-BatchNorm-PyTorch</a></p><p>类似 BN 滑动平均</p><p>如果要实现类似 BN 滑动平均的操作，在 forward 函数中要使用原地（inplace）操作给滑动平均赋值。</p><pre><code>class BN(torch.nn.Module)    def __init__(self):        ...        self.register_buffer(&#39;running_mean&#39;, torch.zeros(num_features))    def forward(self, X):        ...        self.running_mean += momentum * (current - self.running_mean)</code></pre><p>计算模型整体参数量</p><pre><code>num_parameters = sum(torch.numel(parameter) for parameter in model.parameters())</code></pre><p>类似 Keras 的 model.summary() 输出模型信息</p><p>链接：<a href="https://github.com/sksq96/pytorch-summary" target="_blank" rel="noopener">https://github.com/sksq96/pytorch-summary</a></p><p>模型权值初始化</p><p>注意 model.modules() 和 model.children() 的区别：model.modules() 会迭代地遍历模型的所有子层，而 model.children() 只会遍历模型下的一层。</p><pre><code># Common practise for initialization.for layer in model.modules():    if isinstance(layer, torch.nn.Conv2d):        torch.nn.init.kaiming_normal_(layer.weight, mode=&#39;fan_out&#39;,                                      nonlinearity=&#39;relu&#39;)        if layer.bias is not None:            torch.nn.init.constant_(layer.bias, val=0.0)    elif isinstance(layer, torch.nn.BatchNorm2d):        torch.nn.init.constant_(layer.weight, val=1.0)        torch.nn.init.constant_(layer.bias, val=0.0)    elif isinstance(layer, torch.nn.Linear):        torch.nn.init.xavier_normal_(layer.weight)        if layer.bias is not None:            torch.nn.init.constant_(layer.bias, val=0.0)# Initialization with given tensor.layer.weight = torch.nn.Parameter(tensor)</code></pre><p>部分层使用预训练模型</p><p>注意如果保存的模型是 torch.nn.DataParallel，则当前的模型也需要是</p><pre><code>model.load_state_dict(torch.load(&#39;model,pth&#39;), strict=False)</code></pre><p>将在 GPU 保存的模型加载到 CPU</p><pre><code>model.load_state_dict(torch.load(&#39;model,pth&#39;, map_location=&#39;cpu&#39;))</code></pre><p>数据准备、特征提取与微调</p><p>得到视频数据基本信息</p><pre><code>import cv2video = cv2.VideoCapture(mp4_path)height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))num_frames = int(video.get(cv2.CAP_PROP_FRAME_COUNT))fps = int(video.get(cv2.CAP_PROP_FPS))video.release()</code></pre><p>TSN 每段（segment）采样一帧视频</p><pre><code>K = self._num_segmentsif is_train:    if num_frames &gt; K:        # Random index for each segment.        frame_indices = torch.randint(            high=num_frames // K, size=(K,), dtype=torch.long)        frame_indices += num_frames // K * torch.arange(K)    else:        frame_indices = torch.randint(            high=num_frames, size=(K - num_frames,), dtype=torch.long)        frame_indices = torch.sort(torch.cat((            torch.arange(num_frames), frame_indices)))[0]else:    if num_frames &gt; K:        # Middle index for each segment.        frame_indices = num_frames / K // 2        frame_indices += num_frames // K * torch.arange(K)    else:        frame_indices = torch.sort(torch.cat((                                          torch.arange(num_frames), torch.arange(K - num_frames))))[0]assert frame_indices.size() == (K,)return [frame_indices[i] for i in range(K)]</code></pre><p>提取 ImageNet 预训练模型某层的卷积特征</p><pre><code># VGG-16 relu5-3 feature.model = torchvision.models.vgg16(pretrained=True).features[:-1]# VGG-16 pool5 feature.model = torchvision.models.vgg16(pretrained=True).features# VGG-16 fc7 feature.model = torchvision.models.vgg16(pretrained=True)model.classifier = torch.nn.Sequential(*list(model.classifier.children())[:-3])# ResNet GAP feature.model = torchvision.models.resnet18(pretrained=True)model = torch.nn.Sequential(collections.OrderedDict(    list(model.named_children())[:-1]))with torch.no_grad():    model.eval()    conv_representation = model(image)</code></pre><p>提取 ImageNet 预训练模型多层的卷积特征</p><pre><code>class FeatureExtractor(torch.nn.Module):    &quot;&quot;&quot;Helper class to extract several convolution features from the given    pre-trained model.    Attributes:        _model, torch.nn.Module.        _layers_to_extract, list&lt;str&gt; or set&lt;str&gt;    Example:        &gt;&gt;&gt; model = torchvision.models.resnet152(pretrained=True)        &gt;&gt;&gt; model = torch.nn.Sequential(collections.OrderedDict(                list(model.named_children())[:-1]))        &gt;&gt;&gt; conv_representation = FeatureExtractor(                pretrained_model=model,                layers_to_extract={&#39;layer1&#39;, &#39;layer2&#39;, &#39;layer3&#39;, &#39;layer4&#39;})(image)    &quot;&quot;&quot;    def __init__(self, pretrained_model, layers_to_extract):        torch.nn.Module.__init__(self)        self._model = pretrained_model        self._model.eval()        self._layers_to_extract = set(layers_to_extract)    def forward(self, x):        with torch.no_grad():            conv_representation = []            for name, layer in self._model.named_children():                x = layer(x)                if name in self._layers_to_extract:                    conv_representation.append(x)            return conv_representation</code></pre><p>其他预训练模型</p><p>链接：<a href="https://github.com/Cadene/pretrained-models.pytorch" target="_blank" rel="noopener">https://github.com/Cadene/pretrained-models.pytorch</a></p><p>微调全连接层</p><pre><code>model = torchvision.models.resnet18(pretrained=True)for param in model.parameters():    param.requires_grad = Falsemodel.fc = nn.Linear(512, 100)  # Replace the last fc layeroptimizer = torch.optim.SGD(model.fc.parameters(), lr=1e-2, momentum=0.9, weight_decay=1e-4)</code></pre><p>以较大学习率微调全连接层，较小学习率微调卷积层</p><pre><code>model = torchvision.models.resnet18(pretrained=True)finetuned_parameters = list(map(id, model.fc.parameters()))conv_parameters = (p for p in model.parameters() if id(p) not in finetuned_parameters)parameters = [{&#39;params&#39;: conv_parameters, &#39;lr&#39;: 1e-3},               {&#39;params&#39;: model.fc.parameters()}]optimizer = torch.optim.SGD(parameters, lr=1e-2, momentum=0.9, weight_decay=1e-4)</code></pre><p>模型训练</p><p>常用训练和验证数据预处理</p><p>其中 ToTensor 操作会将 PIL.Image 或形状为 H×W×D，数值范围为 [0, 255] 的 np.ndarray 转换为形状为 D×H×W，数值范围为 [0.0, 1.0] 的 torch.Tensor。</p><pre><code>train_transform = torchvision.transforms.Compose([    torchvision.transforms.RandomResizedCrop(size=224,                                             scale=(0.08, 1.0)),    torchvision.transforms.RandomHorizontalFlip(),    torchvision.transforms.ToTensor(),    torchvision.transforms.Normalize(mean=(0.485, 0.456, 0.406),                                     std=(0.229, 0.224, 0.225)), ]) val_transform = torchvision.transforms.Compose([    torchvision.transforms.Resize(224),    torchvision.transforms.CenterCrop(224),    torchvision.transforms.ToTensor(),    torchvision.transforms.Normalize(mean=(0.485, 0.456, 0.406),                                     std=(0.229, 0.224, 0.225)),])</code></pre><p>训练基本代码框架</p><pre><code>for t in epoch(80):    for images, labels in tqdm.tqdm(train_loader, desc=&#39;Epoch %3d&#39; % (t + 1)):        images, labels = images.cuda(), labels.cuda()        scores = model(images)        loss = loss_function(scores, labels)        optimizer.zero_grad()        loss.backward()        optimizer.step()</code></pre><p>标记平滑（label smoothing）</p><pre><code>for images, labels in train_loader:    images, labels = images.cuda(), labels.cuda()    N = labels.size(0)    # C is the number of classes.    smoothed_labels = torch.full(size=(N, C), fill_value=0.1 / (C - 1)).cuda()    smoothed_labels.scatter_(dim=1, index=torch.unsqueeze(labels, dim=1), value=0.9)    score = model(images)    log_prob = torch.nn.functional.log_softmax(score, dim=1)    loss = -torch.sum(log_prob * smoothed_labels) / N    optimizer.zero_grad()    loss.backward()    optimizer.step()</code></pre><p>Mixup</p><pre><code>beta_distribution = torch.distributions.beta.Beta(alpha, alpha)for images, labels in train_loader:    images, labels = images.cuda(), labels.cuda()    # Mixup images.    lambda_ = beta_distribution.sample([]).item()    index = torch.randperm(images.size(0)).cuda()    mixed_images = lambda_ * images + (1 - lambda_) * images[index, :]    # Mixup loss.        scores = model(mixed_images)    loss = (lambda_ * loss_function(scores, labels)             + (1 - lambda_) * loss_function(scores, labels[index]))    optimizer.zero_grad()    loss.backward()    optimizer.step()</code></pre><p>L1 正则化</p><pre><code>l1_regularization = torch.nn.L1Loss(reduction=&#39;sum&#39;)loss = ...  # Standard cross-entropy lossfor param in model.parameters():    loss += torch.sum(torch.abs(param))loss.backward()</code></pre><p>不对偏置项进行 L2 正则化/权值衰减（weight decay）</p><pre><code>bias_list = (param for name, param in model.named_parameters() if name[-4:] == &#39;bias&#39;)others_list = (param for name, param in model.named_parameters() if name[-4:] != &#39;bias&#39;)parameters = [{&#39;parameters&#39;: bias_list, &#39;weight_decay&#39;: 0},                              {&#39;parameters&#39;: others_list}]optimizer = torch.optim.SGD(parameters, lr=1e-2, momentum=0.9, weight_decay=1e-4)</code></pre><p>梯度裁剪（gradient clipping）</p><pre><code>torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=20)</code></pre><p>计算 Softmax 输出的准确率</p><pre><code>score = model(images)prediction = torch.argmax(score, dim=1)num_correct = torch.sum(prediction == labels).item()accuruacy = num_correct / labels.size(0)</code></pre><p>可视化模型前馈的计算图</p><p>链接：<a href="https://github.com/szagoruyko/pytorchviz" target="_blank" rel="noopener">https://github.com/szagoruyko/pytorchviz</a></p><p>可视化学习曲线</p><p>有 Facebook 自己开发的 Visdom 和 Tensorboard 两个选择。</p><p><a href="https://github.com/facebookresearch/visdom" target="_blank" rel="noopener">https://github.com/facebookresearch/visdom</a></p><p><a href="https://github.com/lanpa/tensorboardX" target="_blank" rel="noopener">https://github.com/lanpa/tensorboardX</a></p><pre><code># Example using Visdom.vis = visdom.Visdom(env=&#39;Learning curve&#39;, use_incoming_socket=False)assert self._visdom.check_connection()self._visdom.close()options = collections.namedtuple(&#39;Options&#39;, [&#39;loss&#39;, &#39;acc&#39;, &#39;lr&#39;])(    loss={&#39;xlabel&#39;: &#39;Epoch&#39;, &#39;ylabel&#39;: &#39;Loss&#39;, &#39;showlegend&#39;: True},    acc={&#39;xlabel&#39;: &#39;Epoch&#39;, &#39;ylabel&#39;: &#39;Accuracy&#39;, &#39;showlegend&#39;: True},    lr={&#39;xlabel&#39;: &#39;Epoch&#39;, &#39;ylabel&#39;: &#39;Learning rate&#39;, &#39;showlegend&#39;: True})for t in epoch(80):    tran(...)    val(...)    vis.line(X=torch.Tensor([t + 1]), Y=torch.Tensor([train_loss]),             name=&#39;train&#39;, win=&#39;Loss&#39;, update=&#39;append&#39;, opts=options.loss)    vis.line(X=torch.Tensor([t + 1]), Y=torch.Tensor([val_loss]),             name=&#39;val&#39;, win=&#39;Loss&#39;, update=&#39;append&#39;, opts=options.loss)    vis.line(X=torch.Tensor([t + 1]), Y=torch.Tensor([train_acc]),             name=&#39;train&#39;, win=&#39;Accuracy&#39;, update=&#39;append&#39;, opts=options.acc)    vis.line(X=torch.Tensor([t + 1]), Y=torch.Tensor([val_acc]),             name=&#39;val&#39;, win=&#39;Accuracy&#39;, update=&#39;append&#39;, opts=options.acc)    vis.line(X=torch.Tensor([t + 1]), Y=torch.Tensor([lr]),             win=&#39;Learning rate&#39;, update=&#39;append&#39;, opts=options.lr)</code></pre><p>得到当前学习率</p><pre><code># If there is one global learning rate (which is the common case).lr = next(iter(optimizer.param_groups))[&#39;lr&#39;]# If there are multiple learning rates for different layers.all_lr = []for param_group in optimizer.param_groups:    all_lr.append(param_group[&#39;lr&#39;])</code></pre><p>学习率衰减</p><pre><code># Reduce learning rate when validation accuarcy plateau.scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode=&#39;max&#39;, patience=5, verbose=True)for t in range(0, 80):    train(...); val(...)    scheduler.step(val_acc)# Cosine annealing learning rate.scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=80)# Reduce learning rate by 10 at given epochs.scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones=[50, 70], gamma=0.1)for t in range(0, 80):    scheduler.step()        train(...); val(...)# Learning rate warmup by 10 epochs.scheduler = torch.optim.lr_scheduler.LambdaLR(optimizer, lr_lambda=lambda t: t / 10)for t in range(0, 10):    scheduler.step()    train(...); val(...)</code></pre><p>保存与加载断点</p><p>注意为了能够恢复训练，我们需要同时保存模型和优化器的状态，以及当前的训练轮数。</p><pre><code># Save checkpoint.is_best = current_acc &gt; best_accbest_acc = max(best_acc, current_acc)checkpoint = {    &#39;best_acc&#39;: best_acc,        &#39;epoch&#39;: t + 1,    &#39;model&#39;: model.state_dict(),    &#39;optimizer&#39;: optimizer.state_dict(),}model_path = os.path.join(&#39;model&#39;, &#39;checkpoint.pth.tar&#39;)torch.save(checkpoint, model_path)if is_best:    shutil.copy(&#39;checkpoint.pth.tar&#39;, model_path)# Load checkpoint.if resume:    model_path = os.path.join(&#39;model&#39;, &#39;checkpoint.pth.tar&#39;)    assert os.path.isfile(model_path)    checkpoint = torch.load(model_path)    best_acc = checkpoint[&#39;best_acc&#39;]    start_epoch = checkpoint[&#39;epoch&#39;]    model.load_state_dict(checkpoint[&#39;model&#39;])    optimizer.load_state_dict(checkpoint[&#39;optimizer&#39;])    print(&#39;Load checkpoint at epoch %d.&#39; % start_epoch)</code></pre><p>计算准确率、查准率（precision）、查全率（recall）</p><pre><code># data[&#39;label&#39;] and data[&#39;prediction&#39;] are groundtruth label and prediction # for each image, respectively.accuracy = np.mean(data[&#39;label&#39;] == data[&#39;prediction&#39;]) * 100# Compute recision and recall for each class.for c in range(len(num_classes)):    tp = np.dot((data[&#39;label&#39;] == c).astype(int),                (data[&#39;prediction&#39;] == c).astype(int))    tp_fp = np.sum(data[&#39;prediction&#39;] == c)    tp_fn = np.sum(data[&#39;label&#39;] == c)    precision = tp / tp_fp * 100    recall = tp / tp_fn * 100</code></pre><p>PyTorch 其他注意事项</p><p>模型定义</p><ul><li>建议有参数的层和汇合（pooling）层使用 torch.nn 模块定义，激活函数直接使用 torch.nn.functional。torch.nn 模块和 torch.nn.functional 的区别在于，torch.nn 模块在计算时底层调用了 torch.nn.functional，但 torch.nn 模块包括该层参数，还可以应对训练和测试两种网络状态。使用 torch.nn.functional 时要注意网络状态，如</li></ul><pre><code>def forward(self, x):    ...    x = torch.nn.functional.dropout(x, p=0.5, training=self.training)</code></pre><ul><li>model(x) 前用 model.train() 和 model.eval() 切换网络状态。</li><li>不需要计算梯度的代码块用 with torch.no_grad() 包含起来。model.eval() 和 torch.no_grad() 的区别在于，model.eval() 是将网络切换为测试状态，例如 BN 和随机失活（dropout）在训练和测试阶段使用不同的计算方法。torch.no_grad() 是关闭 PyTorch 张量的自动求导机制，以减少存储使用和加速计算，得到的结果无法进行 loss.backward()。</li><li>torch.nn.CrossEntropyLoss 的输入不需要经过 Softmax。torch.nn.CrossEntropyLoss 等价于 torch.nn.functional.log_softmax + torch.nn.NLLLoss。</li><li>loss.backward() 前用 optimizer.zero_grad() 清除累积梯度。optimizer.zero_grad() 和 model.zero_grad() 效果一样。</li></ul><p>PyTorch 性能与调试</p><ul><li>torch.utils.data.DataLoader 中尽量设置 pin_memory=True，对特别小的数据集如 MNIST 设置 pin_memory=False 反而更快一些。num_workers 的设置需要在实验中找到最快的取值。</li><li>用 del 及时删除不用的中间变量，节约 GPU 存储。</li><li>使用 inplace 操作可节约 GPU 存储，如</li></ul><pre><code>x = torch.nn.functional.relu(x, inplace=True)</code></pre><ul><li>减少 CPU 和 GPU 之间的数据传输。例如如果你想知道一个 epoch 中每个 mini-batch 的 loss 和准确率，先将它们累积在 GPU 中等一个 epoch 结束之后一起传输回 CPU 会比每个 mini-batch 都进行一次 GPU 到 CPU 的传输更快。</li><li>使用半精度浮点数 half() 会有一定的速度提升，具体效率依赖于 GPU 型号。需要小心数值精度过低带来的稳定性问题。</li><li>时常使用 assert tensor.size() == (N, D, H, W) 作为调试手段，确保张量维度和你设想中一致。</li><li>除了标记 y 外，尽量少使用一维张量，使用 n*1 的二维张量代替，可以避免一些意想不到的一维张量计算结果。</li><li>统计代码各部分耗时</li></ul><pre><code>with torch.autograd.profiler.profile(enabled=True, use_cuda=False) as profile:    ...print(profile)</code></pre><p>或者在命令行运行</p><pre><code>python -m torch.utils.bottleneck main.py</code></pre><p>致谢</p><p>感谢 @些许流年和@El tnoto的勘误。由于作者才疏学浅，更兼时间和精力所限，代码中错误之处在所难免，敬请读者批评指正。</p><p>参考资料</p><ul><li>PyTorch 官方代码：pytorch/examples (<a href="https://link.zhihu.com/?target=https%3A//github.com/pytorch/examples)" target="_blank" rel="noopener">https://link.zhihu.com/?target=https%3A//github.com/pytorch/examples)</a></li><li>PyTorch 论坛：PyTorch Forums (<a href="https://link.zhihu.com/?target=https%3A//discuss.pytorch.org/latest%3Forder%3Dviews)" target="_blank" rel="noopener">https://link.zhihu.com/?target=https%3A//discuss.pytorch.org/latest%3Forder%3Dviews)</a></li><li>PyTorch 文档：<a href="http://pytorch.org/docs/stable/index.html" target="_blank" rel="noopener">http://pytorch.org/docs/stable/index.html</a> (<a href="https://link.zhihu.com/?target=http%3A//pytorch.org/docs/stable/index.html)" target="_blank" rel="noopener">https://link.zhihu.com/?target=http%3A//pytorch.org/docs/stable/index.html)</a></li><li>其他基于 PyTorch 的公开实现代码，无法一一列举</li></ul><p>张皓：南京大学计算机系机器学习与数据挖掘所（LAMDA）硕士生，研究方向为计算机视觉和机器学习，特别是视觉识别和深度学习。个人主页：<a href="http://lamda.nju.edu.cn/zhangh/" target="_blank" rel="noopener">http://lamda.nju.edu.cn/zhangh/</a></p><p><em>原知乎链接：</em> <a href="https://zhuanlan.zhihu.com/p/59205847?" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/59205847?</a></p><p>查看原文： <a href="https://www.jiqizhixin.com/articles/2019-04-25-8" target="_blank" rel="noopener">点赞收藏：PyTorch常用代码段整理合集</a><a href="https://www.jiqizhixin.com/articles/2019-04-25-8" target="_blank" rel="noopener">https://www.jiqizhixin.com/articles/2019-04-25-8</a>)</p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN经典模型复现数据分析解析</title>
      <link href="/2021/08/14/cnn-jing-dian-mo-xing-fu-xian-shu-ju-fen-xi-jie-xi/"/>
      <url>/2021/08/14/cnn-jing-dian-mo-xing-fu-xian-shu-ju-fen-xi-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次共动手实现了模型LeNet、AlexNet、VGG(11 13 16 19)、GoogLeNet共7个模型，以CIFAR10数据集作为分类结果跑数据前前后后跑了大概有几天吧（当然并不是一直在跑数据），终于得到了所有数据，本人将数据分析过程记录下来。以后就会选择用TensorBoard来记录了。</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>由于我们最终是要得到3类图，分别为：</p><ul><li>这七个模型的loss随着epoch的变化的折线图（每一个模型都画一个并也有放一张图中分析）</li><li>这七个模型的test accuracy随着epoch的变化的折线图（每一个模型都画一个并也有放一张图中分析）</li><li>这七个模型训练完毕后，测试CIFAR10数据集10类每一类的准确率，并且再加上一个平均准确率的直方图（也就是7个直方图，每个直方图有11项数据）</li><li>七个模型最终预测准确率直方图</li></ul><p><em>我们一个一个分析。</em></p><h1 id="目前已有数据"><a href="#目前已有数据" class="headerlink" title="目前已有数据"></a>目前已有数据</h1><p>目前经过模型训练，我们得到了3个字典all_loss, accuracy, sort_accuracy, 含有7个模型的训练结果，分别对应我们的目标。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'all_loss:'</span><span class="token punctuation">,</span> all_loss<span class="token punctuation">,</span> <span class="token string">'accuracy:'</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">,</span> <span class="token string">'sort_accuracy:'</span><span class="token punctuation">,</span> sort_accuracy<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>all_loss</strong>:</p><p>{‘LeNet’: [1.6242144256544204, 1.31352958249039, 1.1847674048107095, 1.0951759464757533, 1.0312513256027236, 0.9760023163094097, 0.9317566171641237, 0.8888657108683351, 0.851712247841799, 0.8184668843134504, 0.7859083576722551, 0.7644560352320559, 0.7326112778157816, 0.7069267691783393, 0.6854747742204733, 0.6642881736340465, 0.6426100643186026, 0.6204320310554822, 0.6023138596873518, 0.5891161807839563], ‘AlexNet’: [1.6470382594177528, 1.2535949297921443, 1.0847475018855173, 0.9779244823785295, 0.8868776897513097, 0.8185919923463542, 0.7630485494740865, 0.712278577117148, 0.6728370328667983, 0.6266675178945942, 0.5853622808280238, 0.5530675600163081, 0.5216182161763702, 0.48412983791613073, 0.47559833306859717, 0.4513656324656324, 0.4125896211587231, 0.39553951881992766, 0.37599814571654727, 0.3764796929466118], ‘VGG11’: [1.2797923941720546, 0.8204267419688761, 0.6319287241801801, 0.5093692947448406, 0.3947184955271024, 0.30049776959918817, 0.22226405595217713, 0.1716289870436193, 0.12499573790278794, 0.10720912222238049, 0.08451989348654552, 0.07376416784010903, 0.06238203229706184, 0.05902868207292414, 0.054739658074399546, 0.046656431376819574, 0.0440141692180995, 0.040774361139257746, 0.037835499233601716, 0.038758098736319496], ‘VGG13’: [1.2642371852684509, 0.7722501971989947, 0.5903376623264054, 0.4784044684923213, 0.3800432443847437, 0.30268731431278123, 0.23576976750951137, 0.18087512682027676, 0.1408744841037542, 0.10939275374864717, 0.08912606567770834, 0.07885368761744664, 0.0641673685397174, 0.059465244257598734, 0.05032006161191555, 0.05069959139102436, 0.0446176283173007, 0.04227883966442089, 0.038349986351278245, 0.035195458980138435], ‘VGG16’: [1.4878040287653198, 0.9365591992959952, 0.7370820180763065, 0.6060846281783355, 0.5078294051958777, 0.4291884641894294, 0.3603880833024564, 0.2933719548994623, 0.24789767926725584, 0.198568012527264, 0.1621592563060124, 0.1343770895839271, 0.11871750627541938, 0.0996952341926639, 0.08778401462586306, 0.0753310109254049, 0.06421501902134522, 0.06112010521195529, 0.0573385018331911, 0.0516717257278869], ‘VGG19’: [1.7686422246191509, 1.193289189539907, 0.9002916185599764, 0.7483896711826934, 0.6286251023221199, 0.5321085340417254, 0.4624791795297352, 0.38920851096587106, 0.33552453419684297, 0.2911587263483678, 0.24505771608913646, 0.20557330978696076, 0.1741280048142385, 0.14644487293513345, 0.1290046954908601, 0.11228246268544756, 0.09866908017803183, 0.08531898694664307, 0.08279588602601176, 0.0675076813722277], ‘GoogLeNet’: [1.2311952696431934, 0.7666956804063924, 0.578668496149885, 0.4777612447205102, 0.3925454377594506, 0.3375073971079134, 0.2815402130908368, 0.23534502303394514, 0.19595492798406297, 0.16418727704554872, 0.14072739037082477, 0.11543235368431186, 0.10002748314839076, 0.08524505978824137, 0.08325784758050138, 0.06983265248925218, 0.06453105599111508, 0.058409628307665974, 0.05595131519743625, 0.05454142128511587]}</p><p><strong>accuracy:</strong></p><p>{‘LeNet’: [0.47634, 0.57336, 0.61238, 0.62712, 0.66916, 0.6842, 0.68662, 0.7085, 0.73304, 0.7478, 0.73412, 0.7546, 0.76134, 0.77652, 0.79072, 0.77714, 0.80508, 0.80592, 0.79098, 0.8204], ‘AlexNet’: [0.4927, 0.588, 0.67408, 0.70754, 0.72952, 0.75498, 0.7811, 0.77366, 0.8081, 0.79696, 0.82704, 0.83872, 0.84712, 0.8661, 0.8742, 0.86808, 0.8815, 0.88648, 0.88684, 0.88756], ‘VGG11’: [0.69674, 0.76524, 0.81788, 0.8647, 0.91078, 0.93784, 0.95356, 0.97072, 0.97222, 0.96346, 0.98072, 0.97492, 0.983, 0.98192, 0.9873, 0.98874, 0.98556, 0.99128, 0.98768, 0.99384], ‘VGG13’: [0.6891, 0.77314, 0.83566, 0.88822, 0.90306, 0.92948, 0.93804, 0.96178, 0.97378, 0.97418, 0.97518, 0.98266, 0.98802, 0.9846, 0.98568, 0.98912, 0.99238, 0.9936, 0.99396, 0.98878], ‘VGG16’: [0.61826, 0.72454, 0.79506, 0.81732, 0.84844, 0.88578, 0.90558, 0.92866, 0.93832, 0.9508, 0.95308, 0.96834, 0.97676, 0.95392, 0.98222, 0.98524, 0.98964, 0.98392, 0.98868, 0.98892], ‘VGG19’: [0.4279, 0.66604, 0.7312, 0.77616, 0.82448, 0.84562, 0.87258, 0.90588, 0.9072, 0.93078, 0.94332, 0.95704, 0.95202, 0.9642, 0.97252, 0.9682, 0.97178, 0.97656, 0.97264, 0.98384], ‘GoogLeNet’: [0.68024, 0.78884, 0.84078, 0.87326, 0.88924, 0.90944, 0.92276, 0.93896, 0.94442, 0.95026, 0.9642, 0.96864, 0.97296, 0.97084, 0.97456, 0.97932, 0.98056, 0.98624, 0.98712, 0.98292]} </p><p><strong>sort_accuracy ：</strong></p><p>{‘LeNet’: [0.8550247116968699, 0.9040880503144654, 0.7291338582677165, 0.7156105100463679, 0.8411949685534591, 0.688135593220339, 0.8456692913385827, 0.8050847457627118, 0.9357366771159875, 0.8855799373040752], ‘AlexNet’: [0.9159802306425041, 0.9119496855345912, 0.8267716535433071, 0.7372488408037094, 0.8915094339622641, 0.8101694915254237, 0.9700787401574803, 0.888135593220339, 0.9780564263322884, 0.9482758620689655], ‘VGG11’: [1.0, 0.9921383647798742, 0.9921259842519685, 0.9953632148377125, 0.9874213836477987, 0.988135593220339, 0.9984251968503937, 0.9966101694915255, 0.9952978056426333, 0.9984326018808778], ‘VGG13’: [0.9857142857142858, 0.9910714285714286, 0.9846153846153847, 0.9775641025641025, 0.9801980198019802, 0.9935275080906149, 0.9819819819819819, 0.9933110367892977, 0.9866220735785953, 1.0], ‘VGG16’: [0.9821428571428571, 1.0, 0.9907692307692307, 0.9871794871794872, 0.9966996699669967, 0.9935275080906149, 0.993993993993994, 0.9832775919732442, 0.9899665551839465, 1.0], ‘VGG19’: [0.9964285714285714, 0.9821428571428571, 0.9723076923076923, 0.9166666666666666, 0.9933993399339934, 0.9805825242718447, 0.984984984984985, 0.9899665551839465, 0.9966555183946488, 1.0], ‘GoogLeNet’: [0.9892857142857143, 0.9970238095238095, 0.9723076923076923, 0.967948717948718, 0.9834983498349835, 0.970873786407767, 0.996996996996997, 0.9899665551839465, 0.9933110367892977, 0.9879518072289156]}</p></blockquote><h1 id="导入必要库"><a href="#导入必要库" class="headerlink" title="导入必要库"></a>导入必要库</h1><p> 首先导入必要的库，这里我们主要使用到matplotlib库，由于我们使用的是jupyter notebook，所以我们额外加了个命令<code>%matplotlib inline</code>，这是python一个魔术方法，可以将我们的图嵌套到cell的输出里面。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">%</span>matplotlib inline<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="颜色设置"><a href="#颜色设置" class="headerlink" title="颜色设置"></a>颜色设置</h1><h2 id="查看各类颜色"><a href="#查看各类颜色" class="headerlink" title="查看各类颜色"></a>查看各类颜色</h2><p>由于我们需要将各种折线画到一张图中，所以我们尽量不同模型使用不同颜色，所以我们首先需要了解都有哪些颜色。</p><p>输入如下代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列出所有的matplotlib有的颜色</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> hex <span class="token keyword">in</span> matplotlib<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>cnames<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> hex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们可以得到所有的颜色以及其rgb值(共有148种)：</p><blockquote><p>aliceblue #F0F8FF<br>antiquewhite #FAEBD7<br>aqua #00FFFF<br>aquamarine #7FFFD4<br>azure #F0FFFF<br>beige #F5F5DC<br>bisque #FFE4C4<br>black #000000<br>blanchedalmond #FFEBCD<br>blue #0000FF<br>blueviolet #8A2BE2<br>brown #A52A2A<br>burlywood #DEB887<br>cadetblue #5F9EA0<br>chartreuse #7FFF00<br>chocolate #D2691E<br>coral #FF7F50<br>cornflowerblue #6495ED<br>cornsilk #FFF8DC<br>crimson #DC143C<br>cyan #00FFFF<br>darkblue #00008B<br>darkcyan #008B8B<br>darkgoldenrod #B8860B<br>darkgray #A9A9A9</p><p>[show more (open the raw output data in a text editor) …](vscode-file://vscode-app/d:/Microsoft VS Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#)</p><p>wheat #F5DEB3 white #FFFFFF whitesmoke #F5F5F5 yellow #FFFF00 yellowgreen #9ACD32</p></blockquote><h2 id="设置自己的颜色"><a href="#设置自己的颜色" class="headerlink" title="设置自己的颜色"></a>设置自己的颜色</h2><p>因为一共有7种模型，我们只需要7种颜色就行，这里用到了zip将其打包，如下：</p><pre class="line-numbers language-python"><code class="language-python">colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wheat'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">]</span>colors <span class="token operator">=</span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>all_loss<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> colors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>{‘LeNet’: ‘wheat’, ‘AlexNet’: ‘blue’, ‘VGG11’: ‘yellow’, ‘VGG13’: ‘green’, ‘VGG16’: ‘pink’, ‘VGG19’: ‘purple’, ‘GoogLeNet’: ‘red’}</p></blockquote><p><em>而后我们选择颜色就可以直接这么选择就OK。</em></p><h1 id="loss-epoch折线图"><a href="#loss-epoch折线图" class="headerlink" title="loss -epoch折线图"></a>loss -epoch折线图</h1><h2 id="各个模型对比分析"><a href="#各个模型对比分析" class="headerlink" title="各个模型对比分析"></a>各个模型对比分析</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python">epoch <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'The loss of Every model with epoch'</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> loss <span class="token keyword">in</span> all_loss<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(name, colors[name])</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'%3s'</span><span class="token operator">%</span>round<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'loss/all.png'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><ol><li>这里面epoch作为x轴，一共有20个epoch,所以我们np.arange(1, 21).</li><li>plt.figure()是建立了一个图，其中figsize参数是一个元组，用来定义我们建立的图的大小，（width, height），matplotlib 的 figure 就是一个 单独的 figure 窗口, 窗口里面还可以有更多的小图片.</li><li>而后我们直接设置plt.title</li><li>随后我们选择绘图，这里只有一个figure是为了把所有折线画到一张图中</li><li>随后我们直接选用plt.plot绘图，第一个为x轴，第二个为y轴，颜色选择我们之前一一对应的，label是我们所选的图例，我们图例需要在plt.legend()命令后才会显示。linewidth是我们线条的粗细，实际上也可以调成虚线，需要调整<code>linestyle==&#39;--&#39;</code>.</li><li>里面嵌套的for循环用来标注各个点的纵坐标，标注数据以方便后续分析</li><li>plt.legend(loc=’best’),loc是图例的位置，这个可以自定义，也可以直接’best’让程序自动分配最好的图例位置。<strong>如果嫌图例框小可以使用<code>borderpad=2</code>更改内部填充，我们将使整个图例框变大(单位是字体大小的倍数，类似于<code>em</code></strong></li><li>plt.savefig是用来保存图片，里面可以填我们需要保存到的路径。必须放到plt.show()前面，否则会得到空图像</li><li>plt.show()是直接显示输出图像</li></ol><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><blockquote><p> <a href="https://imgtu.com/i/f6BJ29" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/14/f6BJ29.png" alt="loss-epoch"></a></p></blockquote><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><p><strong>先挖个坑</strong></p><h2 id="单独输出模型"><a href="#单独输出模型" class="headerlink" title="单独输出模型"></a>单独输出模型</h2><p>讲过以上如何绘图之后，实际上接下来就简单多了。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python">epoch <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>all_loss<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">,</span> loss <span class="token operator">=</span> data    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>f<span class="token string">'The loss of model {name} with epoch'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'loss/The loss of every model with epoch'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><ol><li>这里面由于上文讲了大部分，这里就挑一部分来看</li><li>首先我们定义图像大小之后（<del>别问我怎么弄的参数，试出来的</del>）这里面设定了有子图plt.subplot(a, b, c)实际上a, b是指准备给图像平均分为a*b几份，c是指目前要操作的位置是第几份子图，如果我们想要进一步探索可不可以不平均分，可以看<a href="https://mofanpy.com/tutorials/data-manipulation/plt/subpot1/" target="_blank" rel="noopener">这里</a>，<a href="https://blog.csdn.net/math_gao/article/details/109521842?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162894368316780255248420%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162894368316780255248420&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109521842.first_rank_v2_pc_rank_v29&utm_term=matplotlib+%E8%B0%83%E6%95%B4%E5%AD%90%E5%9B%BE%E5%A4%A7%E5%B0%8F&spm=1018.2226.3001.4187" target="_blank" rel="noopener">调子图间距</a> 实际上我也是随便找的资料看，大家上网随便一搜就OK。</li><li>接着是我们的绘图、保存了，比较简单，这里不多说了。</li></ol><p><strong>另外需要注意的就是我们的顺序一定要注意，否则会出现一些意想不到的错误</strong></p><h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><blockquote><p><a href="https://imgtu.com/i/f6BNK1" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/14/f6BNK1.png" alt="The loss of every model with epoch"></a></p></blockquote><h1 id="accuracy-epoch折线图"><a href="#accuracy-epoch折线图" class="headerlink" title="accuracy-epoch折线图"></a>accuracy-epoch折线图</h1><h2 id="各个模型的对比分析"><a href="#各个模型的对比分析" class="headerlink" title="各个模型的对比分析"></a>各个模型的对比分析</h2><p>由于都是折线图，所以我们代码差距实际上并不大：</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python">epoch <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'The Accuracy of Every model with epoch'</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> rate <span class="token keyword">in</span> accuracy<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> rate<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'%3s'</span><span class="token operator">%</span>round<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">,</span> borderpad<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'accuracy/all.png'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a>输出结果</h3><blockquote><p><a href="https://imgtu.com/i/f6sjdP" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/14/f6sjdP.png" alt="The Accuracy of Every model with epoch"></a></p></blockquote><h3 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h3><p>实际上代码是非常类似的，并不需要额外去分析</p><h3 id="对比分析-1"><a href="#对比分析-1" class="headerlink" title="对比分析"></a>对比分析</h3><p><strong>同样先挖个坑</strong></p><h2 id="单独输出模型-1"><a href="#单独输出模型-1" class="headerlink" title="单独输出模型"></a>单独输出模型</h2><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python">epoch <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> rate <span class="token keyword">in</span> accuracy<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>f<span class="token string">'The Accuracy of model {name} with epoch'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'accuracy/%s.png'</span><span class="token operator">%</span>name<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出结果-3"><a href="#输出结果-3" class="headerlink" title="输出结果"></a>输出结果</h3><blockquote><p><a href="https://imgtu.com/i/f66YBn" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/14/f66YBn.png" alt="The accuracy of every model with epoch"></a></p></blockquote><h1 id="sort-variety-sort分布直方图"><a href="#sort-variety-sort分布直方图" class="headerlink" title="sort_variety-sort分布直方图"></a>sort_variety-sort分布直方图</h1><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>sort_accuracy<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">,</span> rate <span class="token operator">=</span> data    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>f<span class="token string">'The Accuracy Of Every Variety Of {name}'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>classes<span class="token punctuation">,</span> rate<span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plt.legend(loc='best')</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>classes<span class="token punctuation">,</span> rate<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">"%3s"</span><span class="token operator">%</span>round<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'The test_acc of every model'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>models_name<span class="token punctuation">,</span> test_acc<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'bgry'</span><span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>models_name<span class="token punctuation">,</span> test_acc<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'%3s'</span><span class="token operator">%</span>round<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'sort_accuracy/the accuracy of every variety.png'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码分析-3"><a href="#代码分析-3" class="headerlink" title="代码分析"></a>代码分析</h2><ol><li>首先定义窗口大小</li><li>另外这里面用plt.bar来定义直方图，横坐标为classes, 纵坐标为rate，同样这里事实上不需要图例</li><li>这里面由于我们放好多图在一张图里了，所以字体看起来有些小，我们可以使用frontsize这个属性来<a href="https://blog.csdn.net/u011008379/article/details/60478927" target="_blank" rel="noopener">调大小</a>。</li><li>另外就是我们保留位数利用round(y, 2), 2为保留两位数字。</li></ol><p><a href="https://imgtu.com/i/f6f13V" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/14/f6f13V.png" alt="the accuracy of every variety"></a></p><h2 id="对比分析-2"><a href="#对比分析-2" class="headerlink" title="对比分析"></a>对比分析</h2><p>挖坑</p><p><strong>终于，CNN分析完毕，接下来就要尝试新东西了，请各位继续关注我的博客🙂</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
            <tag> CNN </tag>
            
            <tag> matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> numpy </tag>
            
            <tag> GoogLeNet </tag>
            
            <tag> LeNet </tag>
            
            <tag> AlexNet </tag>
            
            <tag> VGG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kaggle竟然不支持TensorBoard</title>
      <link href="/2021/08/13/kaggle-jing-ran-bu-zhi-chi-tensorboard/"/>
      <url>/2021/08/13/kaggle-jing-ran-bu-zhi-chi-tensorboard/</url>
      
        <content type="html"><![CDATA[<p>   最近想白嫖一下Kaggle的GPU，费了一些功夫<a href="https://blog.csdn.net/bigbennyguo/article/details/87956434?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control" target="_blank" rel="noopener">学了学</a>TensorBoard, 后来发现Kaggle上的命令和本地运行还不一样。又学了学<a href="https://zhuanlan.zhihu.com/p/66748652" target="_blank" rel="noopener">Kaggle上的启动方式</a>，学完后，满怀期待的开始测试一些基本代码。没想到却遇到了这样的情况：</p><p><a href="https://imgtu.com/i/fDuEkQ" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/13/fDuEkQ.png" alt="气死我了！！"></a></p><p>竟然运行超时！我本来以为是因为没有科学shangwang的原因，所以就开始可学的上网，但是重新运行命令，还是这样的结果，没有办法，只好上网搜一下为什么，问度娘为什么Kaggle上运行Tensorboard没有响应，没有结果……。嗨，好吧……中文社区竟然根本没有人提出这个问题，自然也没有人解答，后来把错误原因输进去，一输入就得到了Kaggle上问答区的讨论：</p><p><a href="https://imgtu.com/i/fDuc9A" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/13/fDuc9A.png" alt="NO!!!"></a></p><p>多谢大哥！原来TensorBoard 已被暂时禁用，因为它会减慢所有用户的 Jupyter 笔记本启动时间。 他们说他们正在努力将其取回 10 个月前。 它现在似乎已经退居二线。 作为一种解决方法，我发现这个 notebook 可以在当前的 docker 文件上运行。 有关在 Kaggle 中使用 TensorBoard 的更多信息，请参阅此<a href="https://www.kaggle.com/product-feedback/89671" target="_blank" rel="noopener">issue</a>。</p><p>然而我参阅后……发现彻底用不了了，乖乖自己用matplotlib实现吧……</p><p>唉唉唉！要不是我本人没有GPU，谁稀罕Kaggle Tesla K80GPU那点算力……</p><p>最后附上一些TensorBoard技巧：</p><h2 id="在Kaggle上（目前没啥用）"><a href="#在Kaggle上（目前没啥用）" class="headerlink" title="在Kaggle上（目前没啥用）"></a>在Kaggle上（目前没啥用）</h2><p>相比本地机中使用notebook进行可视化，在这种远程的notebook中如果使用魔法函数</p><pre class="line-numbers language-python3"><code class="language-python3">！tensorboard --logdir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会导致你无法打开tensorboard的http服务（也就是网址）。本文使用一种简单的方法，通过tensorboardX在notebook可视化pytorch模型参数。</p><p>第一步import tensorboardX （如何使用tensorboardX请参考reference）：</p><pre class="line-numbers language-text"><code class="language-text">from tensorboardX import SummaryWriter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步初始化一个 SummaryWriter实例：</p><pre class="line-numbers language-text"><code class="language-text">writer = SummaryWriter()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三步：</p><pre class="line-numbers language-text"><code class="language-text">%load_ext tensorboard.notebook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第四步把你模型需要在tensorboard中可视化的参数写入writer：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-39de1b0efa3e5ce57e95d02208478e04_1440w.jpg" alt="img"></p><p>第五步：</p><pre class="line-numbers language-text"><code class="language-text">%tensorboard --logdir ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来你就可以训练你的模型了，而且在边训练的时候可以边看到模型参数的变化。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-e7e1d23b2830e5deaa826b2ac0e06649_1440w.jpg" alt="img"></p><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p><a href="https://blog.csdn.net/bigbennyguo/article/details/87956434?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control" target="_blank" rel="noopener">https://blog.csdn.net/bigbennyguo/article/details/87956434?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> GPU </tag>
            
            <tag> Kaggle </tag>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU/GPU/TPU/APU家族们</title>
      <link href="/2021/08/13/cpu-gpu-tpu-apu-jia-zu-men/"/>
      <url>/2021/08/13/cpu-gpu-tpu-apu-jia-zu-men/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章转载自个人博客<a href="http://www.techeasygo.com/archives/1143" target="_blank" rel="noopener">闻西谈</a>，如有侵权，请与博主本人联系：<a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a></p></blockquote><p>刚开始接触深度学习概念时，基本大多数时候也就提到GPU，也基本是用GPU来进行深度学习算法训练或部署人脸识别系统的。</p><p>近几年，随着人工智能(尤其是人脸识别)的爆炸式发展，诞生了许多新的东西，其中这芯片，就让很多人都摸不着头脑。</p><p>除了CPU，GPU之外，还有TPU，NPU等，真的是CPU/GPU/TPU/NPU傻傻分不清楚啊。</p><p>今天，闻西就来帮大家理理这些让人分不清楚的芯片到底都是啥？怎么区别它们？</p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a><strong>CPU</strong></h2><p>CPU是大家听到得最多的。</p><p>CPU英文全称是Central Processing Unit，中文全称是中央处理器，是计算机的核心器件，CPU通常由三个部分组成：<strong>计算单元、控制单元和存储单元。</strong></p><p>架构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-d65f155a80f7a1d6e6227d01c7f414a1_1440w.jpg" alt="img"></p><p>是不是看不懂？看不懂就对了，下面这张图才是帮助你理解的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-046ee01f1002ef7e7db48eeda9aa539e_1440w.jpg" alt="img"></p><h2 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a><strong>GPU</strong></h2><p>GPU全称是Graphics Processing Unit，中文全称叫图形处理器，它也是由三个部分组成：<strong>计算单元、控制单元和存储单元。</strong></p><p>我们继续沿用上面CPU架构图用来表示各个单元的颜色来表示下GPU架构(黄色用来表示控制单元，绿色用来表示计算单元，橙色用来表示存储单元)，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic4.zhimg.com/80/v2-7d630d1681ddd6ee47968af93bec0c23_1440w.jpg" alt="img"></p><p>这妥妥是个CPU变种啊！</p><p>我们把CPU和GPU的架构图放在一起比较下，看看有啥区别：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic4.zhimg.com/80/v2-005d784787c6e72d75214c3cbe1ea303_1440w.jpg" alt="img"></p><p>CPU这边起码30%都是用在了控制单元，各个单元占比还算均衡，而GPU就夸张了，80%以上都用在了计算单元，偏科有点严重啊。</p><p>正是由于这种区别，导致CPU精于控制和复杂运算，而GPU精于简单且重复的运算。</p><p><strong>另外CPU和GPU还有一个最大的区别：CPU是顺序执行运算，而GPU是可以大量并发的执行运算，通俗的说就是CPU做事情是一件一件来做，而GPU是很多件事情同时做。</strong></p><p>但很多件事情同时做，一定是简单的事情，就像一个人一样，我们没法同时做两件复杂的事情。</p><p>借用知乎上某大神的说法，就像你有个工作需要计算几亿次一百以内加减乘除一样，最好的办法就是雇上几十个小学生一起算，一人算一部分，反正这些计算也没什么技术含量，纯粹体力活而已；而CPU就像老教授，积分微分都会算，就是工资高，一个老教授资顶二十个小学生，你要是富士康你雇哪个？</p><p>GPU就是用很多简单的计算单元去完成大量的计算任务，纯粹的人海战术。这种策略基于一个前提，就是小学生A和小学生B的工作没有什么依赖性，是互相独立的。</p><p><strong>但有一点需要强调，虽然GPU是为了图像处理而生的，但是我们通过前面的介绍可以发现，它在结构上并没有专门为图像服务的部件</strong>，只是对CPU的结构进行了优化与调整，所以现在GPU不仅可以在图像处理领域大显身手，它还被用来科学计算、密码破解、数值分析，海量数据处理（排序，Map-Reduce等），金融分析等需要大规模并行计算的领域。</p><p>上面我们提到的CPU和GPU都是通用芯片。</p><p>但古语有云：工欲善其事必先利其器。</p><p>一块石头，是通用的，但如果我专门打磨打磨，让它变成锋利的，是不是就可以用来切割东西了呢？</p><p>有了这个概念后，对于TPU，NPU等等众多的PU们，你把它们当成都是专门打磨过的石头，就很好理解了。</p><h2 id="TPU"><a href="#TPU" class="headerlink" title="TPU"></a><strong>TPU</strong></h2><p>自从谷歌的AlphaGo打败李世石之后，谷歌在人工智能界的知名度也越来越大了，于是谷歌推出了它们的深度学习框架TensorFlow，这个深度学习框架也就此扬名世界。</p><p>有了好的算法框架，就得要有硬件来支持啊，传统的GPU行吗？</p><p>当然行，可是它毕竟是块通用的石头，要是打磨打磨就好了。</p><p>于是针对谷歌的深度学习框架TensorFlow专门定制的芯片诞生了，英文全称就叫Tensor Processing Unit，翻译为中文就是张量处理单元，它到底有多牛呢？比较下你就知道了：</p><p><strong>TPU与同期的CPU和GPU相比，可以提供15-30倍的性能提升，以及30-80倍的效率（性能/瓦特）提升。</strong></p><p>吼吼，这可不是一丁点的效率提升，是大大的提升。</p><h2 id="NPU"><a href="#NPU" class="headerlink" title="NPU"></a><strong>NPU</strong></h2><p>NPU英文全称是Neural network Processing Unit， 中文叫神经网络处理器。</p><p>神经网络是个啥？</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-9818a287fb926b1d6cd213546e91d934_1440w.jpg" alt="img"></p><p>神经网络就是你大脑里面的神经元连接成的网络，错综复杂，据说越复杂越聪明，当然太复杂了，就成神经病了。</p><p>而这个NPU，即神经网络处理器，就是要模仿人的大脑神经网络，使之具备智能。</p><p>怎么模仿呢？</p><p>NPU工作原理是在电路层模拟人类神经元和突触，并且用深度学习指令集直接处理大规模的神经元和突触，一条指令完成一组神经元的处理。相比于CPU和GPU，NPU通过突触权重实现存储和计算一体化，从而提高运行效率。</p><h2 id="其他PU们"><a href="#其他PU们" class="headerlink" title="其他PU们"></a><strong>其他PU们</strong></h2><p>顺着这个套路，感觉妈妈再也不用担心我的PU了。</p><p>APU — Accelerated Processing Unit, 加速处理器，AMD公司推出加速图像处理芯片产品。</p><p>BPU — Brain Processing Unit, 地平线公司主导的嵌入式处理器架构。</p><p>CPU — Central Processing Unit 中央处理器， 目前PC core的主流产品。</p><p>DPU — Deep learning Processing Unit, 深度学习处理器，最早由国内深鉴科技提出；另说有Dataflow Processing Unit 数据流处理器， Wave Computing 公司提出的AI架构；Data storage Processing Unit，深圳大普微的智能固态硬盘处理器。</p><p>FPU — Floating Processing Unit 浮点计算单元，通用处理器中的浮点运算模块。</p><p>GPU — Graphics Processing Unit, 图形处理器，采用多线程SIMD架构，为图形处理而生。</p><p>HPU — Holographics Processing Unit 全息图像处理器， 微软出品的全息计算芯片与设备。</p><p>IPU — Intelligence Processing Unit， Deep Mind投资的Graphcore公司出品的AI处理器产品。</p><p>MPU/MCU — Microprocessor/Micro controller Unit， 微处理器/微控制器，一般用于低计算应用的RISC计算机体系架构产品，如ARM-M系列处理器。</p><p>NPU — Neural Network Processing Unit，神经网络处理器，是基于神经网络算法与加速的新型处理器总称，如中科院计算所/寒武纪公司出品的diannao系列。</p><p>RPU — Radio Processing Unit, 无线电处理器， Imagination Technologies 公司推出的集合集Wifi/蓝牙/FM/处理器为单片的处理器。</p><p>TPU — Tensor Processing Unit 张量处理器， Google 公司推出的加速人工智能算法的专用处理器。目前一代TPU面向Inference，二代面向训练。</p><p>VPU — Vector Processing Unit 矢量处理器，Intel收购的Movidius公司推出的图像处理与人工智能的专用芯片的加速计算核心。</p><p>WPU — Wearable Processing Unit， 可穿戴处理器，Ineda Systems公司推出的可穿戴片上系统产品，包含GPU/MIPS CPU等IP。</p><p>XPU — 百度与Xilinx公司在2017年Hotchips大会上发布的FPGA智能云加速，含256核。</p><p>ZPU — Zylin Processing Unit, 由挪威Zylin 公司推出的一款32位开源处理器。</p><p><strong>这么下去感觉26个字母完全不够用啊，话说以后PU们会不会长的跟车牌一样了呢？</strong></p><p><strong>比如：XZAYPU，嗯，我看就差加个粤B在前面了。</strong></p><p><strong>以后妈妈可能还是要担心我的PU了！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> CPU </tag>
            
            <tag> 显卡 </tag>
            
            <tag> GPU </tag>
            
            <tag> TPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习GPU利用率低问题分析(转)</title>
      <link href="/2021/08/12/shen-du-xue-xi-gpu-li-yong-lu-di-wen-ti-fen-xi-zhuan/"/>
      <url>/2021/08/12/shen-du-xue-xi-gpu-li-yong-lu-di-wen-ti-fen-xi-zhuan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转载自：<a href="https://benpaodewoniu.github.io/2021/01/21/torch16/" target="_blank" rel="noopener">犀牛鸟的博客</a>,如有侵权请与本人联系：<a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a></p></blockquote><p>这个真的是值得人研究的事情，如果，<code>gpu</code> 利用率很低，那还不如 <code>cpu</code> 来的舒爽。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/qq_32998593/article/details/92849585" target="_blank" rel="noopener">深度学习PyTorch，TensorFlow中GPU利用率较低，CPU利用率很低，且模型训练速度很慢的问题总结与分析</a></li></ul><p>我会结合我自己的经验加上这篇博文来做一个总结！</p><p>在深度学习模型训练过程中，在服务器端或者本地<code>pc端</code>，输入<code>nvidia-smi</code>来观察显卡的<code>GPU内存占用率</code>（<code>Memory-Usage</code>），<code>显卡的GPU利用率</code>（<code>GPU-util</code>），然后采用<code>top</code>来查看<code>CPU</code>的线程数（<code>PID数</code>）和<code>利用率</code>（<code>%CPU</code>）。往往会发现很多问题，比如</p><ul><li>GPU内存占用率低</li><li>显卡利用率低</li><li>CPU百分比低等等</li></ul><h1 id="GPU内存占用率问题"><a href="#GPU内存占用率问题" class="headerlink" title="GPU内存占用率问题"></a>GPU内存占用率问题</h1><p>这往往是由于</p><ul><li><code>模型的大小</code></li><li><code>batch size</code>的大小</li></ul><p>来影响这个指标。</p><p>当你发下你的<code>GPU占用率</code>很小的时候，比如<code>40%</code>，<code>70%</code>，等等。</p><p>此时，如果你的网络结构已经固定，此时只需要改变<code>batch size</code>的大小，就可以尽量利用完整个<code>GPU</code>的内存。<code>GPU</code>的内存占用率主要是<code>模型的大小</code>，包括网络的宽度，深度，参数量，中间每一层的缓存，都会在内存中开辟空间来进行保存，所以模型本身会占用很大一部分内存。</p><p>其次是<code>batch size</code>的大小，也会占用影响内存占用率。<code>batch size</code>设置为<code>128</code>，与设置为<code>256</code>相比，内存占用率是接近于<code>2</code>倍关系。当你<code>batch size</code>设置为<code>128</code>，占用率为<code>40%</code>的话，设置为<code>256</code>时，此时模型的占用率约等于<code>80%</code>，偏差不大。所以在模型结构固定的情况下，尽量将<code>batch size</code>设置大，充分利用<code>GPU</code>的内存。（<code>GPU</code>会很快的算完你给进去的数据，主要瓶颈在<code>CPU的数据吞吐量</code>上面。）</p><h1 id="GPU利用率问题"><a href="#GPU利用率问题" class="headerlink" title="GPU利用率问题"></a>GPU利用率问题</h1><p>这个是<code>Volatile GPU-Util</code>表示，当没有设置好<code>CPU的线程数</code>时，这个参数是在反复的跳动的，<code>0%</code>，<code>20%</code>，<code>70%</code>，<code>95%</code>，<code>0%</code>。这样停息<code>1-2</code> 秒然后又重复起来。其实是<code>GPU</code>在等待数据从<code>CPU</code>传输过来，当从总线传输到<code>GPU</code>之后，<code>GPU</code>逐渐起计算来，利用率会突然升高，但是<code>GPU</code>的算力很强大，<code>0.5秒</code>就基本能处理完数据，所以利用率接下来又会降下去，等待下一个<code>batch</code>的传入。因此，这个<code>GPU利用率</code>瓶颈在<code>内存带宽</code>和<code>内存介质</code>上以及<code>CPU的性能</code>上面。最好当然就是换更好的四代或者更强大的内存条，配合更好的<code>CPU</code>。</p><p>另外的一个方法是，在<code>PyTorch</code>这个框架里面，数据加载<code>Dataloader</code>上做更改和优化，包括<code>num_workers</code>（线程数），<code>pin_memory</code>，会提升速度。解决好数据传输的带宽瓶颈和GPU的运算效率低的问题。在<code>TensorFlow</code>下面，也有这个加载数据的设置。</p><h2 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h2><pre><code>torch.utils.data.DataLoader(image_datasets[x],                            batch_size=batch_size,                             shuffle=True,                            num_workers=8,                            pin_memory=True)</code></pre><p>为了提高利用率，首先要将<code>num_workers</code>（线程数）设置得体，<code>4</code>,<code>8</code>,<code>16</code>是几个常选的几个参数。本人测试过，将<code>num_workers</code>设置的非常大，例如，<code>24</code>，<code>32</code>,等，其效率反而降低，因为模型需要将数据平均分配到几个子线程去进行预处理，分发等数据操作，设高了反而影响效率。</p><p>当然，线程数设置为<code>1</code>，是单个CPU来进行数据的预处理和传输给<code>GPU</code>，效率也会低。其次，当你的服务器或者电脑的内存较大，性能较好的时候，建议打开<code>pin_memory</code>打开，就省掉了将数据从<code>CPU</code>传入到缓存<code>RAM</code>里面，再给传输到<code>GPU</code>上；为<code>True</code>时是直接映射到<code>GPU</code>的相关内存块上，省掉了一点数据传输时间。</p><h2 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h2><pre><code>dataset = dataset.map(map_func=parse_fn, num_parallel_calls=FLAGS.num_parallel_calls)</code></pre><p>ps： <code>tensorflow</code> 的代码我没有试过</p><h1 id="CPU的利用率问题"><a href="#CPU的利用率问题" class="headerlink" title="CPU的利用率问题"></a>CPU的利用率问题</h1><p>很多人在模型训练过程中，不只是关注<code>GPU</code>的各种性能参数，往往还需要查看<code>CPU</code>处理的怎么样，利用的好不好。这一点至关重要。</p><p>但是对于<code>CPU</code>，不能一味追求超高的占用率。如图所示，对于<code>14339</code>这个程序来说，其<code>CPU</code>占用率为<code>2349%</code>（我的服务器是<code>32</code>核的，所以最高为<code>3200%</code>）。这表明用了<code>24核CPU</code>来加载数据和做预处理和后处理等。其实主要的<code>CPU</code>花在加载传输数据上。此时，来测量数据加载的时间发现，即使<code>CPU</code>利用率如此之高，其实际数据加载时间是设置恰当的<code>DataLoader</code>的<code>20倍</code>以上，也就是说这种方法来加载数据慢<code>20倍</code>。</p><p>当<code>DataLoader</code>的<code>num_workers=0</code>时，或者不设置这个参数，会出现这个情况。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://benpaodewoniu.github.io/images/torch/16_0.png" alt="img"></p><p>下面的数据可以看出，加载数据的实际是<code>12.8s</code>，模型<code>GPU</code>运算时间是<code>0.16s</code>，<code>loss反传</code>和更新时间是<code>0.48s</code>。此时，即使<code>CPU</code>为<code>2349%</code>，但模型的训练速度还是非常慢，而且，<code>GPU</code>大部分是时间是空闲等待状态。</p><pre><code>当 num_workers = 0 时，模型每个阶段的时间统计load data time: 12.8model process time is: 0.159loss backward and para update time : 0.47</code></pre><p>当我将<code>num_workers=1</code>时，出现的时间统计如下，<code>load data time</code>为<code>6.3</code>，数据加载效率提升<code>1</code>倍。且此时的<code>CPU利用率</code>为<code>170%</code>，用的<code>CPU</code>并不多，性能提升<code>1</code>倍。</p><pre><code>当 num_workers = 1 时，模型每个阶段的时间统计load data time: 6.33model process time is: 0.1244loss backward and para update time : 0.45</code></pre><p>此时，查看<code>GPU</code>的性能状态（我的模型是放在<code>1</code>,<code>2</code>,<code>3</code>号卡上训练），发现，虽然<code>GPU(1,2,3)</code>的内存利用率很高，基本上为<code>98%</code>，但是利用率为<code>0%</code>左右。表面此时网络在等待从<code>CPU</code>传输数据到<code>GPU</code>，此时<code>CPU</code>疯狂加载数据，而<code>GPU</code>处于空闲状态。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://benpaodewoniu.github.io/images/torch/16_1.png" alt="img"></p><p>由此可见，<code>CPU的利用率</code>不一定最大才最好。</p><p>对于这个问题，解决办法是，增加<code>DataLoader</code>这个<code>num_wokers</code>的个数，主要是增加子线程的个数，来分担主线程的数据处理压力，多线程协同处理数据和传输数据，不用放在一个线程里负责所有的预处理和传输任务。</p><p>我将<code>num_workers=8,16</code>都能取得不错的效果。此时用<code>top</code>查看<code>CPU</code>和线程数，如果我设置为<code>num_workers=8</code>，线程数有了<code>8</code>个连续开辟的线程<code>PID</code>，且大家的占用率都在<code>100%</code>左右，这表明模型的<code>CPU端</code>，是较好的分配了任务，提升数据吞吐效率。效果如下图所示，<code>CPU利用率</code>很平均和高效，每个线程是发挥了最大的性能。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://benpaodewoniu.github.io/images/torch/16_2.jpg" alt="img"></p><p>此时，在用<code>nvidia-smi</code>查看<code>GPU</code>的利用率，几块<code>GPU</code>都在满负荷，满<code>GPU</code>内存，满<code>GPU</code>利用率的处理模型，速度得到巨大提升。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://benpaodewoniu.github.io/images/torch/16_3.png" alt="img"></p><p>上图中可以看见，<code>GPU</code>的内存利用率最大化，此时是将<code>batch size</code>设置的较大，占满了<code>GPU的内存</code>，然后将<code>num_workers=8</code>，分配多个子线程，且设置<code>pin_memory=True</code>，直接映射数据到<code>GPU</code>的专用内存，减少数据传输时间。<code>GPU</code>和<code>CPU</code>的数据瓶颈得到解决。整体性能得到权衡。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对上面的分析总结一下。</p><p>第一是增加<code>batch size</code>，增加<code>GPU</code>的内存占用率，尽量用完内存，而不要剩一半，空的内存给另外的程序用，两个任务的效率都会非常低。</p><p>第二，在数据加载时候，将<code>num_workers</code>线程数设置稍微大一点，推荐是<code>8,16</code>等，且开启<code>pin_memory=True</code>。不要将整个任务放在主进程里面做，这样消耗<code>CPU</code>，且速度和性能极为低下。</p><p>另外，我在跑我自己代码的时候，发现，耗费时间最多的地方时数据的预处理</p><p>数据预处理</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TrainDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        归一化、数据处理、等等        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用的过程中</p><pre class="line-numbers language-python"><code class="language-python">train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>trainDataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>每一次 <code>for batch_idx, (data, target) in enumerate(train_loader)</code> 都要重新来处理一边数据，比如归一化等，所以，很麻烦。</p><p>所以，我的做法是提前将数据处理好，将处理好的数据放在 <code>csv</code>等格式的文件中，然后直接读取文件就好了。我的代码提升了 <code>50</code> 倍。</p><h1 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h1><ul><li><pre class="line-numbers language-shell"><code class="language-shell">top<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看 <code>cpu</code></li><li>实时查看你的<code>CPU</code>的进程利用率，这个参数对应你的<code>num_workers</code>的设置</li></ul></li><li><pre class="line-numbers language-shell"><code class="language-shell">watch -n 0.5 nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>每<code>0.5秒</code>刷新并显示显卡设置</li><li>实时查看你的<code>GPU</code>的使用情况，这是<code>GPU</code>的设置相关。这两个配合好。包括<code>batch_size</code>的设置。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> CPU </tag>
            
            <tag> pytorch </tag>
            
            <tag> GPU </tag>
            
            <tag> 加速 </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战系列之知乎GPU</title>
      <link href="/2021/08/12/pa-chong-shi-zhan-xi-lie-zhi-zhi-hu-gpu/"/>
      <url>/2021/08/12/pa-chong-shi-zhan-xi-lie-zhi-zhi-hu-gpu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下内容均爬虫获得，如有侵权，请联系博主lry89757，邮箱： <a href="mailto:lry89757@gmail.com" target="_blank" rel="noopener">lry89757@gmail.com</a></p></blockquote><h1 id="实验室一块GPU都没有怎么做深度学习？"><a href="#实验室一块GPU都没有怎么做深度学习？" class="headerlink" title="实验室一块GPU都没有怎么做深度学习？"></a>实验室一块GPU都没有怎么做深度学习？</h1><p>2021-02-23阅读 2500</p><p>这个问题，5年前我也想问。</p><p>还记得 CVPR 2015 开完会回来，感觉大家都在讨论 deep learning，convolutional neural network，当时觉得应该试试。我就用网上开源的 LetNet 在笔记本上训练了一下我们当时自己采集的数据集，结果完爆我们费尽心思手动设计的传统方法。我当时就鼓动我老板，让她给实验室买个带 GPU 的机器。结果她语重心长地说: “你看实验室这些旧电脑，我之前给每一个 PhD 学生都配一台电脑，结果没过多长时间，大家都不用了，只用自己的笔记本，所以不要把钱花在硬件上”。我竟无言以对。。。</p><p>但是 Research 还是要做，我就一狠心买了个 Titan-Z GPU，大概花了博士一个月的工资，然后就有了下面这张图：</p><p><a href="https://imgtu.com/i/fwS3HU" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/12/fwS3HU.jpg" alt="fwS3HU.jpg"></a><br>](<a href="https://imgtu.com/i/fwSJN4" target="_blank" rel="noopener">https://imgtu.com/i/fwSJN4</a>)</p><p><a href="https://imgtu.com/i/fwSyUe" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/12/fwSyUe.jpg" alt="fwSyUe.jpg"></a></p><p>那时候还没有 eGPU，我就自己搞了个解决方案，用一个外置台式机电源带动 thunderbolt to PCIe 的转接器。有了这些“装备”之后，我就开始了调参的不归路。</p><p>比较早入坑，16 年用 MatConvNet 复现了一下 ResNet zhanghang1989/ResNet-Matconvnet，然后用 ResNet 提了下 feature，比较容易水 paper。在 NVIDIA 实习的时候，听说可以自己写 proposal 向 NVIDIA 申请免费的 GPU，之后就每年都申请一块，直到毕业 (链接：GPU Grant Application)。在发了几篇 deep learning 的 paper 之后，我老板也开始换方向了，而且给组里的学弟们买了8卡的GPU Server（当时是我毕业前帮老板挑的机器，可惜自己没有用到）。</p><p>很难想象，当初如果自己没有自费买 GPU，现在我会在哪里，在做什么。如果客观条件不好，尽量想办法克服一下，机会要好好把握</p><h2 id="作者：孔祥勇-https-www-zhihu-com-question-299434830-answer-1138597471"><a href="#作者：孔祥勇-https-www-zhihu-com-question-299434830-answer-1138597471" class="headerlink" title="作者：孔祥勇 https://www.zhihu.com/question/299434830/answer/1138597471"></a><strong>作者：孔祥勇</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1138597471" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1138597471</a></strong></h2><p>我们学科，学校都一般，大部分老师都没经费没这些硬件的。</p><p>我自己实验室是一点点积累买GPU的，拿不到国家课题就做企业课题，然后用来给学生买GPU，电脑，内存，磁盘，保证本科+研究生20多人的计算能力。AI计算的话：一台双卡2080ti主力计算工作站，4台2080或者2070S的GPU，研究生人均一台，本科一个团队一台。平常跑不满，如果有外面合作的学生也会借给他们用，如果有交集，可以科研论文合作。</p><p>下一步打算：对合作型联合的热爱科研的学生，如果自己导师没有出论文经费的我会帮他们出。当然条件也是要求：他除了要完成自己的论文也要多做些工作，如果愿意的话，支持下学生也没问题。如果有这方面需求愿意合作，可以私信我。</p><p>我们主要做医学人工智能，通用AI在技术上一样的，不限制课题。</p><h2 id="作者：时间旅客-https-www-zhihu-com-question-299434830-answer-1138460434"><a href="#作者：时间旅客-https-www-zhihu-com-question-299434830-answer-1138460434" class="headerlink" title="作者：时间旅客 https://www.zhihu.com/question/299434830/answer/1138460434"></a><strong>作者：时间旅客</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1138460434" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1138460434</a></strong></h2><p>实验室没有GPU，也不想花钱租GPU，就只能用CPU了。CPU比GPU慢很多，所以复杂的数据量大的研究是没法做了。那么有没有数据量小，且有一些意义的研究呢？有。</p><p><strong>建议研究一些可解释性的相关问题。</strong></p><p>举一个卷积神经网络的例子，比如这个问题：</p><p>能否对卷积神经网络工作原理做一个直观的解释？<a href="https://www.zhihu.com/question/39022858" target="_blank" rel="noopener">https://www.zhihu.com/question/39022858</a></p><p>大家都是从滤波器的角度解释卷积核，那么怎么能知道是否说的是对的呢？是不是可以取100张猫和100张狗，模型设置为一层feature map为10的3*3卷积+全局pool，训练到过拟合。看看哪几个维度会预测到猫，哪几个维度会预测到狗，再看看这10个卷积核长什么样，分析一下原图过了这些卷积核到底获得了什么特征。</p><p>再比如，CNN在经过图像旋转、平移、放缩等增强方法之后是可以具有相应的不变性的。那么它到底是怎么获得这种不变性的呢？是利用不同的feature map映射到最后输出向量中不同的维度，还是最后会映射到相同维度呢？</p><p>再进一步，行人重识别任务中有很多用度量学习的方法，两张差异很大的图片过同一个模型可以得到比较近似的向量，那么这些模型是怎么获取特征并怎么映射的呢？</p><p>这些问题其实是我一直思考没想出答案，但也没去做实验的。因为我有GPU，平时搭模型、调参的工作做多了，就没有太大动力去研究这些有意思的问题了。</p><h2 id="作者：莫笑傅立叶-https-www-zhihu-com-question-299434830-answer-1693087823"><a href="#作者：莫笑傅立叶-https-www-zhihu-com-question-299434830-answer-1693087823" class="headerlink" title="作者：莫笑傅立叶 https://www.zhihu.com/question/299434830/answer/1693087823"></a><strong>作者：莫笑傅立叶 <a href="https://www.zhihu.com/question/299434830/answer/1693087823" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1693087823</a></strong></h2><p>1.兄弟，赶紧催着老师买一块。</p><p>\2. 要么看老师和计算机学院老师关系如何，直接住对方实验室去。</p><p>\3. 我用过好多网上平台，滴滴云还行，有大企业背书又便宜，还有好多送的活动。</p><p>\4. colab就算了。</p><h2 id="作者：snowhou-https-www-zhihu-com-question-299434830-answer-1231487151"><a href="#作者：snowhou-https-www-zhihu-com-question-299434830-answer-1231487151" class="headerlink" title="作者：snowhou https://www.zhihu.com/question/299434830/answer/1231487151"></a><strong>作者：snowhou</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1231487151" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1231487151</a></strong></h2><p>你这一块卡没有做深度学习不太现实，<strong>最好说服你老师最好买几张卡(1080ti)以上</strong>，毕竟也不是你一个人在用。这是其实是最划算的方式，在网上无论是免费还是付费的资源，终究不是长远之计，而且有一定的使用限制。<strong>争取不到卡的话还是乘早弃坑吧，深度学习不用大量的卡”喂”，很难研究出什么东西。</strong></p><p>[<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/12/fwSJN4.jpg" alt="fwSJN4.jpg"></p><p>分享下我自己的”卡”路，你可以参考下我的”贫民”历程。</p><p>一开始有<strong><em>4块1080\</em></strong>，和师兄们一起用，当时刚开始入门，也就跑下 cs231n 和当时还是caffe 版本的 R-CNN，电脑系统太老了caffe总是出问题，也在网上用过服务器(国内付费的，谷歌云的300美金，Colab 等)，也就随便跑了跑。后来随着 detectron 等的开源，发现 1080 显存太小了，而且速度太慢，只能跑 VOC，跑 COCO 不太现实，一度很奔溃，想着是不是要换个方向。</p><p>以后对老师软磨硬泡，加了台 <strong>双2080ti</strong>  的机器，终于可以跑 COCO 了，虽然训练时间还是略长，不过已经在接受范围内了。</p><p>后来机缘巧合下发现了些免费的平台(百度 AIStudio等)，第一次用到 <strong>V100</strong> ，爽过吸大麻。多注册了几个账户，终于不在担心算力的问题，就这样开始了升级打怪之路，跑跑论文代码，打打比赛，好多任务都可以并行展开了，这时候就相当舒服了，没有了算力的约束，成长起来也是很快的。假如没有了这些免费平台，怕不是要在入门的地方原地踏步了。</p><p>其实缺少算力还可以去企业实习，不过如果基本的 1080ti 都用不上，大概门都入不了，公司估计也进不去。所以还是最开始的话，<strong>尽早联合你同届同学说服老师买卡，不然还是乘早弃坑。自己学(无人指导) + 没卡 = 天坑 ️，切记！</strong></p><h2 id="作者：艾力克斯Alex-https-www-zhihu-com-question-299434830-answer-1016932439"><a href="#作者：艾力克斯Alex-https-www-zhihu-com-question-299434830-answer-1016932439" class="headerlink" title="作者：艾力克斯Alex https://www.zhihu.com/question/299434830/answer/1016932439"></a><strong>作者：艾力克斯Alex</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1016932439" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1016932439</a></strong></h2><p>上学期做的computional vision  远程连接学校linux装不了tensorflow，Google Colab尝试了两天也没设置好</p><p>然后心一横 我就用我的四核8GBMacBook慢慢跑吧 train一次一天 validate 6个小时，我就这样坚持了一个月把作业写完了。</p><h2 id="作者：视学算法-https-www-zhihu-com-question-299434830-answer-1071679101"><a href="#作者：视学算法-https-www-zhihu-com-question-299434830-answer-1071679101" class="headerlink" title="作者：视学算法 https://www.zhihu.com/question/299434830/answer/1071679101"></a><strong>作者：视学算法</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1071679101" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1071679101</a></strong></h2><p>对初学者来说CPU足以。以下几点：</p><p>1、先把CPU利用好：其实对于很多初学者来说能把OpenMPI配置好，多线程利用起来，C底层程序用Intel MKL编译(需要Intel CPU)，基本上可以带来的效率提升可以近似于用GPU。</p><p>2、然后利用好你自己的时间: 貌似现在道听途说一般的结论是GPU比CPU提速10倍左右。大家想想，训练一个模型，本来要CPU跑10个小时，结果买了GPU只用1一个小时，但是节约来的9个小时里面一半浪费在了看知乎上（说你呢！），另一半浪费在了刷微信上。本屌最近跑些NLP方面的东西，东西不是特别大，Ubuntu笔记本装了OpenMPI可以四个线程一起跑，也比单核CPU快一倍左右，基本上白天先把模型设置好，跑上3~4个Epoch看看效果，然后在晚上睡觉之前开始跑个20-30个循环，第二天早上怎么也都好了。</p><p>3、最后设计好数据结构: 另外其实数据预处理的好，用简便的方法存在内存里面，也是可以提升不少效率的。</p><h2 id="作者：runner-time-https-www-zhihu-com-question-299434830-answer-1099500820"><a href="#作者：runner-time-https-www-zhihu-com-question-299434830-answer-1099500820" class="headerlink" title="作者：runner time https://www.zhihu.com/question/299434830/answer/1099500820"></a><strong>作者：runner time</strong> <strong><a href="https://www.zhihu.com/question/299434830/answer/1099500820" target="_blank" rel="noopener">https://www.zhihu.com/question/299434830/answer/1099500820</a></strong></h2><p>实验室连显卡都没有就说要搞深度学习？那我看你们导师也是脑门一拍，然后随手搞本教科书胡搞乱搞，你觉得这样下去能搞出什么名堂？</p><p>不如买块游戏显卡打游戏去。</p><p>哦，其实游戏显卡也是可以搞深度学习的，图灵架构显卡的CUDA计算力高达7.0，只要1500元一块，你值得拥有！</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> GPU </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora集成PicGo图床服务</title>
      <link href="/2021/08/10/typora-ji-cheng-picgo-tu-chuang-fu-wu/"/>
      <url>/2021/08/10/typora-ji-cheng-picgo-tu-chuang-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>给大家推送一波福利，新版本的 Markdown 写作利器 ——<strong>Typora</strong>，集成了 PicGo 服务，文章插入图片即可通过 PicGo 服务上传到图床内。废话不多说，直接开门见山！</p><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>安装 PicGo 软件，接着图床的搭建，并进行相关的配置。</p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>注意：PicGo 软件的版本要求 2.2.0 及以上</p><p>打开 PicGo 软件的设置界面，进行 Server 的设置：</p><p>PicGo 设置 -&gt; 设置 Server，开启 Server，监听地址不用进行更改，监听端口的值设置为 36677，这个值的获取在 Typora 软件中，下面会提到：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316220909.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316220909.png" alt></a></p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>注意：Typora 软件的版本要求 0.9.84 及以上</p><p>接下来进行 Typora 的设置，Typora 的安装我就不说了，相信大家都会安装，打开 typora 软件，依次打开步骤为：文件 -&gt; 偏好设置 -&gt; 图像，具体配置参考下面的图中的配置：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316222009.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316222009.png" alt></a></p><h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><p>进行验证，看 Typora 是否可以成功的通过 PicGo 上传到图床</p><p>点击第三步图中的验证图片选项，当成功后会出现下面图中的情况</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316222349.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200316222349.png" alt></a></p><p>图中可以看出监听地址以及端口号，这个需要与 PicGo 的 Server 服务中的监听地址以及端口号一致，否则上传会失败！</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>有三种方法</p><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p>采用拖拽的方法，直接将本地图片拖拽到文章中，即可进行上传</p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>采用插入本地图片的方法，使用快捷键 <strong>Ctrl + Shift + I</strong>，选择图片路径即可</p><h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><p>采用截图软件，我推荐大家一款软件 ——<strong>Snipaste</strong>，可以快速截图并进行粘贴，快捷键 <strong>F1</strong>，进行截图，<strong>Ctrl + C</strong>，进行复制，<strong>Ctrl + V</strong>，进行粘贴，可以直接粘贴到文章内，然后就自动上传到图传内，很方便，还有很多好用的截图软件，我就不在这里说了</p><p>如果你在电脑上登录 QQ，也可以通过快捷键 <strong>Ctrl + Alt + A</strong>，进行快速截图并进行复制粘贴，直接粘贴到文章中即可。</p><h1 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h1><h2 id="错误一：-Failed-to-fetch"><a href="#错误一：-Failed-to-fetch" class="headerlink" title="错误一： Failed to fetch"></a>错误一： Failed to fetch</h2><p>这个问题一般是因为端口不一致而导致的，Typora 监听的端口号为 36677，如何解决呢？</p><p>解决办法：</p><p>打开 PicGo 软件，然后依次打开 <code>PicGo设置</code>👉<code>设置Server</code>，查看当前的端口号，如果不是 36677，则将监听端口号修改为 36677 即可。</p><p>不过有的时候，我们的老朋友 Failed to fetch 还是如约而至，打开端口设置一看，怎么变成了 366771？？？？</p><p>问题在于端口冲突，如果你打开了多个 picgo 程序，就会端口冲突，<strong>picgo 自动帮你把 36677 端口改为 366771 端口</strong>，导致错误。log 文件里也写得很清楚。</p><p><code>解决方法</code>：<strong>先把 picgo 中的端口设置改回 36677，然后退出所有 picgo 程序</strong>，再使用 typora 上传功能（会自动启动 picgo 程序）</p><h2 id="错误二：-“success”-false"><a href="#错误二：-“success”-false" class="headerlink" title="错误二：{“success”,false}"></a>错误二：{“success”,false}</h2><p>这个错误相信也有很多小伙伴遇到了，原因是<strong>文件名冲突</strong>了，如果你上传过一张 image1.jpg 的图片，再上传名称一样的图片就会失败，log 日志中也会写道。</p><p>办法也很简单，打开 picgo 设置，将【<strong>时间戳重命名】打开</strong>即可，再次上传即可成功！另外还有一件事就是目前PicGo.app不支持上传网络图片，所以我们目前只能上传本地图片(我被<a href="https://github.com/Molunerfinn/PicGo/issues/432" target="_blank" rel="noopener">这个</a>坑死了）。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/moisten-the-rain/image01/raw/master/img/20210810183614.jpg" alt></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200501114637.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200501114637.png" alt></a></p><hr><p>友情提醒：</p><p>PicGo 的日志 (log) 文件是个好东西，如果出现报错，图片上传不成功的情况，大家可以打开日志看看，根据日志输出，然后自己尝试解决，百度是个好东西！😎😎😎</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200501114257.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200501114257.png" alt></a></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/2020-05-01_11-43-27.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/2020-05-01_11-43-27.png" alt></a></p><hr><p>参考：<a href="https://zhuanlan.zhihu.com/p/114175770" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/114175770</a></p><blockquote><p><strong>文章作者:</strong> <a href="mailto:undefined" target="_blank" rel="noopener">Yafine</a></p><p><strong>文章链接:</strong> <a href="https://yafine-blog.cn/posts/4e9b.html" target="_blank" rel="noopener">https://yafine-blog.cn/posts/4e9b.html</a></p><p><strong>版权声明:</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="https://yafine-blog.cn/" target="_blank" rel="noopener">过客～励む</a>！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> markdown </tag>
            
            <tag> 码云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次反挖矿病毒（转）</title>
      <link href="/2021/08/10/ji-yi-ci-fan-wa-kuang-bing-du-zhuan/"/>
      <url>/2021/08/10/ji-yi-ci-fan-wa-kuang-bing-du-zhuan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://home.cnblogs.com/u/wq242424/" target="_blank" rel="noopener">丨o聽乄雨o丨</a></p><p>出处：<a href="http://www.cnblogs.com/wq242424/" target="_blank" rel="noopener">http://www.cnblogs.com/wq242424/</a></p><p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。</p></blockquote><p>这两天实验室电脑中度了，无故被占用50%cpu挖矿，且运行任何程序都会killed。</p><p>运行原理类似于，自动网上下载挖矿程序，然后rm删除程序，让你无从找到程序，有时候还会用ld.so.preload伪装，使你看不到占用资源的挖矿程序名称，在试了各种办法后，最有效的如下：</p><p><strong>一、杜绝恶意IP访问</strong></p><p>执行netstat查询外部ip，</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ netstat -ant<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现来自于荷兰的一个ip：</p><pre class="line-numbers language-shell"><code class="language-shell">1 45.153.184.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>禁用ip：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ iptables -I INPUT -s  45.153.0.0/16 -j DROP2 # 保存规则3 $ iptables-save > /etc/sysconfig/iptables4 # 使规则生效5 $ iptables -L<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就禁止了此ip的访问。</p><p>有时，黑客会利用自启动程序在开机时对iptables进行修改，所以需要事先对iptables进行清空，在此，记录下重写iptables的过程。</p><p>清除所有规则：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ iptables -F2 $ iptables -X3 $ iptables -Z<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加一些常用端口：</p><pre class="line-numbers language-shell"><code class="language-shell"> 1 #允许本地回环接口(即运行本机访问本机) 2 $ iptables -A INPUT -i lo -j ACCEPT 3 # 允许已建立的或相关连的通行 4 $ iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT 5 #允许所有本机向外的访问 6 $ iptables -A OUTPUT -j ACCEPT 7 # 允许访问22,21,20,80端口 8 $ iptables -A INPUT -p tcp --dport 22 -j ACCEPT 9 $ iptables -A INPUT -p tcp --dport 21 -j ACCEPT10 $ iptables -A INPUT -p tcp --dport 20 -j ACCEPT11 $ iptables -A INPUT -p tcp --dport 80 -j ACCEPT12 # 允许127.0.0.113 $ iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT14 $ iptables -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEP15 #16 $ iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT17 $ iptables -A OUTPUT  -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT18 #允许ping19 $ iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT20 #运行自己指定的网段21 $ iptables -A INPUT -p tcp -s 172.16.0.0/16 --dport 22 -j ACCEPT22 #禁止其他未允许的规则访问23 $ iptables -A INPUT -j REJECT  #（注意：如果22端口未加入允许规则，SSH链接会直接断开。）24 $ iptables -A FORWARD -j REJECT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看网络通信，查找异常IP：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ netstat -ant 或者 netstat -antp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/fJmhB6" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fJmhB6.png" alt="IP"></a></p><p>禁止挖矿网段：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ iptables -I INPUT -s 198.251.0.0/16 -j DROP2 $ iptables -I INPUT -s 45.153.0.0/16 -j DROP3 $ iptables -I INPUT -s 54.38.193.170 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只允许内网网段：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ iptables -A INPUT -p tcp -s 172.16.0.0/16 --dport 22 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此，规则就重写完成，记得保存规则生效：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ iptables-save > /etc/sysconfig/iptables2 $ iptables -L<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置iptables开机启动：</p><pre class="line-numbers language-shell"><code class="language-shell">1 $ chkconfig --level 345 iptables on2 $service iptables save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>二、删除挖矿病毒源程序</strong></p><p>可以参考<a href="https://blog.csdn.net/weixin_45284355/article/details/110728620" target="_blank" rel="noopener">https://blog.csdn.net/weixin_45284355/article/details/110728620</a> 这篇博客，跟我遇到的问题几乎一样。</p><p>在 /bin/ 下找到 sysdrr 挖矿源病毒程序，并删除！</p><p>同时也可以使用 find / -name sysdrr 全盘查找源病毒程序，并删除！</p><p>在 /etc/cron.monthly/ , /etc/cron.weekly/ , /etc/cron.daily/ , /etc/cron.hourly/ 这些定时目录里找到sync程序并删除！</p><p>用 crontab -l 查看定时任务并删除所有异常定时任务。</p><p>上述sysdrr和sync直接删除不了，就需要先用 chattr -R -i /bin/sysdrr 和 chattr -R -i /bin/sync ，在用 rm -f 删除！</p><p>这样就解决了挖矿病毒的问题。</p><p>至此，我们就成功啦！</p>]]></content>
      
      
      <categories>
          
          <category> 挖矿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比特币 </tag>
            
            <tag> 挖矿 </tag>
            
            <tag> 反挖矿 </tag>
            
            <tag> 挖矿病毒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EIP-1559只是开始（转）</title>
      <link href="/2021/08/10/eip-1559-zhi-shi-kai-shi/"/>
      <url>/2021/08/10/eip-1559-zhi-shi-kai-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="EIP-1559只是开始"><a href="#EIP-1559只是开始" class="headerlink" title="EIP-1559只是开始"></a><strong>EIP-1559只是开始</strong></h2><p>以太坊的伦敦升级于8月4日完成，其中包括了著名的EIP-1559。在EIP-1559推出至今，不到4天，已经烧毁了16,230.38个ETH（截止到写稿时），价值接近5,000万美元。当真实的ETH被烧毁时，人们终于感受到EIP-1559的燃烧能量，看到每天都会有大量的ETH被烧掉。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/bd0493633e96ae3d431424151d76e4fb.png" alt="oh">)（EIP-1559推出后烧毁的ETH总量，Ultrasound.money)</p><p>当然，只有EIP-1559无法导致ETH的通缩。当前每天ETH的新增量大约为13,000个，EIP-1559启动后第一天以太坊烧毁的ETH量为4791.5个。EIP-1559大约使ETH新增率降低30%左右（当然ETH的销毁量也会根据网络的使用情况发生变化，这里只是根据当前情况的大概预估）</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/1ab262af5685209692bdd1606447b82c.png" alt="my">)（EIP-1559推出之后第一天烧毁的ETH量，etherchain.org)</p><p>蓝狐笔记在之前的文章《<a href="http://mp.weixin.qq.com/s?__biz=MzAwOTk1NjM0NQ%3D%3D&chksm=9b551eadac2297bbf939efb5ff7d33c98703a8f0ac52f5e715796747f052abb857b8a3f3ddea&idx=1&mid=2247491643&scene=21&sn=1c03eba5cd5a2d1fc9bff0024c2c8270#wechat_redirect" target="_blank" rel="noopener">EIP-1559与以太坊之路</a>》中也提到，未来半年多，以太坊有三件重要的事情，其中影响最大的还是POS的融合，它对以太坊和ETH的影响会远超EIP-1559，也就是说，EIP-1559只是拉开大幕，大戏还在路上。PoS的融合会直接改变ETH的性质。</p><h2 id="PoS融合才是大戏"><a href="#PoS融合才是大戏" class="headerlink" title="PoS融合才是大戏"></a><strong>PoS融合才是大戏</strong></h2><p>减半效应的概念来自于比特币每四年一次的减半，每次减半导致其新增发行的大幅下降。当新增量下降，而需求量保持不变或者上升时，就会推动价格的上升。关于BTC的减半，可以参考蓝狐笔记之前文章《<a href="http://mp.weixin.qq.com/s?__biz=MzAwOTk1NjM0NQ%3D%3D&chksm=9b56e2c2ac216bd4a77695b9b7c5b21283976f2e54697d875dbfae1ae195d853d9f510a8a083&idx=1&mid=2247490644&scene=21&sn=b99c5afae4c6741dd1dd39fe80f4128e#wechat_redirect" target="_blank" rel="noopener">比特币的减半效应与ETH2.0的质押效应</a>》、《<a href="http://mp.weixin.qq.com/s?__biz=MzAwOTk1NjM0NQ%3D%3D&chksm=9b56e920ac216036da9f4b0a9b161122da35627bf6a5328be972d28f5725f300f61ea4c4d74a&idx=1&mid=2247489462&scene=21&sn=dba87af98559637ed9e71974e23cbd7a#wechat_redirect" target="_blank" rel="noopener">BTC的减半效应：如何计入价格？</a>》。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/8baf69163fdeaa486a398c22338a8550.png" alt="god">)（关于BTC减半效应的形象展示，来源于MoonCapital)</p><p>这在比特币的历史上曾经多次得到证明。如今，以太坊社区中的一部分人也将减半效应概念运用到以太坊上，而且相对于btc的减半来说，是三倍减半。那么，如何理解以太坊的三倍减半概念？</p><h2 id="三倍减半"><a href="#三倍减半" class="headerlink" title="*三倍减半"></a>*三倍减半</h2><p>目前ETH年增发率大约为4%，每年新增大约460万多个ETH，平均每日新增大约13,000个左右，假设PoS新增发行0.4%（根据质押率会有变化），平均日新增大约13,00多个ETH。也就是说，按照当前每日新增为13,000个ETH，减半之后为6,500个ETH，第二次减半则3,250个ETH，第三次减半为1,625个ETH。从13,000到1,625，一共缩减87.5%，接近于90%的缩减，大约相当于3倍减半。（注：这里的具体数字不是精确数字，根据具体情况，会有一定的上下浮动，主要是为了说明量级）</p><p>当每天新增ETH仅为1,625个左右时，即便是如今的日烧毁量也超过这个日新增量，这会导致ETH进入通缩的状态。</p><p>BTC的总量是恒定的，不会通缩。而ETH随着PoS的到来，有很大概率进入通缩的状态。这导致ETH会变得越来越稀缺。从这里也可以看出，BTC和ETH经济机制的不同。</p><p>当然，需要着重强调的是，这里无法评判谁的经济政策更好。如果从长远生态发展看，不一定通缩就一定是好的，一个越来越稀缺的ETH是否是好事，目前还不能下定论，这个需要辩证来看问题。</p><p>不过，仅从供需的市场角度，这会导致对ETH的需求不断增加，供应的减少会带来压力，会导致ETH价值上涨。一个通缩的ETH会面临越来越大的需求竞争。这个竞争不仅来自于DeFi的锁定，也来自于PoS的质押需求。</p><h2 id="PoS质押"><a href="#PoS质押" class="headerlink" title="*PoS质押"></a>*PoS质押</h2><p>截止到蓝狐笔记写稿时为止，仅仅是8个多月的时间，ETH2.0质押合约中存入的ETH数量高达6,548,125个ETH，占据ETH总量的5.6%左右。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/48074e0aa6ee539d0834ca45a46e6ca3.png" alt="az">)（存入ETH2.0质押合约的ETH量增长趋势，beaconcha.io)</p><p>随着后续PoS融合，随着矿工的迁移，预计质押的PoS还会大幅度上升。根据蓝狐笔记的预估，未来存入ETH2.0质押合约中的ETH有机会达到2,000到3,000万个以上，甚至更高，占据ETH总量20%以上。（注：这里只是预估，还不是现实）</p><p>在这种情况下，从流通市场中，会有大量的ETH被移走，一是每天有真实的ETH被烧毁，二是有越来越多的ETH进入到ETH2.0的质押合约，以赚取ETH的收益。</p><h2 id="DeFi的锁定"><a href="#DeFi的锁定" class="headerlink" title="*DeFi的锁定"></a>*DeFi的锁定</h2><p>截止到蓝狐笔记写稿时，目前DeFi中锁定的ETH超过950万个，超过ETH流通量的8%，预计锁定在DeFi中的ETH很快会突破1000万个。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/img_convert/fb2d2815f4fa8f2cf9e6440d3c03705b.png" alt="%%%">)（ETH在DeFi中的锁定量,DeFiPulse)</p><p>随着后续DeFi协议的发展，尤其是借贷、DEX、衍生品等领域的继续发展，DeFi领域对ETH的需求也是逐步增加的。未来DeFi领域对ETH的需求也有可能会突破2000万个。（注：这只是预估，并非发生的现实）</p><p>那么，未来PoS+DeFi大概会锁定市场中接近40-50%的ETH，甚至更高的比例，而每天的新增发行量有可能小于每日的烧毁量。即便是PoS+DeFi的锁定量不变，整个市场上流通的ETH也会越来越少。</p><h2 id="ETH走向通缩是大概率事件"><a href="#ETH走向通缩是大概率事件" class="headerlink" title="ETH走向通缩是大概率事件"></a><strong>ETH走向通缩是大概率事件</strong></h2><p>如果以太坊PoS融合顺利，在这个前提下，考虑到其年新增发行率的下降以及ETH烧毁量的情况，ETH有很大的概率走向通缩，而通缩的ETH会对其供求关系产生极其重要的影响。与此同时，PoS的机制导致对ETH的质押需求在增加，加上DeFi协议对ETH的需求也在增长，未来半年之后的ETH可能是完全不同的ETH。</p><p>当然，未来政策层面的变化，有可能会对PoS产生一些不利的影响，但长远看，如果这个影响只是降低其收益率，并不是不让它存在，那么，从这个角度，虽然会面临阻力，但趋势还会继续。</p><blockquote><p>本文转载自：<a href="https://blog.csdn.net/weixin_44383880" target="_blank" rel="noopener">巴比特资讯</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 挖矿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比特币 </tag>
            
            <tag> 以太坊 </tag>
            
            <tag> 挖矿 </tag>
            
            <tag> EIP-1559 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊GAS费爆棚，矿工疯狂扫货高端笔记本挖矿（转）</title>
      <link href="/2021/08/10/yi-tai-fang-gas-fei-bao-peng-kuang-gong-feng-kuang-sao-huo-gao-duan-bi-ji-ben-wa-kuang/"/>
      <url>/2021/08/10/yi-tai-fang-gas-fei-bao-peng-kuang-gong-feng-kuang-sao-huo-gao-duan-bi-ji-ben-wa-kuang/</url>
      
        <content type="html"><![CDATA[<p>一句话，市场似乎已经到了“闭眼梭哈也致富”的阶段。</p><p>很多挖矿或者使用Uniswap等需要用到以太坊链上转账的投资人发现，现在GAS费太贵了，有多贵呢？一个简单的交易就需要几百块，复杂的合约交互，比如挖个矿，没有几千块是不行了。DeFi，普通人彻底玩不起了。羊毛也不舍得薅了。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy8xVk8yRlNpY1JHVlJOa0NxSld1ZnhyRkl5TFRBdUFpYUJaRlBXREF4clBVSURqeFVLNWQwNUhNSHhHdVVxYk15MXo3U1FXY0JGMXZxbm0wQ3Z3ZFRtQmRnLzY0MA?x-oss-process=image/format,png" alt="……"></p><p>▲以太坊相关数据（6日下午2点，OKlink）</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy8xVk8yRlNpY1JHVlJOa0NxSld1ZnhyRkl5TFRBdUFpYUJaNGR6NGt5ZXVkMjk1dXhUaFZlSWlhQ1VJaGljOGlidlNBUzFTY3JCdVd5RmdpY00zaWFyaWE4cTJPUHlRLzY0MA?x-oss-process=image/format,png" alt="Gwei"></p><p>▲某挖矿项目的GAS费用，487GAS等于近千元人民币</p><p>据Tokenview数据显示，2月5日以太坊链上手续费总和达到12827.06 ETH（约为3018.9千万美元），单日GAS均价为150 GWei，单笔交易手续费平均值为24.7美元，属于近两年的最高位。</p><p>行业大V“比特币超级君”就说：“以太坊高昂的手续费正在驱赶绝大多数defi矿工。”</p><p>那什么时候GAS便宜呢？看下图。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy8xVk8yRlNpY1JHVlJOa0NxSld1ZnhyRkl5TFRBdUFpYUJaS25aVFpXN2phWnl0SFozV2ljV1ZBMGNhbWhOS2lhdlJ2ZEI5clRJejVzTzFZV1ZNSVhxaWNuS21RLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>通过数据可以发现，整体而言，<strong>一周的下午1点到3点这个时间段的GAS费用最便宜</strong>，只有80Gwei。凌晨、午夜的费用相对最贵，可以轻松翻越400Gwei。</p><p>所以，如果你要通过DeFi应用交易，或是要去某个未发币的应用里薅羊毛，这个图可以让你一眼看GAS费用最“划算”的时间点。</p><p>当然，这个数据是动态的，变化非常快，更多实时数据可以通过一个叫做gasnow的网站查看，这是以太坊最大的矿池星火矿池做的小网站，它分析处理了以太坊的链上数据后给出了针对GAS费用的预测。网站如下，可点击收藏：<a href="https://gasnow.sparkpool.com/" target="_blank" rel="noopener">https://gasnow.sparkpool.com/</a></p><h2 id="1"><a href="#1" class="headerlink" title="1"></a><strong><em>1</em></strong></h2><h2 id="DeFi疯狂，以太坊矿工扫货笔记本挖矿"><a href="#DeFi疯狂，以太坊矿工扫货笔记本挖矿" class="headerlink" title="DeFi疯狂，以太坊矿工扫货笔记本挖矿"></a>DeFi疯狂，以太坊矿工扫货笔记本挖矿</h2><p>数据显示，以太坊矿工在一小时内赚了350万美元，这是迄今为止最高的每小时采矿收入。</p><p>但是，众所周知，因为疫情等原因，2020年以来高端显卡的供货不足，有钱也买不到。随着ETH价格突破前高，矿工们已经把注意力投降向了游戏本，尤其是搭载了最新最强显卡的高端机型。</p><p>最近，鱼池就做了一个热门小视频，主持人拿着一台搭载了NVIDIA3060显卡的华硕笔记本去星巴克薅羊毛。数据显示，该游戏本可提供40MH/S的算力，结合难度和币价，日收益约23元，260天回本，年化140%的回报率。电费白嫖。</p><p>这不是段子。目前，确实有一部分矿工在扫货笔记本，他们要么把笔记本肢解，取出显卡重新组装为矿机，要么直接安上软件挖矿。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy8xVk8yRlNpY1JHVlJOa0NxSld1ZnhyRkl5TFRBdUFpYUJaWjVGUEoxSFpYd25QMUN4VFMzc210NktueFdDeE1MTko1aE5yVWt5UWljbHRjYmprYlpQVE1pYWcvNjQw?x-oss-process=image/format,png" alt="走起！！"></p><h2 id="2"><a href="#2" class="headerlink" title="2"></a><strong><em>2</em></strong></h2><h2 id="以太坊拥堵，交易所公链和二层网络的机会来了？"><a href="#以太坊拥堵，交易所公链和二层网络的机会来了？" class="headerlink" title="以太坊拥堵，交易所公链和二层网络的机会来了？"></a>以太坊拥堵，交易所公链和二层网络的机会来了？</h2><p>以太坊堵了，GAS费贵了，对谁最有利？无疑是以“太坊杀手”，比如Cardano、Polkadot、Cosmos等。</p><p>结合今天的市场热点，币安的bsc，火币的heco，ok交易所的okchain，这些交易所公链可能也将获得市场青睐。</p><p>另外，值得期待的就是Layer2（二层网络）类项目。但不得不说，Layer2的目前还难当大任，炒作噱头超过了实际的价值。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL3N6X21tYml6X2dpZi9RamNKakQ1VVJWa1Vhb0Q2TXdpY2pOSlMxbWlhaWJYaWI3eDRyQWh4Wm5KRWNaRXNxdWxNTjJsS0xjQ3hOR1N0UWFNQ2tGR3JReUZUVFJpYmtCb2FEWXJoYzJBLzY0MA?x-oss-process=image/format,png" alt="走好！"></p><blockquote><p>本文转载自：<a href="https://blog.csdn.net/weixin_44383880" target="_blank" rel="noopener">巴比特资讯</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 挖矿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比特币 </tag>
            
            <tag> 以太坊 </tag>
            
            <tag> 挖矿 </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梅西，诺坎普永远是你的家</title>
      <link href="/2021/08/09/mei-xi-nuo-kan-pu-yong-yuan-shi-ni-de-jia/"/>
      <url>/2021/08/09/mei-xi-nuo-kan-pu-yong-yuan-shi-ni-de-jia/</url>
      
        <content type="html"><![CDATA[<h5 id="事先声明"><a href="#事先声明" class="headerlink" title="事先声明"></a>事先声明</h5><p><em>这是本人的博客，本人为自己留下的互联网自留地，我想写什么就写什么，这里面可能有很多很气愤，发泄的话，但是轮不到别人指责。以下文章布局很乱，本人想到什么写什么</em></p><h2 id="原本这是一个很美好的夏天"><a href="#原本这是一个很美好的夏天" class="headerlink" title="原本这是一个很美好的夏天"></a>原本这是一个很美好的夏天</h2><p>原本这是一个很让人开心的夏天，多年国家队无冠之后，老板以绝对核心、各项MVP的身份捧得了美洲杯。有力击碎了所谓“体系球员”、“国家队短板”的称号。今年也被称为罗粉“全完蛋了”的一年，老板今年竞争对手全部拉跨，自身又有绝对亮眼的表现，马上就7座金球奖加身。所谓的把金球数印在某人球衣后面🤣。一身轻松、度假归来的老板本来打算降薪50%，同意与巴塞罗那俱乐部签订续约，可谁曾想，巴萨最后关头居然突然变卦，因为CVC而无法完成与梅西的续约。这显然是完全无法让球迷、让梅西接受的一件事情。</p><h2 id="队史最佳？巴萨以前怎么对小罗、克圣，如今怎么对梅西"><a href="#队史最佳？巴萨以前怎么对小罗、克圣，如今怎么对梅西" class="headerlink" title="队史最佳？巴萨以前怎么对小罗、克圣，如今怎么对梅西"></a>队史最佳？巴萨以前怎么对小罗、克圣，如今怎么对梅西</h2><hr><p><strong><em>“受任于败军之际，奉命于危难之间，尔来二十有一年矣”</em></strong></p><p>为俱乐部奋斗21年的队长，30多座冠军，自家青训出来的历史最佳，梦三王朝的绝对功臣，大厦将倾之力挽狂澜。即使如此，仍然虚怀若谷，待人接物谦虚亲和，甚至配不上一个体面的送别……我不知道这是一家怎样的俱乐部，那些年的四亿妄为、管理层的昏庸、高薪资（即使已经答应了降薪50%）、更新换代都可以作为借口，但我无法忍受这么一种送别。仅仅一个人的发布会，坐着自己的几名队友、几家媒体。由梅西自己在那里抽泣着讲了一个多小时。</p><p><strong>一个非常简单的声明，就这么让生活21年的队史最佳离开，还是被蒙骗的离开，被当作博弈的棋子，直到最后彻底用完剩余价值才被扔掉</strong></p><p>以下两段来自知乎：</p><blockquote><p>梅西是一个善良、真实的人，他没有隐藏自己的任何感情，他到最后也深爱着俱乐部，为了俱乐部的脸面，他给拉狗留足了余地，实际上梅西已经表达了被欺骗被拖延的事实，但却用了最温柔的方式。梅西甚至表达了他同意一半降薪后可以继续让步的决心，只是拉狗没有再提进一步的要求。</p><p>因为这个靠着梅西上位的演技派主席，他低估了梅西对俱乐部的爱，他整个剧本中唯一没有料到的就是梅西会立即同意降薪一半，甚至表达出只要能留下可以继续舍弃的决心！</p></blockquote><blockquote><p>梅西：之前他们要求让我降薪50%，我同意了，他们再没别的要求。但最终没法续约。</p><p>拉波尔塔：嘿嘿，降薪50%只是想逼走你的噱头，没想到这傻小子真同意….</p></blockquote><h2 id="他们只是不要我了"><a href="#他们只是不要我了" class="headerlink" title="他们只是不要我了"></a>他们只是不要我了</h2><hr><p>曾经梅西曾接受采访说：</p><p><a href="https://imgtu.com/i/fGSCT0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/09/fGSCT0.jpg" alt></a><br><a href="https://imgtu.com/i/fGS9wq" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/09/fGS9wq.jpg" alt></a></p><p>如今他们真的不要老板了</p><p>](<a href="https://imgtu.com/i/fGw6FH" target="_blank" rel="noopener">https://imgtu.com/i/fGw6FH</a>)</p><p><a href="https://imgtu.com/i/fGSR7q" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/09/fGSR7q.jpg" alt></a></p><p>他们让老板独自一人完成了发布会（拉波尔塔想要和老板一起开，我只想说这个人真是<del>厚颜无耻</del>），会上他没有说任何人的不是，只是表达了对这家俱乐部的感激，表达了自己的不舍，以及表达了自己的眼泪：</p><p>[<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fGw6FH.jpg" alt></p><h2 id="我不担心他不会创造奇迹，但真希望那抹颜色是红蓝，或是蓝白"><a href="#我不担心他不会创造奇迹，但真希望那抹颜色是红蓝，或是蓝白" class="headerlink" title="我不担心他不会创造奇迹，但真希望那抹颜色是红蓝，或是蓝白"></a>我不担心他不会创造奇迹，但真希望那抹颜色是红蓝，或是蓝白</h2><hr><blockquote><p>04/05赛季，那个在小罗背上欢快庆祝进球的少年，</p><p>05/06赛季，对铁血蓝军马踏连营，助球队再夺欧冠， </p><p>06/07赛季，国家德比帽子戏法震惊世界，</p><p>从此之后，受任于败军之际，奉命于危难之间，疾风知 劲草，逆境见英雄！ 08/09赛季，决战罗马，终于登顶欧陆之巅。 </p><p>大鹏一日因风起，抟摇直上九万里， 六冠王，“梦三队之剑”，</p><p>年度91进球，突破人类历史极限， </p><p>金球奖四连冠， </p><p>MSN组合，三剑客大杀四方，第五座金球奖， </p><p>挽狂澜于即倒，扶大厦之将倾，第六座金球奖，足坛首次劳伦斯大奖……</p><p>出场778次，打进672球，贡献305次助攻。 4届欧冠冠军，10次西甲冠军，7次国王杯，8次西班牙超级杯，3次国际足联俱乐部世界杯。 6座金球奖，6次世界足球先生，6次欧冠金靴，6次欧洲金靴，8次西甲金靴，3届欧足联最佳球员…… </p><p>十余年光阴如白驹过隙转瞬即逝，从容颜青涩的少年，如今冠盖满京华，早已一身荣冕， 无数次被国际足坛无数权威人士认可、多家权威媒体论证，赞誉为GOAT（历史最佳）球员，超越 无数殿堂级前辈传奇巨星，进入和贝利、马拉多纳并肩的足坛最伟大巨星之列。 不止是独步天下的球技，一直谦逊低调，虚怀若谷，忠实家庭，关爱队友，热爱国家，从未个人品 行方面的不端行为，虽然论年收入，早已经铸就了一个足坛第一体坛前三的商业帝国，一家五口过 的却是最寻常普通不过的中产生活。 因此，从来不止是巴萨球迷，不止是阿根廷球迷，而是在世界各国各地，都有无数拥趸。不知多少 人从来并不喜欢巴萨，也对阿根廷国家队完全无感，他们仅仅是梅西的喜爱者。</p></blockquote><p>今年夏天，年轻化的阿根廷国家队用美洲杯冠军证明，如今34岁的梅西，虽然早已不再是09~16年 极盛时期，足球史上GOAT级别的个人技艺，但只要阵容搭配得当，众志成城、三军用命，只为全 力争取冠军，梅西依然能呈现出当世第一的技战术水准。而这，恰恰是今天的巴萨队，无论如何也难以匹配的。 一如18/19赛季，当巴萨队长梅西对着诺坎普几万球迷宣誓，要率队重回欧冠之巅，那些“六冠王”时代的老队友们，甚至完全不当回事：对他们来说，冠军早拿得足够多了，何必再拼？打卡下班等退役当名宿就完事了。——如此斗志涣散，全指望着梅西一人发挥神威的球队，当然必然会有 安菲尔德的惨败。</p><h2 id="安菲尔德！我不想了解"><a href="#安菲尔德！我不想了解" class="headerlink" title="安菲尔德！我不想了解"></a>安菲尔德！我不想了解</h2><p>安菲尔德……我不想多说这一件事，😭😭😭，这应该是为数不多梅西向世人，向球迷发表讲话表示要拿冠军的场面了。</p><p>我也多么希望梅西可以获得那一年的三冠王啊，那是梅西个人能力最逆天的一年，也是巴萨气运最能逆转的一年了。唉，这是本人的博客、我想怎么骂就怎么骂：登畜我永远不会原谅你，哪怕你以后会带领巴萨取得怎样的成就（似乎也没啥成就），我永远不会原谅你的那一年对利物浦的绵软无力的一射，不会原谅梅西离队发布会的刚结束你刚到巴塞罗那，不会原谅你辱骂亚洲黄种人。他真的不配我花这么长篇幅写。</p><p><a href="https://imgtu.com/i/fGwEdg" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fGwEdg.png" alt="无法想象"></a></p><p>我也想看到梅西在加冕世界杯，或是没有加冕（这不重要），之后在巴萨的红蓝飘带中，在巨大画像的GOAT中发表感言，泪流满面，巴萨最伟大的球员，缓缓离场。而不是：</p><p><a href="https://imgtu.com/i/fGw6FH" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fGw6FH.jpg" alt></a></p><h2 id="MSN全都离开了，甚至马儿走的是最体面的"><a href="#MSN全都离开了，甚至马儿走的是最体面的" class="headerlink" title="MSN全都离开了，甚至马儿走的是最体面的"></a>MSN全都离开了，甚至马儿走的是最体面的</h2><hr><p>内马尔是一条汉子，是真的喜爱足球，也是梅西真的兄弟。美洲杯最后阶段夺冠之后，我当时头皮发麻，真是想不到有多快乐了，但是看到内马尔的神情，看到内马尔和梅西脱衣服坐在一起，暂时找不到那一张图了，一种说不出来的感情。赛后马儿发表恭喜梅西夺冠，“足球一直等待这一刻”，真是感觉内马尔真是桑巴足球的代表，也是真服气老大哥梅西。</p><p><a href="https://imgtu.com/i/fG09k4" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fG09k4.jpg" alt="谁能想到他们会在巴黎又相见"></a></p><h2 id="拉狗，反正现在就是想这么叫你，真有你的成全！！！"><a href="#拉狗，反正现在就是想这么叫你，真有你的成全！！！" class="headerlink" title="拉狗，反正现在就是想这么叫你，真有你的成全！！！"></a>拉狗，反正现在就是想这么叫你，真有你的成全！！！</h2><hr><blockquote><p>这次巴萨这位小天才主席主要犯了以下这几个错误 我必须得说出来 不然心里太难受了</p><p>1、不能签请早说！为什么非要拖到转会窗口还剩不到一个月才说？而且5号还让梅西飞回来签合同 6号就说签不了？</p><p>2、用梅西为借口 无转会费签了三个球员 包括最惨的阿kun 本来人家在曼城好好的拿个高薪老将合同等退役了 看梅西面子被你忽悠来了 降薪1000万 然后梅西走了</p><p>阿kun：？</p><p>3、我知道现在是疫情 俱乐部经济困难 但是总不至于一个像样的告别仪式都办不起了吧？真就一点面子不给？办个新闻发布会 来的人还没有老板的奖杯多？</p><p>4、官宣之后火速放出视频 下架照片 召开甩锅发布会 但是还在卖新球衣 按照西班牙人的工作效率 你跟我说这不是提前准备好的？鬼都不信 早就开始提前准备了 然而一直瞒着当事人梅西？</p><p>5、选举的时候口号就是留住梅西 又拍视频又开发布会的 然后梅西被清洗走了？你的承诺呢？你的担架呢？</p><p>6、到现在巴萨还在欠梅西工资……拜托 人都被你赶走了！工资能不能结清了？！！！</p><p>不是不能接受老板的离开 而是不能接受老板这样的离开！这tm可是你现役的队史第一人！第一人！！！</p><p>啊啊啊啊啊啊啊啊啊啊啊啊啊！！！气死我了！！！</p><p>自从消息爆出来开始我就天天刷消息 各种新闻 各种论坛 昨天还看了全程的新闻发布会直播 太气人了！</p><p>真的 老板真就是脾气好 重情义 你就能逮着老实人欺负 这要是换成奉先？直接把你人都拆了！！！</p><p>我对你付出的青春这么多年</p><p>换来了一句谢谢你的成全</p><p>成全了你的潇洒与冒险</p><p>成全了我的碧海蓝天</p><p>她许你的海誓山盟蜜语甜言</p><p>我只有一句不后悔的成全</p><p>成全了你的今天与明天</p><p>成全了我的下个夏天</p><p><a href="https://imgtu.com/i/fG0A6x" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fG0A6x.jpg" alt="最巅峰的那几年"></a></p><hr><p>即使俱乐部对他再无情</p><p>无情到全世界的球迷都在看在眼里 记在心上 无尽的指责 无尽的咒骂</p><p>无情到借助他的名声上位</p><p>借助他的名声招揽球员</p><p>借助他的名声让队员降薪</p><p>一直拖到转会窗口即将关闭的时刻</p><p>让他飞回来签合同</p><p>当他回来的时候 却让他离开</p><p>差一点让他无法再继续自己的职业生涯</p><p>即使这样</p><p>他对俱乐部没有半点怨言</p><p>没有对任何人有半点怨言</p><p>这曾经是他的家</p><p>现在这个家不要他了</p><p>他哭得像一个孩子</p><p><a href="https://imgtu.com/i/fG009s" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fG009s.jpg" alt="孩童时到来，年迈时离开"></a></p><p>留下了对这个家最美好的祝福</p><p>然后转身离开</p><p>没有诺坎普十万球迷的山呼海啸</p><p>没有巴塞罗那漫山遍野的红蓝战衣</p><p>甚至没有一个体面的告别仪式</p><p>一个简单到不能再简单的新闻发布会</p><p>简单的舞台 聊聊数十人落座</p><p>在座的人数还不及他所获得的奖杯数量</p><p>这就是巴萨</p><p>这不仅仅是一家俱乐部</p><p>它对自己的队史第一功勋</p><p>如此的冷酷无情</p><p>最后我想说句我的心里话</p><p>梅西</p><p>拉着内马尔 拉莫斯 姆巴佩 迪玛利亚 以及巴黎的所有球员</p><p>血洗诺坎普吧！</p></blockquote><h1 id="莫愁前路无知己，天下谁人不识君！"><a href="#莫愁前路无知己，天下谁人不识君！" class="headerlink" title="莫愁前路无知己，天下谁人不识君！"></a>莫愁前路无知己，天下谁人不识君！</h1><hr><p><a href="https://imgtu.com/i/fG0W4J" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/10/fG0W4J.jpg" alt></a></p>]]></content>
      
      
      <categories>
          
          <category> 人物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 梅西 </tag>
            
            <tag> 运动 </tag>
            
            <tag> 别离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Tensor操作</title>
      <link href="/2021/08/07/chang-yong-tensor-cao-zuo/"/>
      <url>/2021/08/07/chang-yong-tensor-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>当然这里基本上都是本人的代码，还没来得及很具体的整理，所以比较乱……</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> torch <span class="token keyword">as</span> tt<span class="token punctuation">.</span>__version__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;1.8.1+cpu&#39;</code></pre><h2 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h2><p>Tensor，又名张量，读者可能对这个名词似曾相识，因它不仅在PyTorch中出现过，它也是Theano、TensorFlow、<br>Torch和MxNet中重要的数据结构。关于张量的本质不乏深度的剖析，但从工程角度来讲，可简单地认为它就是一个数组，且支持高效的科学计算。它可以是一个数（标量）、一维数组（向量）、二维数组（矩阵）和更高维的数组（高阶数据）。Tensor和Numpy的ndarrays类似，但PyTorch的tensor支持GPU加速。</p><p><del>本节将系统讲解tensor的使用，力求面面俱到，但不会涉及每个函数</del>。对于更多函数及其用法，我们可通过在IPython/Notebook中使用函数名加<code>?</code>查看帮助文档，或查阅PyTorch官方文档<a href="http://docs.pytorch.org" target="_blank" rel="noopener">^1</a>。</p><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>学习过Numpy会感到非常熟悉，因tensor的接口有意设计成与Numpy类似，以方便用户使用。</p><p>从接口的角度来讲，对tensor的操作可分为两类：</p><ol><li><code>torch.function</code>，如<code>torch.save</code>等。</li><li>另一类是<code>tensor.function</code>，如<code>tensor.view</code>等。</li></ol><p>为方便使用，对tensor的大部分操作同时支持这两类接口，在本书中不做具体区分，如<code>torch.sum (torch.sum(a, b))</code>与<code>tensor.sum (a.sum(b))</code>功能等价。</p><p>而从存储的角度来讲，对tensor的操作又可分为两类：</p><ol><li>不会修改自身的数据，如 <code>a.add(b)</code>， 加法的结果会返回一个新的tensor。</li><li>会修改自身的数据，如 <code>a.add_(b)</code>， 加法的结果仍存储在a中，a被修改了。</li></ol><p>函数名以<code>_</code>结尾的都是inplace方式, 即会修改调用者自己的数据，在实际应用中需加以区分。</p><h4 id="创建Tensor"><a href="#创建Tensor" class="headerlink" title="创建Tensor"></a>创建Tensor</h4><p>在PyTorch中新建tensor的方法有很多，具体如表3-1所示。</p><p>表3-1: 常见新建tensor的方法</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Tensor(*sizes)</td><td align="center">基础构造函数</td></tr><tr><td align="center">tensor(data,)</td><td align="center">类似np.array的构造函数</td></tr><tr><td align="center">ones(*sizes)</td><td align="center">全1Tensor</td></tr><tr><td align="center">zeros(*sizes)</td><td align="center">全0Tensor</td></tr><tr><td align="center">eye(*sizes)</td><td align="center">对角线为1，其他为0</td></tr><tr><td align="center">arange(s,e,step</td><td align="center">从s到e，步长为step</td></tr><tr><td align="center">linspace(s,e,steps)</td><td align="center">从s到e，均匀切分成steps份</td></tr><tr><td align="center">rand/randn(*sizes)</td><td align="center">均匀/标准分布</td></tr><tr><td align="center">normal(mean,std)/uniform(from,to)</td><td align="center">正态分布/均匀分布</td></tr><tr><td align="center">randperm(m)</td><td align="center">随机排列</td></tr></tbody></table><p>这些创建方法都可以在创建的时候指定数据类型dtype和存放device(cpu/gpu).</p><p>其中使用<code>Tensor</code>函数新建tensor是最复杂多变的方式，它既可以接收一个list，并根据list的数据新建tensor，也能根据指定的形状新建tensor，还能传入其他的tensor，下面举几个例子。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 指定tensor形状</span>a <span class="token operator">=</span> t<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 提前分配好空间</span>a   <span class="token comment" spellcheck="true"># 数值取决于内存空间的状态，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[0., 0., 0.],        [0., 0., 0.]])</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用list数据创建tensor</span>b <span class="token operator">=</span> t<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[1., 2., 3.],        [4., 5., 6.]])</code></pre><pre class="line-numbers language-python"><code class="language-python">b<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 和numpy的转化何其相似</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]</code></pre><p><code>tensor.size()</code>返回<code>torch.Size</code>对象，它是tuple的子类，但其使用方式与tuple略有区别</p><pre class="line-numbers language-python"><code class="language-python">b_size <span class="token operator">=</span> b<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>b_size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>torch.Size([2, 3])</code></pre><pre class="line-numbers language-python"><code class="language-python">b<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#  b中元素总个数，2*3，等价于b.nelement()</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>6</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建一个与b形状一样的tensor</span>c <span class="token operator">=</span> t<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>b<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个元素为2和3的tensor</span>d <span class="token operator">=</span> t<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 注意和t.Tensor(2, 3)完全不一样！</span>c<span class="token punctuation">,</span> d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([[0., 0., 0.],         [0., 0., 0.]]), tensor([2., 3.]))</code></pre><pre class="line-numbers language-python"><code class="language-python">c<span class="token punctuation">.</span>shape   <span class="token comment" spellcheck="true"># equal to c.size()</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>torch.Size([2, 3])</code></pre><p>需要注意的是，<code>t.Tensor(*sizes)</code>创建tensor时，系统不会马上分配空间，只是会计算剩余的内存是否足够使用，使用到tensor时才会分配，而其它操作都是在创建完tensor之后马上进行空间分配。其它常用的创建tensor的方法举例如下。</p><pre class="line-numbers language-python"><code class="language-python">t<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[1., 1., 1.],        [1., 1., 1.]])</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[0., 0., 0.],        [0., 0., 0.]])tensor([ 1,  5,  9, 13, 17])tensor([ 1.0000,  5.5000, 10.0000])  tensor([ 1.0000,  2.1250,  3.2500,  4.3750,  5.5000,  6.6250,  7.7500,  8.8750,        10.0000])</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> device<span class="token operator">=</span>t<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[ 0.6485,  0.8807,  0.5077],        [-1.1991, -0.9738, -0.8757]])</code></pre><pre class="line-numbers language-python"><code class="language-python">t<span class="token punctuation">.</span>randperm<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 长度为5的随机排列</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([1, 3, 2, 0, 4])</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>t<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>t<span class="token punctuation">.</span>int<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对角线为1， 不要求行列数一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[1, 0],        [0, 1],        [0, 0],        [0, 0]], dtype=torch.int32)tensor([[1, 0, 0],        [0, 1, 0]], dtype=torch.int32)</code></pre><p><code>torch.tensor</code>是在0.4版本新增加的一个新版本的创建tensor方法，使用的方法，和参数几乎和<code>np.array</code>完全一致</p><pre class="line-numbers language-python"><code class="language-python">scalar <span class="token operator">=</span> t<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">3.14159</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scalar: %s, shape of scalar: %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>scalar<span class="token punctuation">,</span> scalar<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 零维标量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>scalar: tensor(3.1416), shape of scalar: torch.Size([])</code></pre><pre class="line-numbers language-python"><code class="language-python">vector <span class="token operator">=</span> t<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'vector: %s, shape of vector: %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>vector<span class="token punctuation">,</span> vector<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 向量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>vector: tensor([1, 2]), shape of vector: torch.Size([2])</code></pre><pre class="line-numbers language-python"><code class="language-python">tensor <span class="token operator">=</span> t<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 注意与t.tensor([1, 2])区别</span>tensor<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>torch.Size([1, 2])</code></pre><pre class="line-numbers language-python"><code class="language-python">matrix <span class="token operator">=</span> t<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4.9</span><span class="token punctuation">,</span> <span class="token number">5.2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>matrix<span class="token punctuation">,</span> matrix<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(tensor([[0.1000, 1.2000],         [2.2000, 3.1000],         [4.9000, 5.2000]]), torch.Size([3, 2]))</code></pre><pre class="line-numbers language-python"><code class="language-python">empty_tensor <span class="token operator">=</span> t<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>empty_tensor<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>torch.Size([0])</code></pre><p>通过<code>tensor.view</code>方法可以调整tensor的形状，但必须保证调整前后元素总数一致。<code>view</code>不会修改自身的数据，返回的新tensor与源tensor共享内存，也即更改其中的一个，另外一个也会跟着改变。在实际应用中可能经常需要添加或减少某一维度，这时候<code>squeeze</code>和<code>unsqueeze</code>两个函数就派上用场了。</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> t<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[0, 1, 2],        [3, 4, 5]])</code></pre><pre class="line-numbers language-python"><code class="language-python">b <span class="token operator">=</span> a<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>torch.Size([2, 3])</code></pre><pre class="line-numbers language-python"><code class="language-python">b<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 注意形状，在第1维（下标从0开始）上增加“1”</span><span class="token comment" spellcheck="true"># 等价于b[, None]</span>b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>torch.Size([2, 1, 3])</code></pre><pre class="line-numbers language-python"><code class="language-python">b<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -2表示倒数第二个维度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[[0, 1, 2]],        [[3, 4, 5]]])</code></pre><pre class="line-numbers language-python"><code class="language-python">c <span class="token operator">=</span> b<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 压缩第0维的“1”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[[[0, 1, 2],          [3, 4, 5]]]])</code></pre><pre class="line-numbers language-python"><code class="language-python">c<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把所有维度为“1”的压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tensor([[0, 1, 2],        [3, 4, 5]])</code></pre><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>b  <span class="token comment" spellcheck="true"># a修改， b作为view之后的，也会跟着修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>tensor([[  0, 100,   2],        [  3,   4,   5]])</code></pre><pre class="line-numbers language-python"><code class="language-python">help<span class="token punctuation">(</span>t<span class="token punctuation">.</span>squeeze<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Help on built-in function squeeze:squeeze(...)    squeeze(input, dim=None, *, out=None) -&gt; Tensor    Returns a tensor with all the dimensions of :attr:`input` of size `1` removed.    For example, if `input` is of shape:    :math:`(A \times 1 \times B \times C \times 1 \times D)` then the `out` tensor    will be of shape: :math:`(A \times B \times C \times D)`.    When :attr:`dim` is given, a squeeze operation is done only in the given    dimension. If `input` is of shape: :math:`(A \times 1 \times B)`,    ``squeeze(input, 0)`` leaves the tensor unchanged, but ``squeeze(input, 1)``    will squeeze the tensor to the shape :math:`(A \times B)`.    .. note:: The returned tensor shares the storage with the input tensor,              so changing the contents of one will change the contents of the other.    .. warning:: If the tensor has a batch dimension of size 1, then `squeeze(input)`              will also remove the batch dimension, which can lead to unexpected              errors.    Args:        input (Tensor): the input tensor.        dim (int, optional): if given, the input will be squeezed only in               this dimension    Keyword args:        out (Tensor, optional): the output tensor.    Example::        &gt;&gt;&gt; x = torch.zeros(2, 1, 2, 1, 2)        &gt;&gt;&gt; x.size()        torch.Size([2, 1, 2, 1, 2])        &gt;&gt;&gt; y = torch.squeeze(x)        &gt;&gt;&gt; y.size()        torch.Size([2, 2, 2])        &gt;&gt;&gt; y = torch.squeeze(x, 0)        &gt;&gt;&gt; y.size()        torch.Size([2, 1, 2, 1, 2])        &gt;&gt;&gt; y = torch.squeeze(x, 1)        &gt;&gt;&gt; y.size()        torch.Size([2, 2, 1, 2])</code></pre><p>​    </p><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 指令集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
            <tag> Tensor </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeNet实现CIFAR10分类</title>
      <link href="/2021/08/07/lenet-shi-xian-cifar10-fen-lei/"/>
      <url>/2021/08/07/lenet-shi-xian-cifar10-fen-lei/</url>
      
        <content type="html"><![CDATA[<p>学了那么长时间的神经网络以及各个机器学习算法的手动numpy底层实现， 也掉了好多头发，终于也算是对这些算法有了算是比较本质的理解。接下来终于可以接触真正的深度学习库了。还是很高兴的， <del>终于可以当调参侠了😎</del>！</p><p>LeNet是CNN的开山之作，我们本次利用LeNet来实现CIFAR10数据集的分类，当然这个只是供练习使用pytorch使用，实际上技术含量上并不高，我也只是简单记录一下学习有关过程与内容。<del>真的是非常简单随意的记录</del></p><h2 id="导入有关库"><a href="#导入有关库" class="headerlink" title="导入有关库"></a>导入有关库</h2><p>我们主要运用的就是torch/torchvision库, 就是大致配一下变量名罢了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch <span class="token keyword">as</span> t<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn      <span class="token comment" spellcheck="true"># nn库，有着许多我们需要的函数如卷积conv1d\conv2d</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim   <span class="token comment" spellcheck="true"># 优化器</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F  <span class="token comment" spellcheck="true"># 主要有激活函数</span><span class="token keyword">import</span> torchvision <span class="token keyword">as</span> tv   <span class="token comment" spellcheck="true"># torchvision库，机器视觉库</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms  <span class="token comment" spellcheck="true"># 数据预处理方式</span><span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> ToPILImage  <span class="token comment" spellcheck="true"># 用来显示我们的图像</span>show <span class="token operator">=</span> ToPILImage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1.8.1+cpu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p>这方面本人在上一篇博客<a href="https://lry89757.github.io/2021/08/06/cifar10-shu-ju-ji-ji-du-qu/">Blog</a>中已经介绍过了。最后得到的是一个dataloader的迭代器。我们每次迭代都可以获取一个小批量，一个小批量有4个样本。我们这里就不再讲解数据预处理环节了。直接看代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 数据预处理，相当于提前定义了怎么处理数据：</span><span class="token comment" spellcheck="true"># 因为读入的数据为numpy格式，所以我们要先将其转换为tensor格式，</span><span class="token comment" spellcheck="true"># 然后对其进行归一化，有三个通道需要归一化，而第一个为均值，第二个为标准差</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 转为Tensor</span>    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 训练集</span>trainset <span class="token operator">=</span> tv<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>    root<span class="token operator">=</span><span class="token string">'/pytorch/Data/'</span><span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transform<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 迭代器</span>trainloader <span class="token operator">=</span> t<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    trainset<span class="token punctuation">,</span>    batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 测试集</span>testset <span class="token operator">=</span> tv<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>    root<span class="token operator">=</span><span class="token string">'/pytorch/Data/'</span><span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transform<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 迭代器</span>testloader <span class="token operator">=</span> t<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    trainset<span class="token punctuation">,</span>    batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="神经网络预备知识"><a href="#神经网络预备知识" class="headerlink" title="神经网络预备知识"></a>神经网络预备知识</h2><p>Autograd实现了反向传播功能，但是直接用来写深度学习的代码在很多情况下还是稍显复杂，torch.nn是专门为神经网络设计的模块化接口。nn构建于 Autograd之上，可用来定义和运行神经网络。nn.Module是nn中最重要的类，可把它看成是一个网络的封装，包含网络各层定义以及forward方法，调用forward(input)方法，可返回前向传播的结果。下面就以最早的卷积神经网络：LeNet为例，来看看如何用<code>nn.Module</code>实现。LeNet的网络结构如图所示。</p><p><a href="https://imgtu.com/i/fK1XqS" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/07/fK1XqS.png" alt="LeNet网络结构"></a></p><p>这是一个基础的前向传播(feed-forward)网络: 接收输入，经过层层传递运算，得到输出。</p><h4 id="定义网络"><a href="#定义网络" class="headerlink" title="定义网络"></a>定义网络</h4><p>定义网络时，需要继承<code>nn.Module</code>，并实现它的forward方法，把网络中具有可学习参数的层放在构造函数<code>__init__</code>中。如果某一层(如ReLU)不具有可学习的参数，则既可以放在构造函数中，也可以不放，但建议不放在其中，而在forward中使用<code>nn.functional</code>代替。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># nn.Module子类的函数必须在构造函数中执行父类的构造函数</span>        <span class="token comment" spellcheck="true"># 下式等价于nn.Module.__init__(self)</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 卷积层 '1'表示输入图片为单通道, '6'表示输出通道数，'5'表示卷积核为5*5</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 卷积层</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 仿射层/全连接层，y = Wx + b</span>        self<span class="token punctuation">.</span>fc1   <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>fc2   <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3   <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 卷积 -> 激活 -> 池化 </span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># reshape，‘-1’表示自适应</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>         x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token keyword">return</span> xnet <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以得到结果：</p><pre><code>Net(  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))  (fc1): Linear(in_features=400, out_features=120, bias=True)  (fc2): Linear(in_features=120, out_features=84, bias=True)  (fc3): Linear(in_features=84, out_features=10, bias=True))</code></pre><p>只要在nn.Module的子类中定义了forward函数，backward函数就会自动被实现(利用<code>autograd</code>)。在<code>forward</code> 函数中可使用任何tensor支持的函数，还可以使用if、for循环、print、log等Python语法，写法和标准的Python写法一致。</p><p>网络的可学习参数通过<code>net.parameters()</code>返回，<code>net.named_parameters</code>可同时返回可学习的参数及名称。</p><pre class="line-numbers language-python"><code class="language-python">params <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>parameters <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>parameters<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>forward函数的输入和输出都是Tensor。input <span class="token operator">=</span> t<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>out <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>net<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 所有参数的梯度清零</span>out<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>t<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 反向传播</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，torch.nn只支持mini-batches，不支持一次只输入一个样本，即一次必须是一个batch。但如果只想输入一个样本，则用 <code>input.unsqueeze(0)</code>将batch_size设为１。例如 <code>nn.Conv2d</code> 输入必须是4维的，形如$nSamples \times nChannels \times Height \times Width$。可将nSample设为1，即$1 \times nChannels \times Height \times Width$。</p><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p>nn实现了神经网络中大多数的损失函数，例如nn.MSELoss用来计算均方误差，nn.CrossEntropyLoss用来计算交叉熵损失。</p><pre class="line-numbers language-python"><code class="language-python">output <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>target <span class="token operator">=</span> t<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span> criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>loss <span class="token comment" spellcheck="true"># loss是个scalar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果对loss进行反向传播溯源(使用<code>gradfn</code>属性)，可看到它的计算图如下：</p><pre><code>input -&gt; conv2d -&gt; relu -&gt; maxpool2d -&gt; conv2d -&gt; relu -&gt; maxpool2d        -&gt; view -&gt; linear -&gt; relu -&gt; linear -&gt; relu -&gt; linear       -&gt; MSELoss      -&gt; loss</code></pre><p>当调用<code>loss.backward()</code>时，该图会动态生成并自动微分，也即会自动计算图中参数(Parameter)的导数。</p><h4 id="运行-backward，观察调用之前和调用之后的grad"><a href="#运行-backward，观察调用之前和调用之后的grad" class="headerlink" title="运行.backward，观察调用之前和调用之后的grad"></a>运行.backward，观察调用之前和调用之后的grad</h4><pre class="line-numbers language-python"><code class="language-python">net<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 把net中所有可学习参数的梯度清零</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'反向传播之前 conv1.bias的梯度'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'反向传播之后 conv1.bias的梯度'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre><code>反向传播之前 conv1.bias的梯度tensor([0., 0., 0., 0., 0., 0.])反向传播之后 conv1.bias的梯度tensor([ 0.1366,  0.0885, -0.0036,  0.1410,  0.0144,  0.0562])</code></pre><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>在反向传播计算完所有参数的梯度后，还需要使用优化方法来更新网络的权重和参数，例如随机梯度下降法(SGD)的更新策略如下：</p><pre><code>weight = weight - learning_rate * gradient</code></pre><p>手动实现如下：</p><pre class="line-numbers language-python"><code class="language-python">learning_rate <span class="token operator">=</span> <span class="token number">0.01</span><span class="token keyword">for</span> f <span class="token keyword">in</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sub_<span class="token punctuation">(</span>f<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data <span class="token operator">*</span> learning_rate<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># inplace 减法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>torch.optim</code>中实现了深度学习中绝大多数的优化方法，例如RMSProp、Adam、SGD等，更便于使用，因此大多数时候并不需要手动写上述代码。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token comment" spellcheck="true">#新建一个优化器，指定要调整的参数和学习率</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="梯度清零-与net-zero-grad-效果一样"><a href="#梯度清零-与net-zero-grad-效果一样" class="headerlink" title="梯度清零(与net.zero_grad()效果一样)"></a>梯度清零(与net.zero_grad()效果一样)</h4><pre class="line-numbers language-python"><code class="language-python">optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="计算损失"><a href="#计算损失" class="headerlink" title="计算损失"></a>计算损失</h4><pre class="line-numbers language-python"><code class="language-python">output <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#反向传播</span>loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#更新参数</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义网络-1"><a href="#定义网络-1" class="headerlink" title="定义网络"></a>定义网络</h2><p>拷贝上面的LeNet网络，修改self.conv1第一个参数为3通道，因CIFAR-10是3通道彩图。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xnet <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="误差损失与优化器"><a href="#误差损失与优化器" class="headerlink" title="误差损失与优化器"></a>误差损失与优化器</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 误差</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 采用交叉熵</span><span class="token comment" spellcheck="true"># 优化器</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># SGD优化算法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 训练网络</span>epoches <span class="token operator">=</span> <span class="token number">3</span>t<span class="token punctuation">.</span>set_num_threads<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 设置pytorch多线程运算时占用的cpu线程数</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>epoches<span class="token punctuation">)</span><span class="token punctuation">:</span>    running_loss <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>trainloader<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        images<span class="token punctuation">,</span> labels <span class="token operator">=</span> data        target <span class="token operator">=</span> net<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>target<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">1999</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'epoch: {epoch+1}   samples: {i/1999 * 2000} loss: {running_loss / 20000}'</span><span class="token punctuation">)</span>            running_loss <span class="token operator">=</span> <span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><a href="https://imgtu.com/i/fKcNk9" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/07/fKcNk9.png" alt></a></p><h2 id="识别正确率"><a href="#识别正确率" class="headerlink" title="识别正确率"></a>识别正确率</h2><p>最终识别正确率嘛……也不是很高，58%，没有很高,<del>不过比随便猜得到的10%还是好很多的</del>。</p><pre class="line-numbers language-python"><code class="language-python">correct <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 预测正确的图片数</span>total <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 总共的图片数</span><span class="token comment" spellcheck="true"># 由于测试的时候不需要求导，可以暂时关闭autograd，提高速度，节约内存</span><span class="token keyword">with</span> t<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> testloader<span class="token punctuation">:</span>        images<span class="token punctuation">,</span> labels <span class="token operator">=</span> data        outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        _<span class="token punctuation">,</span> predicted <span class="token operator">=</span> t<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        total <span class="token operator">+=</span> labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        correct <span class="token operator">+=</span> <span class="token punctuation">(</span>predicted <span class="token operator">==</span> labels<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10000张测试集中的准确率为: %d %%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> correct <span class="token operator">/</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgtu.com/i/fKc46f" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/07/fKc46f.png" alt></a></p><p>完结撒花❀❀❀❀❀❀❀❀❀❀❀！</p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
            <tag> CNN </tag>
            
            <tag> LeNet </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> CIFAR10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CIFAR10 dataset and reading</title>
      <link href="/2021/08/06/cifar10-shu-ju-ji-ji-du-qu/"/>
      <url>/2021/08/06/cifar10-shu-ju-ji-ji-du-qu/</url>
      
        <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><hr><p><em>I used the MNIST data set to practice before, and the most common python operation was used to read. This time I learned CNN and started to contact the DIFAR-10 data set and tried to use the framework pytorch to read data for classification.</em></p><p><em>由于大多数论文都是英文，所以本文尽量使用英文描述</em></p><p><em>Since most papers are in English, this article tries to use English descriptions as much as possible</em></p><h2 id="CIFAR-10Dataset"><a href="#CIFAR-10Dataset" class="headerlink" title="CIFAR-10Dataset"></a>CIFAR-10Dataset</h2><hr><p><a href="https://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="noopener">CIFAR-10</a>The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images.</p><p>The dataset is divided into five training batches and one test batch, each with 10000 images. The test batch contains exactly 1000 randomly-selected images from each class. The training batches contain the remaining images in random order, but some training batches may contain more images from one class than another. Between them, the training batches contain exactly 5000 images from each class.</p><p>Here are the classes in the dataset, as well as 10 random images from each:</p><table><thead><tr><th>airplane</th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane1.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane2.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane3.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane4.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane5.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane6.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane7.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane8.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane9.png" alt="img"></th><th><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/airplane10.png" alt="img"></th></tr></thead><tbody><tr><td>automobile</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/automobile10.png" alt="img"></td></tr><tr><td>bird</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/bird10.png" alt="img"></td></tr><tr><td>cat</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/cat10.png" alt="img"></td></tr><tr><td>deer</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/deer10.png" alt="img"></td></tr><tr><td>dog</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/dog10.png" alt="img"></td></tr><tr><td>frog</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/frog10.png" alt="img"></td></tr><tr><td>horse</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/horse10.png" alt="img"></td></tr><tr><td>ship</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/ship10.png" alt="img"></td></tr><tr><td>truck</td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck1.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck2.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck3.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck4.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck5.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck6.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck7.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck8.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck9.png" alt="img"></td><td><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.cs.toronto.edu/~kriz/cifar-10-sample/truck10.png" alt="img"></td></tr></tbody></table><p>The classes are completely mutually exclusive(完全互斥的）. There is no overlap（重叠） between automobiles and trucks. “Automobile” includes sedans, SUVs, things of that sort. “Truck” includes only big trucks. Neither includes pickup trucks.</p><p>There are three versions of this dataset for python, matlab and binary.</p><p>If you have downloaded the version for python,  you unzip the .zip file look like this:</p><p><a href="https://imgtu.com/i/fnvqf0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/06/fnvqf0.png" alt></a></p><p>The archive contains the files data_batch_1, data_batch_2, …, data_batch_5, as well as test_batch. Each of these files is a Python “pickled” object produced with <a href="http://www.python.org/doc/2.5/lib/module-cPickle.html" target="_blank" rel="noopener">cPickle</a>. Here is a python3 routine which will open such a file and return a dictionary:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">unpickle</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> pickle    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fo<span class="token punctuation">:</span>        dict <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fo<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'bytes'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Loaded in this way, each of the batch files contains a dictionary with the following elements:</p><ul><li><strong>data</strong> – a 10000x3072 <a href="http://numpy.scipy.org/" target="_blank" rel="noopener">numpy</a> array of uint8s. Each row of the array stores a 32x32 colour image. The first 1024 entries contain the red channel values, the next 1024 the green, and the final 1024 the blue. The image is stored in row-major order, so that the first 32 entries of the array are the red channel values of the first row of the image.</li><li><strong>labels</strong> – a list of 10000 numbers in the range 0-9. The number at index <em>i</em> indicates the label of the <em>i</em>th image in the array <strong>data</strong>.</li></ul><p>The dataset contains another file, called batches.meta. It too contains a Python dictionary object. It has the following entries:</p><ul><li><strong>label_names</strong> – a 10-element list which gives meaningful names to the numeric labels in the <strong>labels</strong> array described above. For example, label_names[0] == “airplane”, label_names[1] == “automobile”, etc.</li></ul><p>The above is all the introduction of CIFAR-10.</p><h2 id="read-the-dataset-by-Pytorch"><a href="#read-the-dataset-by-Pytorch" class="headerlink" title="read the dataset by Pytorch"></a>read the dataset by Pytorch</h2><hr><h3 id="Preface-1"><a href="#Preface-1" class="headerlink" title="Preface"></a>Preface</h3><p>Before, I often use some simple python codes to read the dataset such as MNIST, sonar and so on. Today, I begin to learning pytorch, finding the torchvision.datasets, and the specific methods of reading datasets of pytorch. It’s amazing and simple. I will explore the use of it with all of you guys as follows.</p><p>All datasets are subclasses of <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset" target="_blank" rel="noopener"><code>torch.utils.data.Dataset</code></a> i.e, they have <code>__getitem__</code> and <code>__len__</code> methods implemented. Hence, they can all be passed to a <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader" target="_blank" rel="noopener"><code>torch.utils.data.DataLoader</code></a> which can load multiple samples in parallel using <code>torch.multiprocessing</code> workers. For example:</p><pre class="line-numbers language-python"><code class="language-python">imagenet_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>ImageNet<span class="token punctuation">(</span><span class="token string">'path/to/imagenet_root/'</span><span class="token punctuation">)</span>data_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>imagenet_data<span class="token punctuation">,</span>                                          batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                                          shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                          num_workers<span class="token operator">=</span>args<span class="token punctuation">.</span>nThreads<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>All the datasets have almost similar API. They all have two common arguments: <code>transform</code> and <code>target_transform</code> to transform the input and target respectively(这两个是图片增强). We can also create our own datasets using the provided <a href="https://pytorch.org/vision/stable/datasets.html#base-classes-datasets" target="_blank" rel="noopener">base classes</a></p><h3 id="Transforms-Compose-about-data-preprocessing"><a href="#Transforms-Compose-about-data-preprocessing" class="headerlink" title="Transforms.Compose()   about data preprocessing"></a>Transforms.Compose()   about data preprocessing</h3><h4 id="In-this-case"><a href="#In-this-case" class="headerlink" title="In this case"></a>In this case</h4><p>Usually we use the torchvision.transforms.Compose() to preprocessing the data we need. There are few parameters about this function. In this case, we use this function like this:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token comment" spellcheck="true"># data preprocessing</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">,</span>    trasforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># the fronter is the mean of normalize, the later is the standard deviation('标准差' in Chinese)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="what’s-more"><a href="#what’s-more" class="headerlink" title="what’s more"></a>what’s more</h4><p>What’s more, the function has many useful parameters, we could find the related examples in this <a href="https://www.programcreek.com/python/example/104832/torchvision.transforms.Compose" target="_blank" rel="noopener">website</a>. And as follows,  I will list some examples in this website:</p><h5 id="example-1"><a href="#example-1" class="headerlink" title="example 1"></a>example 1</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> phase<span class="token punctuation">)</span><span class="token punctuation">:</span>    transform_dict <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'src'</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>        <span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>RandomResizedCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                              std<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'tar'</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>        <span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                              std<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>root_path <span class="token operator">+</span> dir<span class="token punctuation">,</span> transform<span class="token operator">=</span>transform_dict<span class="token punctuation">[</span>phase<span class="token punctuation">]</span><span class="token punctuation">)</span>    data_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data_loader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="example-2"><a href="#example-2" class="headerlink" title="example 2"></a>example 2</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_data_loader</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> opt<span class="token punctuation">.</span>dset_name <span class="token operator">==</span> <span class="token string">'moving_mnist'</span><span class="token punctuation">:</span>    transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>vtransforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dset <span class="token operator">=</span> MovingMNIST<span class="token punctuation">(</span>opt<span class="token punctuation">.</span>dset_path<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>is_train<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>n_frames_input<span class="token punctuation">,</span>                       opt<span class="token punctuation">.</span>n_frames_output<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>num_objects<span class="token punctuation">,</span> transform<span class="token punctuation">)</span>  <span class="token keyword">elif</span> opt<span class="token punctuation">.</span>dset_name <span class="token operator">==</span> <span class="token string">'bouncing_balls'</span><span class="token punctuation">:</span>    transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>vtransforms<span class="token punctuation">.</span>Scale<span class="token punctuation">(</span>opt<span class="token punctuation">.</span>image_size<span class="token punctuation">)</span><span class="token punctuation">,</span>                                    vtransforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dset <span class="token operator">=</span> BouncingBalls<span class="token punctuation">(</span>opt<span class="token punctuation">.</span>dset_path<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>is_train<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>n_frames_input<span class="token punctuation">,</span>                         opt<span class="token punctuation">.</span>n_frames_output<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>image_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> transform<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> NotImplementedError  dloader <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>opt<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span>opt<span class="token punctuation">.</span>is_train<span class="token punctuation">,</span>                            num_workers<span class="token operator">=</span>opt<span class="token punctuation">.</span>n_workers<span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> dloader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="example-3"><a href="#example-3" class="headerlink" title="example 3"></a>example 3</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">transform_for_train</span><span class="token punctuation">(</span>fixed_scale <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span> rotate_prob <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Options:    1.RandomCrop    2.CenterCrop    3.RandomHorizontalFlip    4.Normalize    5.ToTensor    6.FixedResize    7.RandomRotate    """</span>    transform_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">#transform_list.append(FixedResize(size = (fixed_scale, fixed_scale)))</span>    transform_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RandomSized<span class="token punctuation">(</span>fixed_scale<span class="token punctuation">)</span><span class="token punctuation">)</span>    transform_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RandomRotate<span class="token punctuation">(</span>rotate_prob<span class="token punctuation">)</span><span class="token punctuation">)</span>    transform_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#transform_list.append(Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5)))</span>    transform_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    transform_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>transform_list<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then let us explore the DataLoader of pytorch.</p><h3 id="Get-the-data"><a href="#Get-the-data" class="headerlink" title="Get the data"></a>Get the data</h3><p>We simply use the torchvision.datasets.CIFAR10() to get the data. The torchvision.datasets contains the dataset of CIFAR10. If we haven’t downloaded the datasets before, we even use this to download the dataset(Simply make the bool truth of <code>download</code> as True).</p><p><em>load data just like this:</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torchvision <span class="token keyword">as</span> tv<span class="token keyword">import</span> torch <span class="token keyword">as</span> t<span class="token comment" spellcheck="true"># trainset</span>trainset <span class="token operator">=</span> tv<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>    root<span class="token operator">=</span><span class="token string">'/pytorch/Data/'</span><span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transform<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># testset</span>testset <span class="token operator">=</span> tv<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>    root<span class="token operator">=</span><span class="token string">'/pytorch/Data/'</span><span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It is very simple! don’t it ?</p><h3 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h3><h4 id="official"><a href="#official" class="headerlink" title="official"></a>official</h4><p>The relatively official description: Dataloader is an iterable object that splices each piece of data returned by the dataset into a batch, and provides multi-threaded acceleration optimization(多线程优化加速) and data scrambling operations(数据打乱操作). After the program traverses all the data of the dataset, it also completes an iteration of the Dataloader.</p><h4 id="my-eyes"><a href="#my-eyes" class="headerlink" title="my eyes"></a>my eyes</h4><p>In my opinions, it is just a generator to load the data. Compare to the cycle of <code>for</code>,  the use of generator is more pythonic and advanced. In this case, we use this to load data like this:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch <span class="token keyword">as</span> ttrainloader <span class="token operator">=</span> t<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    trainset<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># the trainset we get before</span>    batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>testloader <span class="token operator">=</span> t<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    trainset<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># as the same</span>    batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>    shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Type-of-annotation"><a href="#Type-of-annotation" class="headerlink" title="Type of annotation"></a>Type of annotation</h3><p>For convenience,  the label of each img is numbers, so we should make a tuple of varieties(list is also ok) to get the variety of each img. Actually, it make no effects on the dataset.</p><pre class="line-numbers language-python"><code class="language-python">classes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'plane'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span> <span class="token string">'bird'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'deer'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'horse'</span><span class="token punctuation">,</span> <span class="token string">'ship'</span><span class="token punctuation">,</span> <span class="token string">'truck'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Try-to-show-a-picture"><a href="#Try-to-show-a-picture" class="headerlink" title="Try to show a picture"></a>Try to show a picture</h3><p>We could get one data to watch the image.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> ToPILImageshow <span class="token operator">=</span> ToPILImage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token operator">=</span> trainset<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># get the 100th data</span><span class="token keyword">print</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># get the variety of this data</span><span class="token comment" spellcheck="true"># (data + 1) / 2 : Restore the normalized data</span>show<span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># height:100, width:100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>we can get the output:</p><p>ship<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/06/fusmEn.png" alt></p><p>Just like this, we get the batch of data like this:</p><pre class="line-numbers language-python"><code class="language-python">dataiter <span class="token operator">=</span> iter<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span>images<span class="token punctuation">,</span> labels <span class="token operator">=</span> dataiter<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># each batch has 4 images</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'       '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>classes<span class="token punctuation">[</span>labels<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>tv<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span><span class="token punctuation">(</span>images <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>the output as follows:</p><p>ship                  bird                  bird               truck</p><p><a href="https://imgtu.com/i/fuckjO" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/06/fuckjO.png" alt></a></p><p>OK, that’s all! Thank you for reading!</p>]]></content>
      
      
      <categories>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
            <tag> CNN </tag>
            
            <tag> 数据集 </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> python </tag>
            
            <tag> CIFAR10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P5788 单调栈</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p5788-dan-diao-zhan/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p5788-dan-diao-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://www.luogu.com.cn/problem/P5788" target="_blank" rel="noopener">题目</a>描述</h2><hr><p>给出项数为 n的整数数列 $a_{1 … n}$。</p><p>定义函数 <em>f</em>(<em>i</em>) 代表数列中第 i<em>i</em> 个元素之后第一个大于 <em>a**i</em> 的元素的<strong>下标</strong>，若不存在，则 f(i)=0。</p><p>试求出 f<em>(1…</em>n)。</p><p><a href="https://imgtu.com/i/fV9nYV" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/05/fV9nYV.png" alt></a></p><h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><hr><p>实际上这一道题和前面那一道<a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1165-ri-zhi-fen-xi/">日志分析</a>是非常像的，不过这里这个需要我们先将所有的数字都读进a[3000005]，读进来之后从后往前开始，定义一个辅助数组b[3000005]用来存储相同位置的数比他大的第一个数的索引值，从最后一个数开始，最后一个数为0，然后往前，随意一个数a[i]先判断是否它比后面第一个数a[i+1]大，如果比后面第一个数a[i+1]小，那么那个辅助数组只需在该位置存储该位置的索引 i+1 就行；如果它比它后面第一个数a[i+1]大或是相等，那么就找比它后面那个数a[i+1]还大的数a[b[i+1]],由于是从后往前进行的，这个b[i+1]已经求出来了，如果我们的a[b[i+1]]，仍然不比a[i]大，那么就继续找a[b[b[i+1]]], 哈哈哈，有点套娃的感觉了，实际上就是找比a[b[i+1]]还大的第一个数，这么依次找下去，直到找到一个比a[i]大的数，将其索引存储到b[i]上， 或者直到找到一个b[j]为0，那么说明a[i]是目前最大数，没有比它更大的数，那么对应的b[i]就为0。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3000002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 用来存储数据</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">3000002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 用来存储我们的答案</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 总共的个数</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读取数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 如果后面的第一个数正好比他大</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> next <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// // 如果后面第一个数没有比他更大的数，那么直接赋值为0,否则就一直找接下来的索引直到找到0或者找到合适的数为止</span>                next <span class="token operator">=</span> b<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1165-日志分析</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1165-ri-zhi-fen-xi/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1165-ri-zhi-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a><a href="https://www.luogu.com.cn/problem/P1165" target="_blank" rel="noopener">题目</a>描述:</h2><p><em>M</em> 海运公司最近要对旗下仓库的货物进出情况进行统计。目前他们所拥有的唯一记录就是一个记录集装箱进出情况的日志。该日志记录了两类操作：第一类操作为集装箱入库操作，以及该次入库的集装箱重量；第二类操作为集装箱的出库操作。这些记录都严格按时间顺序排列。集装箱入库和出库的规则为先进后出，即每次出库操作出库的集装箱为当前在仓库里所有集装箱中最晚入库的集装箱。</p><p>出于分析目的，分析人员在日志中随机插入了若干第三类操作――查询操作。分析日志时，每遇到一次查询操作，都要报告出当前仓库中最大集装箱的重量。</p><p><a href="https://imgtu.com/i/fEvvCD" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEvvCD.png" alt></a></p><h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><hr><p>首先我们知道要使用一个栈来存储输入的重量，但是由于这里有着一个所谓的最大值的限制，我们要能随时查询最大值，所以同时还需要有着一个辅助栈来<strong>同步</strong>存储我们的当前元素作为栈顶时的最大值，这个是建立栈的同时建立的辅助栈，最后我们只需要查询时输出栈顶，出库时把两个栈顶都弹出来就行。</p><p>另外就是注意一下这里的空栈时查询输出0就行了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">// 一共需要两个栈，一个栈用来记录依次进入的货品质量，</span><span class="token comment" spellcheck="true">//一个栈在建立前一个栈的时候记录当前栈的最大值</span><span class="token keyword">int</span> stack1<span class="token punctuation">[</span><span class="token number">200006</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录依次进入的货品质量</span><span class="token keyword">int</span> stack2<span class="token punctuation">[</span><span class="token number">200006</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录建立栈的同时当前栈的最大值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所含操作总数</span>    <span class="token keyword">int</span> opera<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录每次的操作</span>    <span class="token keyword">int</span> weigh<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录每次的物品质量</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录栈顶位置</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//读取数据</span>    <span class="token comment" spellcheck="true">//scanf("%d%d", &amp;opera, &amp;weigh);  // 先读取一次，使栈中有数</span>    <span class="token comment" spellcheck="true">//stack1[top++] = weigh;</span>    <span class="token comment" spellcheck="true">//stack2[top++] = weigh;  // 由于栈中只有一个元素，所以我们的当前栈最大值为weigh</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 循环n次</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opera<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opera<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">// 读取入栈</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>weigh<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> weigh<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 入栈</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//栈中只有一个元素</span>                stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> weigh<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>weigh <span class="token operator">></span> stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 如果我们的读入数据比之前的最大值还大</span>                stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> weigh<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 就更改最大值</span>            <span class="token keyword">else</span>                stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 否则延续上次的最大值</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">//出库</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果栈不空</span>                top<span class="token operator">--</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出栈</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 如果栈</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 栈空时输出0</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> stack2<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1981 表达式求值</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1981-biao-da-shi-qiu-zhi/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1981-biao-da-shi-qiu-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><hr><p><a href="https://www.luogu.com.cn/problem/P1981" target="_blank" rel="noopener">题目</a>描述：给定一个只包含加法和乘法的算术表达式，请你编程计算表达式的值。</p><p><a href="https://imgtu.com/i/fEXFET" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEXFET.png" alt></a></p><h2 id="解析思路"><a href="#解析思路" class="headerlink" title="解析思路"></a>解析思路</h2><hr><p>实际上本题和栈的关系不是特别大，因为只有乘和加两种运算，我们基本思路为把乘的乘出来后，加上之前的和就OK，没有必要使用栈运算。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><hr><p>代码如下：</p><pre class="line-numbers language-c++"><code class="language-c++">#include <cstdio>const int mod = 10000;int x,s,t; //x是当前的数，s是和，t是当前段的乘积char c;int main(){    scanf("%d",&t);//先读入第一个数，之后每次读入一个符号一个数    while(scanf("%c",&c) && c != '\n'){ //最后会读到换行符        scanf("%d",&x);        if(c == '*') t = t * x % mod; //是乘号就相乘        else s = (s + t) % mod,t = x;        //加号就加上上一段的积，t变为下一段的第一个数    }    printf("%d\n",(s + t) % mod); //加上最后一段的积    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python实现（eval函数）"><a href="#Python实现（eval函数）" class="headerlink" title="Python实现（eval函数）"></a>Python实现（eval函数）</h2><hr><p>当然，这里面我们的运算式就是这样，我们平时计算的时候往计算器上敲的格式一模一样，所以我们完全能想到python中的eval函数，它可以将我们的输入的字符串作为python的代码编译出来，所以很理所应当的，<del>一行代码优雅解决</del></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然而现实很残酷……</p><p><a href="https://imgtu.com/i/fEjTTf" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEjTTf.png" alt></a></p><p>有两个运行超时了</p><p>后来换成了Pyhon2，python2才是可以直接运算不借助任何函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><del>直接AC！</del></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> python </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1449 后缀表达式</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1449-hou-zhui-biao-da-shi/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1449-hou-zhui-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://www.luogu.com.cn/problem/P1449" target="_blank" rel="noopener">题目</a>描述</h2><hr><p>所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。</p><p>如：3<em>(5–2)+7对应的后缀表达式为：3．5．2．-</em>7．+@。’@’为表达式的结束符号。‘.’为操作数的结束符号。</p><p><a href="https://imgtu.com/i/fELUWd" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fELUWd.png" alt></a></p><p>##解析思路</p><hr><p>本题也是对于栈的较为直接的考察，我们可以直接选择建立一个栈来存储我们的每次输入的数字，然后遇到一个符号就弹出两个数来进行运算，运算的结果再入栈，最后运算结束之后，栈中只会剩下最后一个数，就是我们的结果。</p><p><strong>注意这里面我们读取数字的时候是以字符串读取的，有可能会读取多位数比如13、122这种，所以需要注意读取问题，不过这一题还算简单，没有让我们读取负数</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><p>代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用来放置相关数字的栈</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 读入字符</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录栈目前的栈顶位置</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'@'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">>=</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用来做读取的每一个数字</span>            num <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\.'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 如果是数字的话</span>            <span class="token punctuation">{</span>                num <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                num <span class="token operator">+</span><span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 入栈</span>            <span class="token comment" spellcheck="true">// printf("%d", num);</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>   <span class="token comment" spellcheck="true">// 如果是运算符就出栈运算然后入栈</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">,</span> left <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 得到左右操作数</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            <span class="token keyword">case</span><span class="token string">'*'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">*</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token string">'/'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">/</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token string">'+'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span><span class="token string">'-'</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">-</span> right<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// printf("top : %d\n", stack[top - 1]);</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上格式化之后，发现本题难度并不大。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题全记录</title>
      <link href="/2021/08/04/suan-fa-shua-ti-quan-ji-lu/"/>
      <url>/2021/08/04/suan-fa-shua-ti-quan-ji-lu/</url>
      
        <content type="html"><![CDATA[<p><em>学校要求暑假刷算法题，上个寒假刷的题（<del>有好多好多都是不会抄的</del>）几乎上都快忘完了，正逢上我创建个人博客，算是把刷过的题都做一个记录，也算是个记录整理一下思路，以后忘了还可以看看当时的思路</em></p><p>就以这一个系列作为开篇作，以后我会每次刷一个系列的题，顺便来进行一个大的每道题的总结。</p><h2 id="栈系列"><a href="#栈系列" class="headerlink" title="栈系列"></a>栈系列</h2><hr><p>第一个系列的是关于栈的五道题。</p><p><a href="https://imgtu.com/i/fEHUWn" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEHUWn.png" alt></a></p><p>难度不是很大，不过也花了一定的时间</p><p>五道题地址与解答博客地址在这里：</p><p>第一道：<a href="https://www.luogu.com.cn/problem/P1044" target="_blank" rel="noopener">P1044单调栈</a>       <a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1044-zhan/">算法刷题之栈系列P1044栈</a></p><p>第二道：<a href="https://www.luogu.com.cn/problem/P1449" target="_blank" rel="noopener">P1449后缀表达式</a>  <a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1449-hou-zhui-biao-da-shi/">算法刷题之栈系列P1449后缀表达式</a></p><p>第三道：<a href="https://www.luogu.com.cn/problem/P1981" target="_blank" rel="noopener">P1981表达式求值</a>   <a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1981-biao-da-shi-qiu-zhi/">算法刷题之栈系列P1981 表达式求值</a></p><p>第四道：<a href="https://www.luogu.com.cn/problem/P1165" target="_blank" rel="noopener">P1165日志分析</a>    <a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1165-ri-zhi-fen-xi/">算法刷题之栈系列P1165-日志分析</a></p><p>第五道：<a href="https://www.luogu.com.cn/problem/P5788" target="_blank" rel="noopener">P5788单调栈</a>   <a href="https://lry89757.github.io/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p5788-dan-diao-zhan/">算法刷题之栈系列P5788 单调栈</a></p><h2 id="队列系列"><a href="#队列系列" class="headerlink" title="队列系列"></a>队列系列</h2><hr><p>第二个系列是有关于队列系列的3道题：</p><p><a href="https://imgtu.com/i/fVnrn0" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/05/fVnrn0.png" alt></a></p><p>第一道：<a href="https://www.luogu.com.cn/problem/UVA540" target="_blank" rel="noopener">团体队列</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题之栈系列P1044 栈</title>
      <link href="/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1044-zhan/"/>
      <url>/2021/08/04/suan-fa-shua-ti-zhi-zhan-xi-lie-p1044-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://www.luogu.com.cn/problem/P1044" target="_blank" rel="noopener">题目</a>描述</h2><hr><p>一个序列1、2、3、4、5、……、n，按照如此顺序入栈，可能的出栈顺序有多少种？</p><p><a href="https://imgtu.com/i/fEbQh9" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://z3.ax1x.com/2021/08/04/fEbQh9.png" alt></a></p><h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><hr><p>这一道题实际上使用了卡特兰数的公式，</p><p>建立数组f。f[i]表示i个数的全部可能性。</p><p>f[0] = 1, f[1] = 1; //当然只有一个</p><p>设 x 为当前出栈序列的最后一个，则x有n种取值</p><p>由于x是最后一个出栈的，所以可以将已经出栈的数分成两部分</p><ol><li>比x小</li><li>比x大</li></ol><p>比x小的数有x-1个，所以这些数的全部出栈可能为f[x-1]</p><p>比x大的数有n-x个，所以这些数的全部出栈可能为f[n-x]</p><p>这两部分互相影响，所以一个x的取值能够得到的所有可能性为f[x-1] * f[n-x]</p><p>另外，由于x有n个取值，所以</p><p>ans = f[0]<em>f[n-1] + f[1]</em>f[n-2] + … + f[n-1]*f[0];</p><p>当然可以这样使用递归处理，但是我们已经有结论了：h(n)=c(2n,n)-c(2n,n-1) (n=0,1,2,…)</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><p>所以我的答案就很“简洁”了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> factorialn <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>factorial<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>factorial<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然如果你想要较为”正常“的完成这一道题(抄某位大佬的)：</p><pre class="line-numbers language-c++"><code class="language-c++">#include<cstdio>#define siz 20using namespace std;int n;int c[siz*2][siz];int main(){    scanf("%d",&n);    for(int i=1;i<=2*n;i++) c[i][1]=c[i][i]=1;    for(int i=3;i<=2*n;i++)     for(int j=2;j<i;j++)      c[i][j]=c[i-1][j]+c[i-1][j-1];    printf("%d",c[2*n][n]-c[2*n][n-1]);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>愉快AC</del></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> python </tag>
            
            <tag> 栈 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回到那片球场8.3 2021</title>
      <link href="/2021/08/04/hui-dao-na-pian-qiu-chang-8-3-2021/"/>
      <url>/2021/08/04/hui-dao-na-pian-qiu-chang-8-3-2021/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7cd66ceb702686a6e61e8fab002ebc58dc5b166530e0f6c2e820bc7a6d3ec9e3">5de89d89894dfc04df6c90fd52cc9dd07e5c4f0d52ff815f234f57e60c9b48a7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu ! enter some words to prove</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 写给自己的散文诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 写给自己的散文诗 </tag>
            
            <tag> 羽毛球 </tag>
            
            <tag> 体育运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lier and Accuser for 林俊杰</title>
      <link href="/2021/08/03/lier-and-accuser-for-lin-jun-jie/"/>
      <url>/2021/08/03/lier-and-accuser-for-lin-jun-jie/</url>
      
        <content type="html"><![CDATA[<p>网上最近流言飞起，说到林俊杰****，我实际上是比较气愤的，至少现在还没有真相大白，网上的键盘侠、水军们已经开始拼命黑了，我想起了JJ Lin的一首歌，Lier and Accuser, 里面几句歌词：They don’t even know me，With their tongues（闲言碎语） they crucify（折磨） me，Won’t you vindicate（证明……无辜的） me，Fend（防御） me from those false accusations（指责）。他们都不认识我，就各处造谣，你能证明我是无辜的对吧，快带我逃离这不实的指责。</p><p>的确，网上好早前就有过好多关于他的yp传闻，似乎是正确的，就算是正确的我也不奇怪，的确啊40多的老男人了，他也没有所谓的纯情人设，我只是在听他的歌、欣赏他的作曲才华、演唱能力而已。也可能只是谣言而已。但是最令我气愤的是，关于他的吸毒？？？？我想知道，这还是互联网吗？为什么都在全网黑他？粉丝真的稍微维护一下都会被骂，稍微维护下就会被骂和吴亦凡粉丝有什么区别。林俊杰这件事情之前是为数不多的娱乐圈道德模范了吧，这件事情之后可能继续会是。出道这么多年，几乎没有什么黑料，有不应该早就挖出来了吗？有的黑料那算是那一两个被整天宣传，事实上是这样吗？你们看后续报道了吗？有什么石锤的证据吗？似乎没有吧？现在很多人真是纯属为了骂而骂。奉劝一句：看看林俊杰律师函吧。发完函微博贴吧知乎那群造谣的，删帖的删帖，道歉的道歉，注销的注销。林俊杰老粉知道这人啥情况，有黑料，出道这么多年一点绯闻都没有，你突然跟我说这人艹粉吸毒。</p><p>律师函来了：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-cc49665bac3a39ceb04c30bcd79f9c41_1440w.jpg?source=1940ef5c" alt></p><p>看看各位造谣者的怂样子：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-21a93e919c35cb5d49b67c382d78833f_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-11cce240e88834da7b37a7bcb064187c_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-7499d91ae7f4f149d0e0d08dc42861fd_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-87cf0d5ed18c9625e6e12cd7887544ca_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-4297ecbe4661de46d55b0143fb2d8a26_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-415d13b25181adb82092e46bd92debc7_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic3.zhimg.com/80/v2-7631e35a42a27f00ed22ca814abc286f_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-a966b19464203807eb23acfa51c7ed33_1440w.jpg?source=1940ef5c" alt></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic2.zhimg.com/80/v2-cf3cad0c0c3c295143a10cadc9bc0e33_1440w.jpg?source=1940ef5c" alt></p><p>作为林俊杰多年粉丝了，当然，如果他真的吸毒了，我也不会维护他。但吸毒全网歌曲下架了我仍然会听他的歌，反正之前下载过了，我对于艺人的私德容忍程度没有那么高，同时我同样认为，如果最终出来林俊杰没有罪，请把那些出来造谣的全部送进监狱，无证据造谣者必须收到相应的处罚。</p><p>我只说他这个圈子这个条件的人yp可以理解，没有说我接受甚至赞同他yp。</p><p>而且说作品说我是歌迷不是粉丝是什么意思？作品本就不代表人品，更不代表有了作品就可以降低道德标准可以犯错。</p><p>而是哪怕他违法被抓了，我也能一边听着他的歌一边在网上刷他落网的热点一边还能在评论区嘴他几句。</p><p>出了歌我买有钱买演唱会抢得到就去。林俊杰微博超话我不关注，入驻抖音我从来不看(我甚至没抖音)，粉丝最近和谁谁谁撕了我不清楚，生日我记不清。</p><p>私生活传这么久，一张石锤都没有，一个当事人都没有。从没有那个女生跳出来说：“没错！林俊杰就是跟我睡的！”</p><p><strong>但我始终是他的粉丝</strong></p><p><strong>从来没有。</strong></p><p>十几年了诶，不管是捏造还是空穴来风，连一张能支撑这个谣言的依据都没有。</p><p><strong>吴亦凡粉丝可以有十几个嫂子，而林俊杰粉丝，一个嫂子都没见着。</strong></p><p>另外点名两个地方：一个是贴吧狗吧那个ID叫雷军的，第一时间发帖造谣黑林俊杰，发完律师函后又立刻删帖销号跑路，如果调查完毕后林俊杰没有罪，我坚信这个人必须收到相应的惩罚。第二个就是微博臭名昭著的蹭热度的谢明皓。</p><p>其余的以后在更新，暂时不说了，心烦透顶。</p><p>本人也静待事情继续发展。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 人物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 林俊杰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些感想2021.8.02</title>
      <link href="/2021/08/02/yi-xie-gan-xiang/"/>
      <url>/2021/08/02/yi-xie-gan-xiang/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3f3e9958eca594c5b0bfb787fea65ac080eaf55c71312ad0761f75214afcbdc8">5de89d89894dfc04df6c90fd52cc9dd00610d1ea9fce7ba2cb06c84a46851c8bd1510e1fa7f1d7bf06374730a2c0ca7fda58b2ca76c6313e397a28e53312809b61a88d126d1c7d96f0df028d7bf6b0b0aca6aa9281ece6cecaced19d31fe13a8fea504f2cfdd125ee49808fc407e0890abed58ba82abedc61469ba80e61ca00d7772a1095afd76050d0c91b44b9fca054b195a7fa2b1ed816a987b79b140093ecea834524fadc97ea7fae67ce7765c5812d3bedff067b56e801167949fb853f8335e9808ff95b1f6d52eb3e5e93948cea70ca7d18cce67d35035c65a897bf0ea19d82224b0e97f72feab034520ef3d35ed5c02127d3c41591c5e00c21d016f34060ac7d554f73f8b40d5390b20fd9d60f7ee0fb4a08a127f0811535d89a57a441f85b58310c323e5c2b170f5da3114423b847cd75036b7df6fb352d220a3aca5bb6baf5a5ca42d8c6c5abae0c4b741d9412d75f25d8b9d76f9a24dae2587d183740e44b9d8761f8913103d04e9f7c98ef6640176c7b8534747d6a674e3eee90e0a577feca7d4e9fef8fd4059ef436b07f9b5eb53b161c956457b84537096ab51b588114aa9bca87c4b86253ffe86cd427cac1d64c306be1aad1a28908b2a86e4986d609a02fe90587c916c74a9c4ffff97653d26d12fd8a89904637f82604f8b76a902ac68672ccbbcd8669b3e851862b21fca69210b4e06fffa8b7f18d68d0ca9a26f3e7e08d8bb6381cca4c100fd076005de8ee67d03a0d5d059aea90a6a7b987d2539d5b5264b4b32b16c8c8fd41f6e46a5d50b018d80076ceee952b9aa8d52bf195a51e2b6a17a36172276c81b249c4a26e4ac9209f4aeb2547c2ff7408ccd03d90d9b93b8ea8ead2b2794eace769723d5bb8703e5a8b079f9b209ac8275c5f9a0f2a53b82b0398c02f267511d4d44ddf9c76593925d6cee8aa5b4a46b673530495bf1ed2b0ecf58782158fbe7927cdde161d61e10ddb3b2df9d646bdee5fc14ab02c9dc59921a13ec222a11af3880868ed54a6c95a1018cb55e2c981e702e3d0749646e192cf81ece2d6fe60422e4f66e9b6b41544574aa4ea0aa1672441782e20cecec6ed7077cef9a0d98a2fca18cc0f5bd58fc85dc8c8baa16d548dc8cc91e84fb0b6b6bb909c69aae62e286a26f20753e053a0532faa2698781c3a58a32dc71e0d15642da6c56dfcaff755f10316fa4c14835a73a6ed3067927485fef68d462aa45203fe3388d653cdfbe4a2c06f2025630c720eb33b339f42d2487a57191a02d72bdadb13556f4c0bec2964e8afd05c414ff65a4996335fc186f455debb37e1dc7351e4350ba11a7c2b055bf73b82ab817710309e2a8202a515debe2ae4232a9332c5793cf7e9271714aa221a7cc6dde098ee4357ad0cd27fccc9316675e982a86b82d7c925fe37e4e8085078a96ccf2ea8b38b92a833d54715567148966e1eb9dd5c198d6aa8271f7773141c2c0c41897758b11dba980ec487b355b4c1e8a40f253fd9e64a8eaea16717180bf6259b0822ea998584e35c93c489d03b34373213f6f4e18bade2ae30e014d8c8dfaf02ff449c318ab47095aa23a86f5a2dcf076be50320b3800165e84867c3a7272a96088c266d1ecfbfb54e0be9bc3cb4eee06a78745760874c65e9cf44dc4353ec392fce959751adbd53420f631e2341d6332d7378edba7373d291b7c4c6f8473d93ccdd5d436adfe1f4d32824b092dfb19670f146e84b9cc4cc4f01014d5f8814ce6b3bcdfc72bfe78084c85c384fca75d7df158ad321dd9fbfa28373b8409929d647bfed4d14c88d083d5ca566b362a2d76d3fd94bd7c5e3256c93d5970c47e23189623b9411690997b503753c93bc4ea1875fc309ce041584de714fbbf46066301a0c9dfc5278486a674c38769676fb8e38a3b179eff160bee9cd8aeef3080a733cec29e3de23a7c821b70e0aec26149c11c05ab3c1e354e56140381bb438f1d22db5b061654b4018bf4b31c78fab01b5ef66876190faa683ff7851e65b94527b665c2703fc6d309e9431944210a85f07fa39affb93753ee07b6cc3c0ba1241298fa4f1fd64feb5b2905c31e769dd499dca717c0e9162cb409df4aa02a5d75b059bc588b016fb3588945a512e5be74979188e4c3de5b87c9962ca352411adda54e1c2b2bc49760128bc1c3f06780689681743973d5267e4c66c39b547720e4694600b23678bd11ed685771c2bca636f82080bb234a3ee9977ae289a32453fa6bd9412abcc9894a607963b77b6ff59c612ff8ab551a44967f3fdee0b99f373086077025072c3490e2b8484c0680744254b31005db4ec3e9bb4db4e341ca828b5e8b6b59eeea429e8ce863ce26ca7bd5caaa077fc502736e738da2e3dc99a97ab0ec1ebca3d44c905c40b9828f53e059ca998de0e45297b51cfa166618e52f75c1653faa5e8c1dd7891dc1333d62a6ae562be0d4f6434047ac771f714c794aaa8df38f204cc7aa66deb2109a0d3066b381841d755a08166278cf51e145596c6daa6539071aaf168bf236598e671902e5b9d5677180fb1a2c8f188c9ff84d1ec67d0f953d224b13688b5ea5cebcc04b26f82f0b616ee7d28f2fd1ce9771391584334981eb2541a0f8dc00dbb9147db6860290149d021c29e3b5d546b19f27f73d1107e860127309b3dbc60aeffe5e556b2f2f0107ada6dd27453013f07b23d8b6cc067b342c2c2b14efe1bfe8b6deb584bd4108fb44cc7e88e86f95b4424825c8e6b76d122115ac408675848cfceca0b31e4385fe42ba048a5bd2d46765d4faa6b09d7afcde15d1479ec3ec2098fbaa7635a848c26a41a26b2bdb95c705b732082a5593a23d1287a7f39469ea368e471929ae6519698665d34931a98ac47adccf980a14cab9abc3d1294f0ca50eb71d9c9838bce786af112f19923cf326c57ab7d3721cfcfc6dadf410a2e129a410d45e285ca56437e01ab0f57079fb613e596cb8692834dc35147af0008d4f3271d98d44b4a9ebce3bc69d89344fe5029d567ab7a3535bcaf359d43960debb51fdfc4f5b35de6e67953b55afb12808d7df46a1d16bc94c72b64ced910ffe480078bd89b6b8584506ec4320418c680ee7c26ca10d0d13bf6340005248ee82cc24b55c176eb4bac716b264c85883cf57ae311df4af066e97b1a3b866d7921bccf9232c50237f94e04b1ec684da5870f0af8799c723ab42355471dbc17be5fd50a4ba1cc836e784be0e1f5db19bfcead3dac304f733c17598771f29d7c7f78c13102a781cf10fb6e34a7c0fec385d0ec73714460dbbf4bac101694b3d384a0741dd7e279920900fcb6d7f6df1ce3cf544488d80eff40005c4153870473345682ffbea8d7dd3942560306ca04706880c1e83e39313fdaa078de90748d9beb409b8ace91f693576f840e891087dcca5a7ec4a57439b56f1151d63247fd4e384b4992bd8d7796a9c9135632d0b3095910545bb99894143660a4a9969c7de2b339c031011299e2eecc81037dc65059ef591dd0bfb10c9b9cc0a0e882996c87a503c4202</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu!  enter your password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 写给自己的散文诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 写给自己的散文诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《在路上》</title>
      <link href="/2021/08/02/du-zai-lu-shang/"/>
      <url>/2021/08/02/du-zai-lu-shang/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="6e8b7a38404d04abc36db8a353f2ce3062b204855862f3875e7f25c76c2dac71">5de89d89894dfc04df6c90fd52cc9dd0b3f8746dd64ae95603cc2a764f54fbe79b5ad1609005c87f89d9cba430f0bed7522647b431d7f6971bae8dd0b3b65b36ffff4d2c659870d5cab23a7244545c6cb656286921f2a5b316e3fa719c8987717869e456c3001f717180cc13df6abfa4711f2a29a88074f13ec9af5f275a33312b97ed55ec387dbcddb1dbfd560dedcf42ab8f8e68fef1204bb268741afde0cd0abab25819c684cce7fa797d2264f3b785221519160fda79f8ced9eb626215826c08177f3680319729dbe0f59cb7f85c5bf3d3085c514b29fa7337f9ad5d2818f794f43eb336b28216fd9295f820189cdbb76934fffcaccb1ccee3e731588993ba483bb7d2c6cdc0870ea39cc0849c356a98304e0172878beb23c68ed11c4ea8268494a31372585ed81a9dc4676f33dbe7b6825edcf290abc46fb291200f4f8e52b615726abf5b38f10a48fd6e943e9a26e9cb91e10cf07b1d03064d4386e270f182593deb36b88a864a5d5825be03ef4e2e96a75b50c4d61875ebf161aae8725082e9532a65e0f940f7b3e3b5cc4aee5d497ddb99e6d583135ec3b57c330a8695275db8112567bac5bf575c4f3c5d59ddaedd803d9c88061b9031a09dfe6d3b6394676517d5b136231bf9d29080556ab82494eccffb5f67a7fe6b4c9a3d1a856db64a7d26d818004835ea96a35b0524f5272bfa59f41a054bdc6716de1dbc139cd019451ff000f928c23531323b549d35b3d340c584a08ac694dd82eade23e82ea234d75020ed3fa1240abdd713a7fe39de8de05035ca65b19610010ef42ce023f7a042d4c4791db0c6f78b9022043241c943dba3382c12838357327350601b312ba07b05837991f1f8042fa52436d58cad078bfcccf80789bb8258d355e5a4f09285efc0ee4cb8b66ae1b858c39a142b9b8292511db6c7b701784ef9d99da55b1a736a12a5562474de1c23add7a0a89e8112bdf9cfa22901823d3d2c5ae4b9da49f1d42194e0c14c13a52aeed9f669772613a1095d95a19eeef24bd4c72a1a39d6c4b216dcea878e59f8e89d2ffd848bedfe5fc506b8fad576a2b496bad7087d216a7240adc6ca1f545372e9b710572d2945cf02a34fad0be48b18d6404e06a25d7d95f5d42e17f9fb7026d5df6a2daa2676e954cd059ccf14867c9b1a1d8d76025236c1acf8afd4dc4e3feb06b42078c9d4bd7d30ac95cb984a9f6bf5421159baff3914a18716760c4f94a170435eaaf10517c5b19ce6ae9efb948a3663a277dbd5b1b92df39751d871176c3f8f977ea79b9e7a7b573b86cd177440a9ec0f454eb63f3b0141aafb16c80f0b3e0b5b393fda4ac89dc77c1a65e655a0f2740dd609955796f987f284ad9f3cc3bb67454205432ba22966e31efed29dc87c656431650b6c3bb6939b1c5ef547199ea96c1b26373b9c94f843169628873b47e8406d02dd4f0a996564ef74d5193024e41abe6fc85c68e4e7aa75e513a27bd887ea967997f273a233ff8211d8bdfea58c647383b64a0a5435e5a8ca46b38a1a5ff79f259b1ef91de0b80bef9bb25e127f81bc299ac0fcf9358b8736547b98c69613157680fb2b3c2db5a9f2a75403660b9dccac18752c44abf4022466af4d1a982506b94425d8715e71b5a40690b4623503a4d896713188bd635d40adc76bef17d9f6d7afd8eecbeeb911df770605b4be1c242ab39529348fce4b248c8411b1006f38c4702bd60b6f8de59830739ce4b74569472fff8ebb3692a5fb0c6e053b0e08e446295f11a4a8c1b137c03c7a1b32eb68442dfffc9b87191d5a2ea7589737b7a80ce99c356a75a3250851b7bc822c6969b044ef75b3b755cbcba52d8cba3f0f8445a7c26780e11dcbf536bfaa8f9009fbfbb24e8e4a8a3cb039eb85e0e8a0a56f684a60b80409a1dcc976b7e66d0f497fb23264a72690a07a21109dd618c6589e0d2316069fed3462b7e4801612ce59883b03b96ad84285a522f43454b5e6e851908f3505d6dcf1aba123e23cbee53934e47beb1cf788b2b45f23afac4f2ae62d4e030ad6126d63f848a1dafcfad123d9c170ca52cb45b8f196dde72458fc79c7c2682c27aad666b698990c9f176f487be3343e7d2b7d40d3437b3fbae3214731fd040137d9ab22b2b8773e6060c440864c79b9890f1e71f45b54370d9101dc308d6529e14646c6970d2bdfa8ed7e7ee161a16f751555bb785c74c7a481b2a6612009249ec45c0907efb0169d312bea0bbdceaf9ed0c3866ab999d6847cce2c19e320355d673e81b24c524ed20f8a090664ef82b133fce1768148132af8623ba053e197560eecc88c2f395e361cd44e034116133afbd9be07ad9df57b1f0ae92b9d9944b0d2c7eda249807637de3b76be362138b9a8a82c28509cc9997843ea7a67e030b648b809e1b5d5857d8be863c220c287c4058eac6a007342fe8820d76c1ce32084141a82e7f675af2225bbfbcef0bf15d6da00d93f9cc5c2baf08927165be21c614f86ec9bd02072d4c86867e68b55a0121726543d7745085f01ae16b4e92252c46d38ab18312cd42366d215a2820e402a2f929d906896bb155f8e6b7b87f6f4093be6a8be23a0e1e78f60888d69eaf338cf2ca9ebe25986c8977fab0a3d21cca6ce86950cd0f523864f2ce5d9c6aa1c1e0d9c63ce214632fbaabf999c7c41ede5e540817dd1a7cac7a38e1c2ae3aed5eb686a4ae4b2d5ac8cdc9b3e4d18e82404cc23fe035733fef06319e814a9093d35f60c11ee70b9205d12fd4467cb996021c1bd5016826ab7c610eef0a34826ad7af2b22e12e4c0938326a79ade8ae8a88352e60b62d21b7a7362f659f600651af7f2ef1c1b8a26fe9527f413e6852d80f2721347dc66335941d2833de4bf3f9b79b94e7184c68b0a04c2dc89808c94a3e4246631d7fadb7e6e69d3cdb567d86c1c0f0f356cefbac0886feb0d1d022631134f6ad11433dff6609266daf1fde250bf7a8057142d72fdfe7d1f0bc250742d8dd2e6a8c5c2d4af99019a3485748809e9eb0f899f084bcbb2b412f6fa1a6df6085b357f3d9f234eb8db87b867d8c6cf1bc77a93a46721d290162662c7473ccdc7b9327546f90be28604cf47bac755b8fa5a7dab871bf7e755a6ee08322dada97037d21144bcc543fe4a95cfcedbcf8cff1e50239ebe7bca33f3f20908608bb5c86888551d84c5bf5a457232e85ba101644704fb3a52874189ba889e00d1ad83ffe6bada129670d587043244e09d5a72f8eba4504dfad939cf1938e2667cc004a1f290eb0f95c9be1e9c03682fbd8c17fd978d38d1280dbdd9846620172f5440ca587e75e0c6b6390189aab7c6b63bff0f601d42f7e13e119baef8d3c0c91fa2eb2fc91b215dd61ca33a514f89d87a74af4025df7e6c5d8db1e575da7698ce5b8cc513c9f72b87c8648c5a5f81a5b26242896b0ebe84f7dc66f2b57ad5de5404f0ab90b4b49a6374413094d880be39410a52968a382804b5b225bf61d44ab692f5a1d2d42f1117f52604735e43adc97003afea64d377d678a2ff9bf729daa001512bfec916c1703e94ba3779d8ba311f45826ffa86caa248760df2ce4ddb51896da89bbbb9af9d790eb10b2ff24d04e64940ede44ffa93ad612588c777273d09b10be48aa9433956ab3e2b96ab14c04be6e67f465b31a0e7eebac5ae01c39fd3d2fcaa2243ab4ab3ef632f0d2e5c0c99620341d4b3cb435a5e6c39bdf05d04f73c866568aa331707273a73593663a1541895a766f39ddbd7f375d98b1b47fd8ec6f51072b94c5586fce1fb43e7892d21c3b84eb76b446b77f57cdfca5400d1178fe3b7f5c93c2035e3eeae3b303fb7a5da2625eaa3609dabf898f410fdf4fd71f6524d20d57247cde5609815b5e13165d9b58a963588ac53885852a0dba95f91a07264cb73d79e7fef5f347385738f1389684cac06a5b2615e1e88dba0deedc3530a53730058cb152710f2d83c9485421328df205ab6b5a4a2c71e04d486acd8b676d1f9ccff3dffd0741f9c46df83e1cc135b44583702032d7cadea96052d96d14cf20e8bc35410533cf02d8a478a4c9911affb345dff3a7502756c33a013fbea0fe11c561e1d2be7f8d1678decf6a3c2d99f1a422cc86cf2b700c6c25bce6419f08f4a19f6bfa50e9fecee71f86cbe8a0396703d36e8eb314dcec13adbe0c5e77560a34f40ba5329671f723921cfedf6079b11cb6722d4e1bc7af7d7c53b712fd8521cd7d1c23e197c83930675d016cc39c55d94329d4e1723648c30a1924986a5e43c2db66d17f4c7a7b4c07ae39bb043ab99888a3c6b776f946182b28afc58327bef6560e73ab5e7cfa18fbf8ddf83d8600c43507586ef4b99a8d795254990d213e1d4b79c05c395f31d9279ef891f19136ddbcd2c891af42f0a5dc54054cbcc18ccaadf92eadb575c93773eb3a122915ba1d5debc226f670f5d41423012d3fccfab80cfc44a1e65bb55d43c80d2321062bf19791bd45671defa63ab1902a0d6531d460201434bb9e255f7aab5d3228deb6635df79ba6f992006625efcf704c348a7178ab593b1dd5fc4f444d76089a88da9310f62bc24ba9cfa08b0c7f4ac0f0afa7ef077f2ed6778aa808d01e575705b8479a4a2d869ee429888ccb609a4a7aa6648856071623be092e0d87b764d70d44ace9bef7452fed40c23e7bc7e719d9db9fc0a120b92904f3f86ae7ba78d2ae5997ab680f8e5d57065cbde6da7762c3ec58902c010941517905567b9cecaf86cc5f9052695ef9db5200cea10175507b5e22338c8118bfbf7b9d2fa00a3b89c425af168c37ead141f236684a73796de4a2d164db4e83d09e4643ec550072ae1f0aa11223083b178a7b56710d004b90989fedf871c656a16a0791fc0853372b390f40e7cc1368ece7df6ef35f08a52188f4e308045793e6bbf25c7ae6b0c9d1b188082f1ea6d7bf5d1b7db937489814a16c51e70bcd946dd3625320a9932e3523c3ceb4b39e51c49b59ca431bcb78b90a6a043890caefe845f9d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu ! enter some words to prove</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 书评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
            <tag> 写给自己的散文诗 </tag>
            
            <tag> 书评 </tag>
            
            <tag> 在路上 </tag>
            
            <tag> Jack Kerouac </tag>
            
            <tag> 舒国治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git|nvm|npm|命令行|linux|jupyter notebook等各种乱七八糟的指令大 全（持续持续缓缓更新中）</title>
      <link href="/2021/08/02/git-nvm-npm-ming-ling-xing-linux-deng-ge-chong-luan-qi-ba-zao-de-zhi-ling-da-quan-chi-xu-chi-xu-huan-huan-geng-xin-zhong/"/>
      <url>/2021/08/02/git-nvm-npm-ming-ling-xing-linux-deng-ge-chong-luan-qi-ba-zao-de-zhi-ling-da-quan-chi-xu-chi-xu-huan-huan-geng-xin-zhong/</url>
      
        <content type="html"><![CDATA[<p>本博客更新不定期，基本上是想到哪里就写什么，就是一些各种常见的脚本命令。</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><hr><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><pre class="line-numbers language-sh"><code class="language-sh">git clone ssh地址   # 项目克隆到本地git add .    # 提交到暂存区？好像是git commit -m""   # 提交到仓库git push origin main(master)# 提交到远程仓库git clone ssh or http  # 克隆到本地<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>暂时就这么多</p><h3 id="本地代码上传到github仓库"><a href="#本地代码上传到github仓库" class="headerlink" title="本地代码上传到github仓库"></a>本地代码上传到github仓库</h3><pre class="line-numbers language-shell"><code class="language-shell">git init  # 建立git仓库，cd到本地项目根目录git add .  # 将项目所有文件添加到仓库中git commit -m"说明语句"  # 将文件commit到仓库# 去github创建自己的Repository<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://pic1.zhimg.com/80/v2-a4e249c5e85f6f5ca6c56fc916c150ac_1440w.jpg" alt></p><p>点击<strong>Clone or download</strong>按钮，复制弹出的地址<strong><a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:\</strong>*/test.git**，记得要用SSH的地址，尽量不要用HTTPS的地址，如上图所示</p><p><strong>将本地的仓库关联到github上—把上一步复制的地址放到下面</strong></p><pre class="line-numbers language-shell"><code class="language-shell">git remote add origin git@github.com:***/***.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传到github之前，先pull一下：</p><pre class="line-numbers language-shell"><code class="language-shell">git pull origin main(or master)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传到github远程仓库</p><pre class="line-numbers language-shell"><code class="language-shell">git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><hr><h3 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h3><pre class="line-numbers language-shell"><code class="language-shell">nvm lsnvm list  # 列出当前node包nvm -v  # 列出nvm版本nvm use 版本号  # 使用哪个版本nvm install 版本号  # 下载哪个版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加速源"><a href="#加速源" class="headerlink" title="加速源"></a>加速源</h3><p>在settings.txt后面加上我们的这么几行代码：</p><pre class="line-numbers language-shell"><code class="language-shell">proxy:node_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以加速我们的下载</p><h3 id="记得有时候要更改环境变量"><a href="#记得有时候要更改环境变量" class="headerlink" title="记得有时候要更改环境变量"></a>记得有时候要更改环境变量</h3><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><hr><h3 id="指令-2"><a href="#指令-2" class="headerlink" title="指令"></a>指令</h3><pre class="line-numbers language-shell"><code class="language-shell">npm inpm install # 都是安装对应包，但是前者会找到最新的包给你安装（似乎是这样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h2><hr><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><hr><pre class="line-numbers language-shell"><code class="language-shell">hexo clean && hexo g && hexo dhexo clean && hexo g && hexo shexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="传统建立文章方式"><a href="#传统建立文章方式" class="headerlink" title="传统建立文章方式"></a>传统建立文章方式</h3><p>一般我们都会使用 <code>hexo new &lt;title&gt;</code> 来建立文章，这种建立方法会将新文章建立在 <code>source/_posts</code> 目录下，当使用 <code>hexo generate</code> 编译 markdown 文件时，会将其 HTML 结果编译在 <code>public</code> 目录下，之后 <code>hexo deploy</code> 将会把 <code>public</code> 目录下所有文章部署到 GitHub，这是我们熟悉的 Hexo 流程。</p><p>这种建立文章方式的缺点是：若我们同时编辑多篇文章，只要其中一篇文章尚未编辑完成，也会随着 <code>hexo deploy</code> 一起部署到 GitHub，也就是 GitHub 可能会看到我们尚未完成的文章。</p><h3 id="建立文章草稿"><a href="#建立文章草稿" class="headerlink" title="建立文章草稿"></a>建立文章草稿</h3><pre><code>$ hexo new draft &lt;title&gt;</code></pre><p>Hexo 另外提供 <code>draft</code> 机制，它的原理是新文章将建立在 <code>source/_drafts</code> 目录下，因此 <code>hexo generate</code> 并不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署到 GitHub。</p><h3 id="本机预览草稿"><a href="#本机预览草稿" class="headerlink" title="本机预览草稿"></a>本机预览草稿</h3><pre><code>$ hexo S --draft</code></pre><p>虽然 <code>hexo generate</code> 不会编译 <code>source/_drafts</code> 目录下的文章，但 Hexo 的 <code>Hexo server</code> 另外提供 <code>--draft</code> 参数，这让我们只要搭配 <code>hexo-browsersync</code> plugins，就可以达到一边编辑 <code>markdown</code> 文章，一边使用浏览器预览的目的。</p><h3 id="将草稿发布为正式文章"><a href="#将草稿发布为正式文章" class="headerlink" title="将草稿发布为正式文章"></a>将草稿发布为正式文章</h3><pre><code>$ hexo P &lt;filename&gt;</code></pre><p>其中 <code>&lt;filename&gt;</code> 为不包含 <code>md</code> 后缀的文章名称。它的原理只是将文章从 <code>source/_drafts</code> 移动到 <code>source/_posts</code> 而已。</p><p>之后的 <code>hexo generate</code> 与 <code>hexo deploy</code> 的用法就完全一样了。</p><p>若日后想将正式文章转为为草稿，只需手动将文章从 <code>source/_posts</code> 目录移动到 <code>source/_drafts</code> 目录即可。</p><h2 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h2><hr><p>.ipynb转换为.md、.pdf、.tex等格式：<a href="https://blog.csdn.net/red_stone1/article/details/73380517" target="_blank" rel="noopener">https://blog.csdn.net/red_stone1/article/details/73380517</a></p><p><a href="https://blog.csdn.net/qq_35423500/article/details/79565146" target="_blank" rel="noopener">cell的markdown与code指令快速更换</a>:在vscode中可以选择tab+y or tab+m自由切换，还有一篇<a href="https://blog.csdn.net/wield_jjz/article/details/105607301?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.control&spm=1001.2101.3001.4242" target="_blank" rel="noopener">博客</a>讲的也挺好</p><h2 id="改环境变量"><a href="#改环境变量" class="headerlink" title="改环境变量"></a>改环境变量</h2><hr><p><code>Win + R</code> ，输入：<code>SystemPropertiesAdvanced.exe</code> ，回车。</p><p>然后点击 <code>环境变量</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C1.png" alt="0"></p><p>找到 <code>用户变量</code> 中的 <code>Path</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C2.png" alt></p><p>然后在里面修改一下 <code>npm</code> 的路径，我的是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C4.png" alt></p><p>点击确认之后，再进入 <code>系统变量</code> ，找到 <code>PATH</code> ，点击编辑：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C5.png" alt></p><p>然后修改 <code>nodejs</code> 的路径，我的是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="git-nvm-npm-%E5%91%BD%E4%BB%A4%E8%A1%8C-linux%E7%AD%89%E5%90%84%E7%A7%8D%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E6%8C%87%E4%BB%A4%E5%A4%A7-%E5%85%A8%EF%BC%88%E6%8C%81%E7%BB%AD%E6%8C%81%E7%BB%AD%E7%BC%93%E7%BC%93%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%5C6.png" alt></p><p>然后就可以正常运行了。</p>]]></content>
      
      
      <categories>
          
          <category> 指令集 </category>
          
          <category> shell命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> nvm </tag>
            
            <tag> npm </tag>
            
            <tag> linux </tag>
            
            <tag> 命令行 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些小知识</title>
      <link href="/2021/08/02/yi-xie-xiao-zhi-shi/"/>
      <url>/2021/08/02/yi-xie-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="似乎不太正确……算了吧，没啥好看的" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="34cee35cb45aed522f9a889a2555c305fdfd781220ad239a0e38f2f27406735d">10d79030e8222445804370796b90fca19546fd7454b6ce835c19dd35fdfc5eb70066be35ece83facf975a45633f6c77bafee90d5af3d8e3ef70fff06e05766dfabce520ef766a86d4db753a1af8bb54108d1866d040fab1f020558624c5752905e36b020cf2d893ea43c3c7b65288e669b2179adb1b5b7854e7dd43029a0ce3db791988e0e00f669785575b4cc880c4a4285afe76b8ce751fa1665c75def274362966550914b6c8a03e456c777f5924925d8c3c787eb4c1b339b22d34eff8e3a0836cd46f1d9bc1b8aed1c0054a5efaa0e73bf6bb94bbc3acf0defd321f6ba48067512ac62cc6e472bd498185916a2a96de5b7d5e6d9f652531d7f26ea36d959d35729c5f94165c41c681427c5d445c47c62bbcbe1003b77f0c71c5fbd553aa66cbfb79b3104e1ec9827a0215835946e514632b2d1bf92a13f515c6eb1783b2d81dd91885d0c7cbcc52f2969ba4652d4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">Not IP of Mr.Lu ! enter some words to prove</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数码知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
            <tag> 数码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>readme</title>
      <link href="/2021/08/02/readme/"/>
      <url>/2021/08/02/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="逯润雨的博客"><a href="#逯润雨的博客" class="headerlink" title="逯润雨的博客"></a>逯润雨的博客</h1><p>这是我本人的博客平台，欢迎大家前来访问🥳<a href="https://lry89757.github.io/">https://lry89757.github.io/</a><br>刚建成没多久，有许多功能都不是很完善，我以后会在readme文档中记录更新功能与修改BUG与新的相关文章的。  </p><h2 id="9-16-13-21第二十一次更新"><a href="#9-16-13-21第二十一次更新" class="headerlink" title="9.16 13:21第二十一次更新"></a>9.16 13:21第二十一次更新</h2><hr><ol><li>更新了readme文档</li><li>更新了关于MIUI的一个吐槽的“小米圣经”。还有一个关于编解码问题的转载，另外就是关于一个深度学习常见名词的讨论。</li><li>待完成：评论+音乐全局播放。</li></ol><h2 id="9-11-10-05第二十次更新"><a href="#9-11-10-05第二十次更新" class="headerlink" title="9.11 10:05第二十次更新"></a>9.11 10:05第二十次更新</h2><hr><ol><li>更新了readme文档</li><li>发布了两篇博客，一篇关于pandas，另一篇是一篇乐评，关于林俊杰的以后要做的事</li><li>待完成：评论+音乐全局播放</li></ol><h2 id="9-8-21-44第十九次更新"><a href="#9-8-21-44第十九次更新" class="headerlink" title="9.8 21:44第十九次更新"></a>9.8 21:44第十九次更新</h2><hr><ol><li>更新了readme文档</li><li>发布了一篇关于Dian团队的博客，算是初体验吧。</li><li>发布了之前采访我们学院谭副院长的访谈记录。</li><li>待完成：评论+音乐全局播放。</li></ol><h2 id="9-6-13-13第十八次更新"><a href="#9-6-13-13第十八次更新" class="headerlink" title="9.6 13:13第十八次更新"></a>9.6 13:13第十八次更新</h2><hr><ol><li>更新了readme文档。</li><li>AIpi答辩终于完成, 发布了有关目标检测的笔记、FasterRCNN源码解读笔记以及数据增强笔记三篇博客。</li><li>发布了常用的Pytorch-Cookbook代码，这是转载的。</li><li>待完成：评论部分，音乐全局播放。</li></ol><h2 id="8-26-11-22第十七次更新"><a href="#8-26-11-22第十七次更新" class="headerlink" title="8.26 11:22第十七次更新"></a>8.26 11:22第十七次更新</h2><hr><ol><li>更新了readme文档</li><li>稍微优化了一些东西，使界面更加美观了</li><li>待完成：评论部分</li></ol><h2 id="8-25-15-30第十六次更新"><a href="#8-25-15-30第十六次更新" class="headerlink" title="8.25 15:30第十六次更新"></a>8.25 15:30第十六次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了几篇博客</li><li>尝试了一下英文版</li><li>增加了留言板，但是还没开放评论</li><li>待完成：评论</li></ol><h2 id="8-19-18-09第十五次更新"><a href="#8-19-18-09第十五次更新" class="headerlink" title="8.19 18:09第十五次更新"></a>8.19 18:09第十五次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了几篇博客</li><li>添加了张大佬的博客友链</li><li>重新更改完善了简历</li><li>待完成：依然是评论</li></ol><h2 id="8-12-12-11第十四次更新"><a href="#8-12-12-11第十四次更新" class="headerlink" title="8.12 12:11第十四次更新"></a>8.12 12:11第十四次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了一篇爬虫爬来的博客，完善了一些文章</li><li>待完成：评论</li></ol><h2 id="8-10-12-03第十三次更新"><a href="#8-10-12-03第十三次更新" class="headerlink" title="8.10 12:03第十三次更新"></a>8.10 12:03第十三次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了3篇关于以太坊、反挖矿病毒的博客（转）</li><li>待完成：评论</li></ol><h2 id="8-10-0-00第十二次更新"><a href="#8-10-0-00第十二次更新" class="headerlink" title="8.10 0:00第十二次更新"></a>8.10 0:00第十二次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了一篇博客，关于梅西</li><li>加了个友链</li><li>待完成：评论</li></ol><h2 id="8-7-14-13第十一次更新"><a href="#8-7-14-13第十一次更新" class="headerlink" title="8.7 14:13第十一次更新"></a>8.7 14:13第十一次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了两篇博客，关于LeNet分类CIFAR10和常用tensor操作</li><li>解决了首页图片加载不出来的问题 <del>（换个小点儿的图片就行了）</del></li><li>待完成：评论+外链</li></ol><h2 id="8-6-22-44第十次更新"><a href="#8-6-22-44第十次更新" class="headerlink" title="8.6 22:44第十次更新"></a>8.6 22:44第十次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了一个全英文的CIFAR-10数据集的详解<del>（英文水平太低，写了好长时间🤐）</del></li><li>待完成：评论+音乐外链</li></ol><h2 id="8-6-12-33第九次更新"><a href="#8-6-12-33第九次更新" class="headerlink" title="8.6 12:33第九次更新"></a>8.6 12:33第九次更新</h2><hr><ol><li>更新了readme文档</li><li>增加了一个项目</li><li>更新了shell指令的博客</li><li>解决了代码高亮</li><li>待完成：音乐部分、评论模块</li></ol><h2 id="8-5-23-48第八次更新"><a href="#8-5-23-48第八次更新" class="headerlink" title="8.5 23:48第八次更新"></a>8.5 23:48第八次更新</h2><hr><ol><li>更新了readme文档</li><li>把算法刷题的栈系列解析肝完了， 一共六篇博客</li><li>待完成：见第三次更新，不过最要紧的是代码高亮和音乐部分。</li></ol><h2 id="8-4-15-28第七次紧急更新！"><a href="#8-4-15-28第七次紧急更新！" class="headerlink" title="8.4 15:28第七次紧急更新！"></a>8.4 15:28第七次紧急更新！</h2><hr><p><strong>感谢帮忙测试朋友提出相关意见，我关停了网站对一些隐私做了紧急修改，感谢各位的帮助！</strong></p><h2 id="8-4-11-40第六次更新"><a href="#8-4-11-40第六次更新" class="headerlink" title="8.4 11:40第六次更新"></a>8.4 11:40第六次更新</h2><hr><ol><li>更新了readme文档</li><li>添加了转载限定规则模块采用知识共享署名 4.0 国际许可协议<del>（虽然我的文章不值得被转载）</del></li><li>取消了轮播图自动轮播，去掉了没用的音乐外链</li><li>增加了IP检测（excuse me ?)🤣😅</li><li>待完成：见第三次更新</li></ol><h2 id="8-3-15-39第五次更新"><a href="#8-3-15-39第五次更新" class="headerlink" title="8.3 15:39第五次更新"></a>8.3 15:39第五次更新</h2><hr><ol><li>更新了readme文档</li><li>博客：对于林俊杰最近事情的看法</li><li>加入了音乐播放功能哈哈哈哈！！😎😎当然目前的音乐都是我知道能够外链播放的，后期会继续整修的（没发现的朋友可以看页面左下角哦）</li><li>待完成：见第三次更新😬</li></ol><h2 id="8-2-22-25第四次更新"><a href="#8-2-22-25第四次更新" class="headerlink" title="8.2 22:25第四次更新"></a>8.2 22:25第四次更新</h2><hr><ol><li>更新了readme文档</li><li>友链增加了flylee，同班学霸</li><li>博客：写了一些对生活感想</li><li>进一步修改了markdown数学公式无法显示问题。</li><li>待完成：见第3次更新😁(我不催我自己！！！)</li></ol><h2 id="8-2-18-39第三次更新"><a href="#8-2-18-39第三次更新" class="headerlink" title="8.2 18:39第三次更新"></a>8.2 18:39第三次更新</h2><hr><p><del><em>看来刚建好博客更新的就是快啊……哈哈哈</em></del></p><ol><li>更新了readme文档😅</li><li>发布了2篇博客，一篇是读《在路上》后对生活的感想思考（有兴趣阅读的可以和我联系索要密码，破译出密码的大佬记得和我联系🤩），另一篇是常用的shell命令（git/nodejs/nvm/npm）集</li><li>实现了推荐置顶功能</li><li>待完成：<ul><li>二级目录</li><li>相册</li><li>代码高亮</li><li>评论</li></ul></li></ol><h2 id="8-2-14-28第二次更新"><a href="#8-2-14-28第二次更新" class="headerlink" title="8.2 14:28第二次更新"></a>8.2 14:28第二次更新</h2><hr><ol><li><p>更新了密码功能，对于一些文章实现了加密， <em>如果有小伙伴们对加密文章感兴趣，欢迎发邮件或是通过各种渠道联系我获取密码，顺便交个朋友👀</em>， 或者有关大佬可以选择直接尝试破译哦~那就更得交个朋友了😅</p></li><li><p>更新了readme文档</p></li><li><p>发布了一篇博客，关于一些数码小知识，并测试了密码功能。</p></li><li><p>待完成：</p><ul><li>代码高亮功能</li><li>二级目录</li><li>记录nvm、nodejs、npm踩坑历史的博客。</li><li>评论功能</li></ul></li></ol><h2 id="8-2-11-00-第一次更新"><a href="#8-2-11-00-第一次更新" class="headerlink" title="8.2  11:00 第一次更新"></a>8.2  11:00 第一次更新</h2><hr><ol><li>友链：修正了部分无法显示问题， 加进去了更多友链</li><li>发布了3篇新文章，全部都是关于numpy的小知识</li><li>增加mathjax已解决无法显示markdown数学公式问题</li><li>更新了readme文档</li><li>预计会进一步：  <ul><li>二级目录</li><li>一个博客记录nvm、nodejs、npm踩坑历史😖</li><li>评论模块</li><li>文章密码问题</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy中对于tile的理解</title>
      <link href="/2021/08/02/numpy-zhong-dui-yu-tile-de-li-jie/"/>
      <url>/2021/08/02/numpy-zhong-dui-yu-tile-de-li-jie/</url>
      
        <content type="html"><![CDATA[<p>近些天使用numpy的时候发现了这么一个函数tile，感觉这个函数比较有用，可以将减少循环，直接矩阵运算优化运算速度。博主认为很有必要认真讨论一下这个函数的功能。</p><h1 id="官网解释"><a href="#官网解释" class="headerlink" title="官网解释"></a>官网解释</h1><p>老传统，我们先看一下官网是怎么说的：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210708233501849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="np.tile"><br>相当于是一个复制函数，扩充矩阵的规模值直至到我们满意的一个形状。”tile”在英文中作动词会有“铺”的意思，与extend是同义词。<br>通过提供的次数reps来决定重复A的次数来构造一个array。<br>如果reps的长度为d，那么给出结果的维度就是max(d, A.ndim).</p><p>如果 A.ndim &lt; d，则通过添加新轴将 A 提升为 d 维。 因此，将形状 (3,) 数组提升为 (1, 3) 以进行 2-D 复制，或将形状 (1, 1, 3) 提升为 (1, 1, 3) 以进行 3-D 复制。 如果这不是所需的行为，请在调用此函数之前手动将 A 提升到 d 维度。</p><p>如果 A.ndim &gt; d，代表通过在它前面添加 1 被提升为 A.ndim。 因此，对于形状为 (2, 3, 4, 5) 的 A，(2, 2) 的重复次数被视为 (1, 1, 2, 2)。</p><p>最后注意一下：这里特意提到了<strong>虽然 tile 可以用于广播，但强烈建议使用 numpy 的广播操作和功能。</strong></p><h1 id="详细解析"><a href="#详细解析" class="headerlink" title="详细解析"></a>详细解析</h1><p>我们首先来看几个简单例子：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如代码所示，如果reps只是一个标量的话，我们仅需将其在矩阵内部加上赋值reps倍即可，而如果是矢量矩阵例如reps是（a, b, c）的话，我们需要在内部扩充c倍之后，将这一个整体矩阵看作是一个A然后他是形状为（a,b)里面的一个元素，这样的话我们就能够成功理解有关操作了。按照这个思路，我们看一下更加复杂的一些操作：</p><pre class="line-numbers language-python"><code class="language-python">b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上最后一个便是我们所谓的广播操作，但是numpy官方并不希望我们利用这个函数来进行广播操作。<br>最后仍然放一些实例吧：</p><pre class="line-numbers language-python"><code class="language-python">c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">b <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">28</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">27</span>  <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">4</span> <span class="token number">22</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">23</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.tile.html" target="_blank" rel="noopener">https://numpy.org/doc/stable/reference/generated/numpy.tile.html</a></p>]]></content>
      
      
      <categories>
          
          <category> numpy的小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 矩阵运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy中对于axis的理解</title>
      <link href="/2021/08/02/numpy-zhong-dui-yu-axis-de-li-jie/"/>
      <url>/2021/08/02/numpy-zhong-dui-yu-axis-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我们知道axis这个东西经常出现在numpy的sum、argsort等一系列有关于数组的操作中，numpy中的轴axis是很重要的，许多numpy的操作根据axis的取值不同，作出的操作也不相同。可以说，axis让numpy的多维数组变的更加灵活，但也让numpy变得越发难以理解。因此，弄清楚axis的作用显得尤为重要。作为一个很基本同时很重要的概念，博主觉得很有必要详细深入了解一下这一名词。<br><em>下面把博主的一些发现分享给大家。</em></p><h1 id="简单了解axis"><a href="#简单了解axis" class="headerlink" title="简单了解axis"></a>简单了解axis</h1><hr><p>axis 中文翻译指“轴”、“枢轴”。我们可以看一下<a href="https://numpy.org/doc/stable/user/quickstart.html#the-basics" target="_blank" rel="noopener">英文官网</a>的解释:</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210708104217716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="关于axis"></p><p>NumPy 的主要对象是同构多维数组。 它是一个元素表（通常是数字），所有类型都相同，由非负整数元组索引。 在 NumPy 中，维度称为轴。</p><p>例如，3D 空间 [1, 2, 1] 中一个点的坐标有一个轴。 该轴有 3 个元素，因此我们说它的长度为 3。在下图中的示例中，该数组有 2 个轴。 第一个轴的长度为 2，第二个轴的长度为 3。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实际上这个维度称为轴并不是很好理解，必须<strong>说明这里的轴维度和我们数学物理上面的是有很大区别的</strong>。</p><h1 id="与数学物理方面的区别"><a href="#与数学物理方面的区别" class="headerlink" title="与数学物理方面的区别"></a>与数学物理方面的区别</h1><hr><p>我们现随机建立一个3×3的数组。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.14828241</span><span class="token punctuation">,</span> <span class="token number">0.67698515</span><span class="token punctuation">,</span> <span class="token number">0.22729984</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.78760285</span><span class="token punctuation">,</span> <span class="token number">0.71820171</span><span class="token punctuation">,</span> <span class="token number">0.43459394</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.85447318</span><span class="token punctuation">,</span> <span class="token number">0.72708047</span><span class="token punctuation">,</span> <span class="token number">0.56316259</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该矩阵由于形状是3×3的，所以我们在线性代数里面认为这个矩阵维度是三（秩为三），但是在numpy的数组中，这个array的维数只有2，分别有axis=0,axis=1这两个轴，而axis=0的轴长度为3，axis=1的轴长度也为3.所以这里我们格外注意一下。</p><h1 id="进一步理解"><a href="#进一步理解" class="headerlink" title="进一步理解"></a>进一步理解</h1><hr><p>我们进行一下有关axis的操作，例如求和：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> carray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以看出，如果我们<strong>令axis=0,它会按照列求和得到一个和矩阵，令axis=1会得到一个按照行求和的矩阵</strong>。那么如果我们就这么记的话是不是就万事大吉了？当然不是！因为通常操作中，我们会操作维数更高的数组，这么的话，就无法使用0列1行的方法去操作了。</p><p>实际上，我们有着以下的规律：</p><p><strong>设axis=i，则Numpy沿着第i个下标变化的方向进行操作</strong></p><p><em>当然这里稍微补充一下如果是axis=-1的情况，那么就是沿着倒数第一个下标变化的方向开始操作</em></p><p>这里可以多举几个例子来帮助我们理解一下：</p><p>以以下三维数组为例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> darray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>这是一个三维数组，若axis=0,那么我们就应该把d[0][i][j]+d[1][i][j]+d[2][i][j]加起来，最终得到一个形状为2×4的矩阵</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> darray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图所示，确实得到了一个2×4的矩阵。</p><ol start="2"><li>接着我们尝试axis=1,那么应该得到了一个3×4的矩阵</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> darray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果便是如此。</p><p>实际上除了sum函数，还有着许许多多需要用到这方面知识的函数，例如max、min、average、argsort、sort这些函数。</p><p>举几个我们看一下：</p><ul><li>sort</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> e <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> earray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> earray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> e<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> earray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>argsort</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> farray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort <span class="token operator">=</span> f<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sortarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort0<span class="token operator">=</span>f<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort0array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort1<span class="token operator">=</span>f<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f_sort1array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接：</p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/31275071" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31275071</a></p></li><li><p><a href="https://blog.csdn.net/m0_37673307/article/details/82118030" target="_blank" rel="noopener">https://blog.csdn.net/m0_37673307/article/details/82118030</a></p></li><li><p><a href="https://stackoverflow.com/questions/19389910/in-python-numpy-what-is-a-dimension-and-axis#:~:text=In%20Numpy%20dimensions%20are%20called,has%20a%20length%20of%203" target="_blank" rel="noopener">https://stackoverflow.com/questions/19389910/in-python-numpy-what-is-a-dimension-and-axis#:~:text=In%20Numpy%20dimensions%20are%20called,has%20a%20length%20of%203</a>.</p></li><li><p><a href="https://numpy.org/doc/stable/user/quickstart.html#the-basics" target="_blank" rel="noopener">https://numpy.org/doc/stable/user/quickstart.html#the-basics</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> numpy的小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 矩阵计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>argsort函数的详解</title>
      <link href="/2021/08/02/argsort-han-shu-de-xiang-jie/"/>
      <url>/2021/08/02/argsort-han-shu-de-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>argsort函数经常用于矩阵的一些不破坏原有数组的情况下得到原数组的有序序列的情况。</p><h1 id="官网解释"><a href="#官网解释" class="headerlink" title="官网解释"></a>官网解释</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210708101432523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="官网介绍"><br>使用 kind 关键字指定的算法沿给定轴执行间接排序。它以排序的顺序返回与给定轴上的索引数据具有相同形状的索引数组。<br>axisint 或 None，可选<br>排序的轴。默认值为 -1（最后一个轴）。如果没有，则使用扁平数组。</p><p>kind:{‘快速排序’、‘合并排序’、‘堆排序’、‘稳定’}，排序算法。默认值为“快速排序”。请注意，“stable”与“mergesort”都在幕后使用 timsort，通常，实际实现会因数据类型而异。保留“合并排序”选项是为了向后兼容。</p><p>在 1.15.0 版更改。：添加了“稳定”选项。</p><p>orderstr 或 str 列表，可选<br>当 a 是一个定义了字段的数组时，这个参数指定要比较哪些字段，第一个，第二个等等。 单个字段可以指定为字符串，不是所有的字段都需要指定，但仍然会使用未指定的字段，在它们出现在 dtype 中的顺序，以打破联系。</p><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><p>实际上就是返回了一个升序的序列，里面每一个元素都是排序好后的元素在原序列中的索引。这样方便我们在原序列中找到每一个元素。这一句话可能不是很好理解我们结合一定的例子来看一下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> aarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如以上来看，原序列为[8, 1, 5, 6], 我们其使用argsort函数之后得到序列[1, 2, 3, 0],  那么我们直接使用a[1]就是a中最小的元素，a[0]就是a中最大的元素。<br>我们可以多看几个类似的例子, 这里可以看一下二维数组:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> barray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上可以看出，实际上如果是二维数组的话，不仅仅有这这么一种排序的方法，不仅可以按照行来排，也可以按照列来排序。这里仍然是通过axis轴来确定的排序方式，函数默认axis=-1，这里我在之前博客有提到过，读者如果对于axis函数比较陌生的话可以看一下<a href="https://blog.csdn.net/LRY89757/article/details/118570303?spm=1001.2014.3001.5501" target="_blank" rel="noopener">我之前的一篇博客</a>这里详细解释了axis的有关理解。<br>以下再给出官网几个例子：</p><pre class="line-numbers language-python"><code class="language-python">ind <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># sorts along first axis (down)</span>indarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>take_along_axis<span class="token punctuation">(</span>x<span class="token punctuation">,</span> ind<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># same as np.sort(x, axis=0)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以及不常用的根据关键字：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>xarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      dtype<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'&lt;i4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>大家如果有兴趣可以去<a href="https://numpy.org/doc/stable/reference/generated/numpy.argsort.html" target="_blank" rel="noopener">官网</a>看一下。</em></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.argsort.html" target="_blank" rel="noopener">https://numpy.org/doc/stable/reference/generated/numpy.argsort.html</a></p><p><a href="https://blog.csdn.net/LRY89757/article/details/118570303?spm=1001.2014.3001.5501" target="_blank" rel="noopener">https://blog.csdn.net/LRY89757/article/details/118570303?spm=1001.2014.3001.5501</a></p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> numpy的小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 矩阵计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构各类排序算法详解+代码分析</title>
      <link href="/2021/08/01/shu-ju-jie-gou-ge-lei-pai-xu-suan-fa-xiang-jie-dai-ma-fen-xi/"/>
      <url>/2021/08/01/shu-ju-jie-gou-ge-lei-pai-xu-suan-fa-xiang-jie-dai-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知不觉，数据结构已经学完了，博主也马上大二了😭时间过得太快了😱，但是数据结构学得确实不太好，楼主花了将近一天的时间整理了一下排序的有关算法。希望对大家也有所帮助。<br>@<a href="目录">TOC</a></p><hr><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><hr><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>每步将一个待排序记录，按其关键码大小，插入到前面已经排好序的一组记录的适当位置上，直到记录全部插入为止。</p><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertSort</span> <span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//对顺序表L作直接插入排序</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span> i <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//直接在原始无序表L中排序</span><span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若L.r[i]较小则插入有序子表内</span><span class="token punctuation">{</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先将待插入的元素放入“哨兵”位置</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子表元素开始后移</span><span class="token keyword">for</span> <span class="token punctuation">(</span> j<span class="token operator">=</span>i<span class="token number">-2</span><span class="token punctuation">;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span> <span class="token operator">--</span>j <span class="token punctuation">)</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只要子表元素比哨兵大就不断后移</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直到子表元素小于哨兵，将哨兵值送入</span>        <span class="token comment" spellcheck="true">//当前要插入的位置（包括插入到表首）</span>     <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//if</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// InsertSort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p><em>从第二个记录开始逐趟开始插入</em></p><h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><hr><p>这个相对于直接插入排序，减少了比较的次数，但是没有减少移动的次数：$$n^2$$ / 4次</p><p>只是我们查找插入的位置时，使用了折半查找的方法。</p><h3 id="二路排序"><a href="#二路排序" class="headerlink" title="二路排序"></a>二路排序</h3><hr><p>相比之下，减少了移动的次数，约为$$n^2$$ / 8次</p><p><a href="http://data.biancheng.net/view/67.html" target="_blank" rel="noopener">二路排序</a></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>first<span class="token punctuation">,</span>final<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    first <span class="token operator">=</span> final <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分别记录temp数组中最大值和最小值的位置</span>    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 待插入元素比最小的元素小</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            first <span class="token operator">=</span> <span class="token punctuation">(</span>first <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 待插入元素比最大元素大</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">[</span>final<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            final <span class="token operator">=</span> <span class="token punctuation">(</span>final <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>final<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 插入元素比最小大，比最大小</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token punctuation">(</span>final <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当插入值比当前值小时，需要移动当前值的位置</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//插入该值</span>            temp<span class="token punctuation">[</span><span class="token punctuation">(</span>k <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//因为最大值的位置改变，所以需要实时更新final的位置</span>            final <span class="token operator">=</span> <span class="token punctuation">(</span>final <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将排序记录复制到原来的顺序表里</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token punctuation">(</span>first <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><hr><p><em>希尔排序就是指取固定的一些增量序列来分别进行直接插入排序，比如去dk = 5， 3， 1这种，到最后对基本有序的全体序列进行一次直接插入排序注意增量序列的之中没有除1之外的公因子，且最后一个值必定为1.</em></p><p>算法思想：</p><p>先将整个待排记录序列分割成若干子序列分别进行直接插入排序，待整个序列中的记录基本有序时，再对全体记录进行一次直接插入排序。分为多个子序列的方法:设置一系列增量值（dk值），将相隔某个增量的记录组成一个子序列，如第一趟dk=5,则r1，r6.为一组，r2，r7为一组，然后每一组进行直接插入排序。以此类推。不断减小dk的值，直到为1，再进行直接插入排序就能实现对整体记录的插入排序了。</p><p>dk值较大，子序列中对象较少，速度较快；</p><p>dk值逐渐减小，子序列中对象变多，但大多数对象已基本有序，所以排序速度仍然很快。</p><p>输入：增量的数目k，各个增量dk，  顺序表的长度，顺序表中各个元素。</p><p>输出：排好序的顺序表中各个元素。</p><p>算法图解（这是从网上看到的图，侵删）：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630151121305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="希尔排序"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> dlta<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//按增量序列dlta[0..t-1]对顺序表L做希尔排序。</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>t<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>        <span class="token function">ShellInsert</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> dlta<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//一趟增量为dlta[k]的插入排序</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShellInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> dk<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对顺序表进行一趟增量为dk的Shell排序，dk为步长因子</span>    <span class="token comment" spellcheck="true">//相对于一趟插入排序相比，做了如下修改：</span>    <span class="token comment" spellcheck="true">//  1. 前后记录位置的增量是dk，而不是1</span>    <span class="token comment" spellcheck="true">//  2. r[0]只是暂存单元，不是哨兵。当j&lt;=0时，插入位置已找到。</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>dk<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//开始将r[i]插入有序增量子表</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token operator">-</span>dk<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token function">RedCopy</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//暂存在r[0]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span>dk<span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>j<span class="token operator">-</span><span class="token operator">=</span>dk<span class="token punctuation">)</span>                <span class="token function">RedCopy</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span>dk<span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键字较大的记录在字表中后移</span>        <span class="token function">RedCopy</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span>dk<span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在本趟结束时将r[i]插入到正确位置</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><hr><p><em>就是先选用一个数（可以随机选也可以直接用第一个），以他为基准然后比它大的放后面，比他小的放前面，这样形成一个大致左边必定比右边小的序列后，再次对于两边的这些数分段进行递归相同的操作，不稳定</em></p><p>优点：平均性能好，O(nlog2n)，2为下标</p><p>缺点：不稳定，初始序列有序或基本有序时，时间复杂度降为O(n^2)。</p><p>算法图解：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630150456865.gif#pic_center" alt="快速排序"></p><p>快排的算法详解：</p><p>一趟快速排序我们最初实现的思想就是设置两个指针low、high,一个指向基准的元素，一个指向末尾，然后我们从末尾开始往前遍历，如果我们的high小于基准了开始，那么就和low指向的基准交换。然后开始从low开始往后遍历，直到找到一个low比基准大的元素和此时的high（指向的还是基准）交换，然后再从high开始……如此重复直到我们的low=high.</p><p>但是这么算的话每次交换一对记录需要进行3次移动赋值操作。实际上我们对于基准的移动是多余的，基准就在我们最后循环结束的low=high位置。所以我们可以选择将基准提前放好，然后我们选择该交换的时候直接赋值high小于基准后直接赋值给low……直到我们low = high的时候再将放好的基准放到low(high)的位置。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//用子表的第一个记录作基准记录</span>    pivotkey <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//记录关键字</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//从表的两端交替地向中间扫描</span>    <span class="token punctuation">{</span>                                        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">>=</span> pivotkey<span class="token punctuation">)</span><span class="token operator">--</span>high<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//将比基准小的记录移到低端</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> pivotkey<span class="token punctuation">)</span><span class="token operator">++</span>low<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将比基准大的记录移到高端</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//返回基准位置</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">QSort</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对顺序表L中的子序列L.r[low..high]做快速排序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">>=</span> high<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    pivotkey <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QSort</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivotkey<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QSort</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> pivotkey<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间效率：O(nlog2n) —因为每趟确定的元素呈指数增加<br>空间效率：O（log2n）—递归栈(存每层low，high和pivot)<br>稳 定 性： 不 稳 定 —因为跳跃式交换。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><hr><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>每一趟(第 i 趟)在后面 n-i+1 个待排记录中选取关键字最小的记录作为有序序列中的第 i 个记录。</p><p><em>也就是先从所有中选出最小的作为第一个，再从剩下的选出最小的作为第二个，…….</em></p><p>分类主要有简单选择排序，锦标赛排序，堆排序。</p><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><hr><p>基本思想：每经过一趟比较就找出一个最小值，与待排序列<br>最前面的位置互换即可。<br>——首先，在n个记录中选择最小者放到r[1]位置；然后，从剩余的n-1个<br>记录中选择最小者放到r[2]位置；…如此进行下去，直到全部有序为止。<br>优点：实现简单<br>缺点：每趟只能确定一个元素，表长为n时需要n-1趟<br>前提：顺序存储结构</p><pre class="line-numbers language-c"><code class="language-c">Void <span class="token function">SelectSort</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> <span class="token function">SelectMinKey</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> i<span class="token operator">!=</span>j <span class="token punctuation">)</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> «r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//for</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//SelectSort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>显然简单选择排序的缺点是非常明显的，第一次比较n-1次，第二次比较n-2次，以此类推，如果我们要优化的时候，我们要考虑<strong>是否第一趟比较n-1次后第二趟还需要比较n-2次</strong>，这个是很重要的。所以我们应该从减少比较个数这个地方开始着手优化</em></p><p>我们可以参考我们体育比赛中的锦标赛排序，在8个运动员中选择前3名最多只需要11场比赛，而不是7+6+5场比赛。</p><p>而这就是我们的锦标赛排序：</p><h3 id="锦标赛排序"><a href="#锦标赛排序" class="headerlink" title="锦标赛排序"></a>锦标赛排序</h3><hr><p>基本思想：与体育比赛时的淘汰赛类似。<br>首先对 n 个记录的关键字进行两两比较，得到 [n/2] 个 优胜者(关键字小者)，作为第一步比较的结果保留下来。然后在这 [n/2] 个较小者之间再进行两两比较，…，如此重复，直到选出最小关键字的记录为止。<br>优点：减少比较次数，加快排序速度<br>缺点：空间效率低</p><p>算法图解：</p><p>以关键字序列T= （21，25，49，25*，16，08，63）为例</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164415761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164647564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164813897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164859899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630164954897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630165030443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630165047263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="锦标赛排序"></p><p> 锦标赛排序构成的树是完全(满）二叉树，其深度[$log_{2}{n}$] +1，其中 n 为待排序元素(叶子结点)个数。<br>• 时间复杂度：O($nlog_{2}{n}$) —n个记录各自比较约$log_{2}{n}$次<br>• 空间效率： O(n） —胜者树的附加内结点共有n0-1个！<br>• 稳定性：稳定 —可事先约定左结点“小”</p><p>这种排序方法的劣势就是消耗空间较大，“最大值”进行多余的比较等问题。为了弥补，J.willioms在1964年提出了另一种形式的选择排序——堆排序。</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><hr><p><a href="https://www.luogu.com.cn/blog/BlueHedgehog/solution-p2676" target="_blank" rel="noopener">这里有一个有关堆排序讲的很好的博客</a></p><hr><p>我们需要解决这几个问题：什么是堆？怎么建堆？怎么堆排序？</p><h4 id="堆定义"><a href="#堆定义" class="headerlink" title="堆定义"></a>堆定义</h4><ol><li>完全二叉树</li><li>树中所有结点的值必须大于（或小于）其左右孩子，树的根结点必定为最大值（或最小值）。</li></ol><p>分为大根堆和小根堆，这个其实如果根节点是最大值，那就是大根堆，反之就是小根堆。例子如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630172615692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆"></p><p>那如何建堆呢?</p><h4 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h4><p>基本方式：从最后一个非终端结点开始往前逐步调整，让每个双亲大于（或小于）子女，直到根结点为止。</p><p><strong>完全二叉树的第一个非终端结点编号必为[n/2].</strong></p><p><em>终端结点：叶子结点（所以不需要我们单独调整）</em></p><p>这里给出图解例子：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021063020371080.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="建堆"></p><p>注意以上建堆的过程中是从最后一个非叶子结点开始每次比较的都是结点的左右孩子，不必和父节点比较，然后我们比完后不符合的就交换(<strong>这里如果两个子女都比父节点大那么就选大的上浮</strong>)，注意交换过之后要再比一次左右节点（<strong>即将父母结点下移之后如果还有子节点还要继续下移判断！</strong>）。然后再往前找到倒数第二个非叶子结点….以此类推直到根结点。</p><h4 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h4><p><em>我们知道，建成一个堆后，堆的根节点就是最大值（最小值），所以我们可以直接输出根节点，问题在于，我们输出根节点后还需要将剩余的缺乏根节点的堆再次维护成一个完整的堆然后再次输出根节点以达到堆排序的目的。</em></p><p>方法：将当前顶点与堆尾记录交换，然后仿建堆动作重新调整，如此反复直至排序结束。将任务转化为—&gt;<br>H.r[i…m]中除r[i]外，其他都具有堆特征。现调整r[i]的值 ，使H.r[i…m]为堆。</p><p>这就相当于我们把根节点和最末尾的那个结点交换了一下位置然后数组长度length–直接删除了原来根节点，然后目前就是一个根节点不满足堆其他点都满足堆的一个“堆”，我们接下来<strong>只需要维护这一个点</strong>就可以了。以此类推，达到堆排序目的。即：</p><p>基于初始堆进行堆排序的算法步骤：<br>堆的第一个对象r[1]具有最大的关键码，将r[1]与r[n]对调，把具有最大关键码的对象交换到最后;<br>再对前面的n-1个对象，使用堆的调整算法，重新建立堆。<br>结果具有次最大关键码的对象又上浮到堆顶，即r[1] 位置;<br>再对调r[1]和r[n-1]，然后对前n-2个对象重新调整，…<br>如此反复，最后得到全部排序好的对象序列。</p><p>图解：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210532115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210554583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021063021061067.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210627725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630210644962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="堆排序"></p><h4 id="算法代码解析"><a href="#算法代码解析" class="headerlink" title="算法代码解析"></a>算法代码解析</h4><p>首先我们直到由于我们建堆过程中需要比较调整，所以需要用到堆调整函数HeapAdjust。  </p><ol><li>HeapAdjust是针对结点 i 的堆调整函数，其含义是：从结点i开始到堆尾为止，自上向下比较，如果子女<br>的值大于双亲结点的值，则互相交换，即把局部调整为大根堆。这一过程称之为筛选。</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token function">HeapAdjust</span><span class="token punctuation">(</span>HeapType <span class="token operator">&amp;</span>H <span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> m <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*从结点i开始到当前堆尾m为止，自上向下比较，如果子女的    值大于双亲结点的值，则互相交换，即把局部调整为大根堆。*/</span>    current<span class="token operator">=</span>i<span class="token punctuation">;</span> temp<span class="token operator">=</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> child<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//temp暂存 r[i]值，child是其左孩子</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>child<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//检查是否到达当前堆尾，未到尾则整理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> child<span class="token operator">&lt;</span>m <span class="token operator">&amp;&amp;</span> H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>        child<span class="token operator">=</span> child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//让child指向两子女中的大者位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> temp<span class="token punctuation">.</span>key<span class="token operator">>=</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span> breack<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根大则不必调整，函数结束</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>         H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token operator">=</span>H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//否则子女中的大者上移</span>        current<span class="token operator">=</span> child<span class="token punctuation">;</span> child<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span> child<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//将根下移到孩子位置并继续向下整理！(这一点很关键)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// while</span>    H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直到自下而上都满足堆定义，再安置入口结点</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// HeapAdjust</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>建堆</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HeapSort</span> <span class="token punctuation">(</span>HeapType <span class="token operator">&amp;</span>H <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//H是顺序表，含有H.r[ ]和H.length两个分量</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> H<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token operator">-</span> i <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//把r[1…length]建成大根堆</span>    <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>r<span class="token punctuation">,</span> i<span class="token punctuation">,</span> H<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使r[i…length]成为大根堆</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// HeapSort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>堆排序</p><p>重建时，2至i-1号结点已符合堆的要求，故只需从 1号结点开始调整。因每次从堆顶开始调整，故每次调用耗时<br>O(log2n).</p><p>• 时间效率： T(n) = O($nlog_{2}{n}$）。因为整个排序过程中需要调<br>用n-1次HeapAdjust( )算法，而此算法耗时为O($log_{2}{n}$)；<br>• 注意：初始建堆的关键字比较次数≤4n,T(n)=Θ(n)。<br>• 空间效率：O(1)。在for循环中交换记录时用到临时变量temp。<br>• 稳定性： 不稳定。<br>• 优点：对小文件效果不明显，但对大文件有效。</p></li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">HeapSort</span> <span class="token punctuation">(</span>HeapType <span class="token operator">&amp;</span>H <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//对顺序表H进行堆排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> H<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token operator">-</span> i <span class="token punctuation">)</span>    <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span>i<span class="token punctuation">,</span> H<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//for,建立初始堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> H<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span> <span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    H<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> ←→ H<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//交换，要借用temp</span>    <span class="token function">HeapAdjust</span><span class="token punctuation">(</span> H<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>i<span class="token number">-1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重建最大堆, m=i-1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><hr><p>基本思想：归并含义就是将两个或两个以上的有序表合成一个新的有序表。利用该思想可以假设刚开始的无序表是一个有n个长度为1的有序表，然后两两归并，得到[n/2]个长度为2的有序表，再次归并得到[n/4]个长度为4的有序表……以此类推最终得到长度为n的有序表。</p><p>算法图解：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630190556841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="归并排序"></p><p>归并排序的算法还是很简单的：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Merge</span> <span class="token punctuation">(</span>RcdType SR<span class="token punctuation">[</span> <span class="token punctuation">]</span>， RcdType <span class="token operator">&amp;</span>TR<span class="token punctuation">[</span> <span class="token punctuation">]</span>，<span class="token keyword">int</span> i<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 将有序的SR[i…m]和SR[m+1…n]归并为有序的TR[i…n]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>i <span class="token punctuation">,</span> j<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> SR<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">&lt;=</span> SR<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>TR<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> TR<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将两个SR记录由小到大并入TR</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// for</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span> TR<span class="token punctuation">[</span>k…n<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>i…m<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将剩余的SR[i…m]复制到TR</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span> TR<span class="token punctuation">[</span>k…n<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>j…n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将剩余的SR[j…n]复制到TR</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Merge</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">MSort</span> <span class="token punctuation">(</span>RcdType SR<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> RcdType <span class="token operator">&amp;</span>TR1<span class="token punctuation">[</span> <span class="token punctuation">]</span>，<span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 将无序的SR[s…t]归并排序为TR1[s…t]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> s<span class="token operator">==</span>t <span class="token punctuation">)</span>TR1<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>SR<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当len=1时返回</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        m<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将SR [s…t]平分为SR [s…m]和SR [m+1…t]</span>        <span class="token function">MSort</span> <span class="token punctuation">(</span>SR，<span class="token operator">&amp;</span>TR2，s<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将SR 一分为二, 2分为4…</span>        <span class="token comment" spellcheck="true">// 递归地将SR [s…m]归并为有序的TR2[s…m]</span>        <span class="token function">MSort</span> <span class="token punctuation">(</span>SR，<span class="token operator">&amp;</span>TR2，m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归地将SR [m+1…t]归并为有序的TR2[m+1…t]</span>        <span class="token function">Merge</span><span class="token punctuation">(</span>TR2， TR1， s<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将TR2 [s…m]和TR2 [m+1…t]归并到TR1 [s…t]</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//if</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// MSort</span><span class="token comment" spellcheck="true">//TR2只是一个辅助数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个函数用来合并有序的两个序列，而第二个函数用来递归进行归并，这里用到了TR2这个辅助数组。首先不断递归至n个长度为1的有序数组到TR2中，然后将他们两两Merge归并起来到TR2中（<strong>注意除了第一层递归外其余的所有递归过程中虽然Merge调用的看着好像是TR1，但那是形参，实际上那是TR2！！也就是那个Merge函数实际上是在调用归并TR2的s..m and m+1..t项到自己的数组中！！</strong>），接着直到我们递归回溯至最后一层时，也就是开始的函数，我们调用Merge把就差一步就有序的TR2归并排好放到TR1中。</p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><hr><p>基数排序是与前面的排序完全不同，前面的排序主要是通过关键字间的比较和移动记录这两种操作，而实现基数排序不需要记录关键字之间的比较。它是一种<strong>借助多关键字排序的思想对单逻辑关键字进行排序</strong>的方法。</p><p> 多关键字排序：n个元素的序列{R1,R2,…, Rn}，每个元素Ri有d个关键字(K0i, K1i,…, Kd-1i)，则序列对关键字(K0i, K1i,…, Kd-1i)有序是指：<br>对于序列中任意两个记录Ri和Rj(i&lt;j)记都满足下列有序关系：(K0i, K1i,…, Kd-1i) &lt; (K0j, K1j,…, Kd-1j)<br>其中K0称为最主位关键字，Kd-1称为最次位关键字。</p><p>主要分为两类：</p><p>最高位优先(MSD):<br>先对最主位关键字K0进行排序,将序列分成若干个子序列，每个子序列中的元素具有相同的K0值，然后分别就每个子序列对关键字K1进行排序，按K1值的不同再分成更小的子序列，依次重复，直至对Kd-2进行排序之后得到的每个子序列中的元素都具有相同的(K0, K1,…, Kd-2)，而后分别为每个子序列对Kd-1 进行排序，最后将所有子序列依次联接成为一个有序序列。</p><p>最低位优先(LSD) ：                                                                                                                                                                 先对最次位关键字Kd-1进行排序,然后对Kd-2进行排序，依次重复，直至对K0进行排序后便成为一个有序序列</p><p>链式基数排序：</p><p>对于整型或字符型的单关键字，可以看成是由多个数位或多个字符<br>构成的多关键字。仅分析关键字自身每位的值，通过分配、收集进行处理。</p><ol><li>待排序记录以指针相链，构成一个链表（静态链表）；</li><li>“分配”时，按当前“关键字位”所取值，将记录分配到不同的<br>“链队列”中，每个队列中记录的 “关键字位”相同；</li><li>“收集”时，按当前关键字位取值从小到大将各队列首尾相链成<br>一个链表;</li><li>对每个关键字位均重复 2) 和 3) 两步。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221322610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="基数排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221343492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="基数排序"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221450530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="基数排序"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><h3 id="排序方法比较"><a href="#排序方法比较" class="headerlink" title="排序方法比较"></a>排序方法比较</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210630221719469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="总结"></p><h3 id="方法选择"><a href="#方法选择" class="headerlink" title="方法选择"></a>方法选择</h3><p>基本有序时可选用直接插入、简单选择、堆排序、锦标赛排序、冒泡排序、归并排序、(希尔排序)等方法，其中插入排序和冒泡应该是最快的。因主要是比较操作，移动元素很少。此时平均时间复杂度为O(n)。<br>无序的情况下最好选用快速排序、希尔排序、简单选择排序等，这些算法的共同特点是，通过“振荡”让数值相差不大但位置差异很大的元素尽快到位。</p><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>终于写完了QAQ，真是累死我了。感谢大家看到这里，看到这里的是真🦏，也欢迎大家一键三连哦~</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 图解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态查找表之二叉排序树和平衡二叉树（图解+代码详解）</title>
      <link href="/2021/08/01/dong-tai-cha-zhao-biao-zhi-er-cha-pai-xu-shu-he-ping-heng-er-cha-shu-tu-jie-dai-ma-xiang-jie/"/>
      <url>/2021/08/01/dong-tai-cha-zhao-biao-zhi-er-cha-pai-xu-shu-he-ping-heng-er-cha-shu-tu-jie-dai-ma-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><strong>动态查找表</strong>：与静态查找表不同的是，动态查找表是在查找过程中动态生成的，即对于给定值key, 若表中存在其关键字等于key的记录，则查找成功返回，否则插入关键字等于key的记录。</p><p>主要分为：二叉排序树、平衡二叉树、B-和B+树。</p><p>我们这里主要分析讨论前两种。</p><p>@<a href="目录">TOC</a></p><h1 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h1><hr><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>定义</strong>：二叉排序树，又称二叉查找树。或者是一颗空树，或者是满足以下性质的二叉树：</p><p>1)  若其左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>2)  若其右子树不空，则右子树上所有结点的值均大于它的根结点的值<br>3)  其左、右子树也分别为二叉排序树</p><p><strong><em>特点： 二叉排序树的中序遍历序列一定是递增有序的</em></strong></p><p><strong>注意二叉排序树和二叉判定树不要搞混了，这两个区别还是比较大的，二叉判定树是静态查找的折半查找时用到的，遍历了搜索的可能性，而且结点放置的是序号。</strong></p><h2 id="构造二叉排序树"><a href="#构造二叉排序树" class="headerlink" title="构造二叉排序树"></a>构造二叉排序树</h2><p>我们对于给定序列，取其第一个点为根结点，然后依次选择后续节点边比较边插入。如果比当前结点小，往该节点左子树移动比较，如果比当前结点大，则往该节点右子树移动比较。直到到一个待比较位置为空的位置，就是该节点的最终位置。</p><p>文字过于生硬，图解说明一下：</p><p><em>设输入序列为：（30,11,18,4,55,19,15,70,58）</em></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210703234753819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="二叉排序树构造"></p><p>如此便构造成功了一个二叉排序树。</p><p>这样一来我们也可以很方便的计算出其平均查找长度，每一层的高度就是查找所花费的次数，例如：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210703235103726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="二叉排序树"></p><h2 id="基本操作代码解析"><a href="#基本操作代码解析" class="headerlink" title="基本操作代码解析"></a>基本操作代码解析</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>首先我们选择使用二叉链表作为其存储结构：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiTNode <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 结点结构</span>    TElemType data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 包含key</span>    <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左右孩子指针</span><span class="token punctuation">}</span> BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><h4 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h4><p>思路很简单，仅需要从根节点开始比较就可以，比当前结点大就找左子树，小就找右子树直到找到为止</p><pre class="line-numbers language-c"><code class="language-c">BiTree <span class="token function">SearchBST</span> <span class="token punctuation">(</span>BiTree T，KeyType key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//在根指针T所指二叉排序树中递归地查找某关键字等于key的数据元素</span>    <span class="token comment" spellcheck="true">//若查找成功，则返回指向该数据元素结点的指针，否则返回空指针</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">EQ</span><span class="token punctuation">(</span>key，T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>； <span class="token comment" spellcheck="true">//查找结束</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">LT</span><span class="token punctuation">(</span>key，T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild，key<span class="token punctuation">)</span><span class="token punctuation">)</span>；    <span class="token comment" spellcheck="true">//在左子树中继续查找</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">SearchBST</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild，key<span class="token punctuation">)</span><span class="token punctuation">)</span>；    <span class="token comment" spellcheck="true">// 在右子树中继续查找</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//SearchBST</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h4><p>由于我们这个不需要回溯，实际上也就是使用一个while循环代替递归的工作栈，思路和递归算法差不多。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> BiTNode <span class="token operator">*</span><span class="token function">search_tree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>T<span class="token punctuation">,</span> keytype key<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回值</span>失败：<span class="token constant">NULL</span> 成功：非<span class="token constant">NULL</span>，结点指针<span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span>T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> T；        <span class="token comment" spellcheck="true">//查找成功</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">&lt;</span>T<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        T<span class="token operator">=</span>T<span class="token operator">-></span>lchild； <span class="token comment" spellcheck="true">//查左子树</span>    <span class="token keyword">else</span>        T<span class="token operator">=</span>T<span class="token operator">-></span>rchild； <span class="token comment" spellcheck="true">//查右子树</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> T；    <span class="token comment" spellcheck="true">//查找失败</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入的思路相对而言也比较简单，主要借助查找，把新节点作为叶子插入。代码如下：</p><pre class="line-numbers language-c"><code class="language-c">Status <span class="token function">InsertBST</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当二叉排序树中不存在关键字等于e.key的数据元素时，</span><span class="token comment" spellcheck="true">//插入元素e并返回true，否则返回false</span>    p <span class="token operator">=</span> T<span class="token punctuation">;</span> father <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token operator">!=</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        father <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token operator">></span>p<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token keyword">else</span> p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//while</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//键值为e.key的结点已经存在</span>    s <span class="token operator">=</span> new BiTnode<span class="token punctuation">;</span> s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span> s<span class="token operator">-></span>lchild <span class="token operator">=</span> s<span class="token operator">-></span>rchild <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>father<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> T <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//空树插入</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token operator">></span>father<span class="token operator">-></span>data<span class="token punctuation">.</span>key<span class="token punctuation">)</span> father<span class="token operator">-></span>rchild <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">else</span> father<span class="token operator">-></span>lchild <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//InsertBST</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除操作相对于前面的查找与插入就复杂一些了。删除某元素需要维护二叉排序树的形状。这里假设<em>p表示待删除结点的指针，$$P_L$$ 和$$P_R$$代表p的左右孩子指针，f是p的父节点，并假设*</em>p是f的左孩子**。那么有三种情况需要我们考虑，一种情况是p没有左右孩子，那只需我们更改一下f的左孩子指针指向，指向空指针即可；第二种情况便是p只有一个孩子，那么这样也只需将f的左孩子指针指向$$P_L$$ 或$$P_R$$；第三种情况就是p有两个孩子，这样就需要我们分析一下了：</p><p>设删除前的中序遍历序列为：     …. $$P_L$$  s p $$P_R$$  f ….<br>//p的直接前驱是s<br>//s是<em>p左子树最右下方的结点<br>删除p后，使其它元素的相对位置不变。有两种解决方法：<br>法1：令</em>p的左子树为 <em>f的左子树，</em>p的右子树接为<em>s的右子树；即 $$f_L$$ =$$P_L$$  ; $$S_R$$ =$$P_R$$  ;<br>法2：直接令</em>s代替<em>p即   *s为</em>p左子树最右下方的结点</p><p>图解如下：</p><p>假设删除P点。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210704001638163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="删除结点"></p><p>删除各个结点：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210704001839117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="删除结点"></p><p>代码按以上思想编写：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delete_BST</span> <span class="token punctuation">(</span>BSTNode <span class="token operator">*</span>T <span class="token punctuation">,</span> KeyType key <span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 在以T为根结点的BST树中删除关键字为key的结点 */</span><span class="token punctuation">{</span> BSTNode <span class="token operator">*</span>p<span class="token operator">=</span>T <span class="token punctuation">,</span> <span class="token operator">*</span>f<span class="token operator">=</span><span class="token constant">NULL</span> <span class="token punctuation">,</span> <span class="token operator">*</span>q <span class="token punctuation">,</span> <span class="token operator">*</span>s <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//q指向删除结点的孩子</span><span class="token keyword">while</span> <span class="token punctuation">(</span> p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">EQ</span><span class="token punctuation">(</span>p<span class="token operator">-></span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查找删除结点</span><span class="token punctuation">{</span> f<span class="token operator">=</span>p <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LT</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> p<span class="token operator">-></span>key<span class="token punctuation">)</span> <span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-></span>Lchild <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 搜索左子树</span><span class="token keyword">else</span> p<span class="token operator">=</span>p<span class="token operator">-></span>Rchild <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//搜索右子树</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有要删除的结点</span> s<span class="token operator">=</span>p <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到了要删除的结点为p ，先找其替代结点s</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 左、右子树都不空</span><span class="token punctuation">{</span> f<span class="token operator">=</span>p <span class="token punctuation">;</span> s<span class="token operator">=</span>p<span class="token operator">-></span>Lchild <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从左子树开始找</span><span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>Rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span> f<span class="token operator">=</span>s <span class="token punctuation">;</span> s<span class="token operator">=</span>s<span class="token operator">-></span>Rchild <span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 找左子树中最右边的结点</span>p<span class="token operator">-></span>key<span class="token operator">=</span>s<span class="token operator">-></span>key <span class="token punctuation">;</span> p<span class="token operator">-></span>otherinfo<span class="token operator">=</span>s<span class="token operator">-></span>otherinfo <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用s替换p</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//第3种情况用方案2处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token operator">-></span>Lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> q<span class="token operator">=</span>s<span class="token operator">-></span>Lchild <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//若s,即p只有左子树</span><span class="token keyword">else</span> q<span class="token operator">=</span>s<span class="token operator">-></span>Rchild <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第2,3种情况归一处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> T<span class="token operator">=</span>q <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为根结点</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>Lchild<span class="token operator">==</span>s<span class="token punctuation">)</span> f<span class="token operator">-></span>Lchild<span class="token operator">=</span>q <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为左孩子</span><span class="token keyword">else</span> f<span class="token operator">-></span>Rchild<span class="token operator">=</span>q <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p为右孩子</span><span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除p</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时空复杂度分析"><a href="#时空复杂度分析" class="headerlink" title="时空复杂度分析"></a>时空复杂度分析</h2><p>若查找成功，则走了一条从根结点到某结点的路径，若查找失败，则走到一棵空的子树时为止。</p><p>最坏情况下，其平均查找长度不会超过树的高度。</p><p>具有n个结点的二叉树的高度取决于其形态。<br>由关键字序列 1，2，3，4，5构造而得的二叉排序树，ASL =（1+2+3+4+5）/ 5 = 3<br>由关键字序列 3，1，2，5，4构造而得的二叉排序树，ASL =（1+2+3+2+3）/ 5 = 2.2</p><p>最好情况(为满二叉树）<br>n+1<br>ASL=—log2(n+1)-1 = O(log2 n)<br>n<br>最坏情况(为单枝树):<br>ASL=(1+2+…+n)/n=(n+1)/2<br>平均值:<br>ASL≈O(log2 n)</p><h1 id="平衡二叉排序树"><a href="#平衡二叉排序树" class="headerlink" title="平衡二叉排序树"></a>平衡二叉排序树</h1><hr><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p><strong>平衡二叉树</strong>：平衡二叉树，又称AVL树。 它或者是一颗空树，或者是具有以下性质的二叉树：它的左子树和右子树都是平衡树，且左子树和右子树的深度之差的绝对值不超过1.</p><p><strong>平衡因子</strong>:又称BF，定义为该节点的左子树的深度减去它的右子树深度。则平衡二叉树的所有节点的平衡因子只可能是-1、0、1.</p><p><em>只要二叉树上有一个结点的平衡因子BF绝对值大于1，那么二叉树就是不平衡的</em></p><p>如下便是几个二叉树中各结点的平衡因子：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705202047841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="平衡二叉树"></p><p>我们希望由任何初始序列构成的二叉排序树都是AVL树。因为AVL树上任何结点的左右子树的深度之差都不超过1.则可以证明如此的话他的平均查找长度和$$log{n}$$同数量级。</p><p>以下再放一张图对比一下平衡二叉树、二叉排序树、平衡二叉排序树的区别：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705210414803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="三种树区别"></p><h2 id="构造平衡二叉排序树"><a href="#构造平衡二叉排序树" class="headerlink" title="构造平衡二叉排序树"></a>构造平衡二叉排序树</h2><p>基本原理就是按照二叉排序树的思路进行排序构造，遇到某个结点的平衡因子绝对值大于1的情况的时候，就进行一定的操作将二叉树变为平衡的，一步一步按照这样的方法最后构造成功。</p><p>构造过程中调整二叉树的操作可以归纳为以下4种情况：</p><p><em>我们先假设整个二叉树在插入新结点之后所得到的不平衡的最小子树的根节点指针为a，a平衡因子绝对值此时大于1.此时a是离结点最近的平衡因子绝对值大于1的祖先节点</em></p><h3 id="LL型（单向右旋平衡处理）"><a href="#LL型（单向右旋平衡处理）" class="headerlink" title="LL型（单向右旋平衡处理）"></a>LL型（单向右旋平衡处理）</h3><p>此时向a结点的左子树根节点的左子树上插入结点，使得左子树的高度过高，这样一来我们需要将a左子树的根节点替代a的位置，原a左子树根节点的右子树变为a结点的左子树。这样一来就有重新回到平衡相当于向右做了一次顺时针旋转操作。图例如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705213931705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="LL型"></p><h3 id="LR型（双向旋转先右后左）"><a href="#LR型（双向旋转先右后左）" class="headerlink" title="LR型（双向旋转先右后左）"></a>LR型（双向旋转先右后左）</h3><p>此时由于a结点的左子树根节点（这里暂称b)的右子树（假设根节点为c）插入了新节点，使得整体出现了不平衡，我们此时需要用c取代a的位置，然后c的原左子树作为b的右子树，c的现左子树变为b为根的树，c的原右子树变为a的左子树，c的现右子树变为a为根的树。相当于先左旋处理一次然后右旋处理了一次。图解如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705220039996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="LR型"></p><h3 id="RR型（单向左旋平衡处理）"><a href="#RR型（单向左旋平衡处理）" class="headerlink" title="RR型（单向左旋平衡处理）"></a>RR型（单向左旋平衡处理）</h3><p>与LL型比较类似，这次是a结点的右子树的的根节点的右子树上插入了新节点后发生了不平衡的情况。此时解决方法是使用a的右子树根节点移到a的位置，并且将a的原右子树的左子树变为a的右子树。相当于进行了一次向左的逆时针旋转操作。图解如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705214711828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="RR型"></p><h3 id="RL型（双向先左旋后右旋）"><a href="#RL型（双向先左旋后右旋）" class="headerlink" title="RL型（双向先左旋后右旋）"></a>RL型（双向先左旋后右旋）</h3><p>这个和LR型比较类似，实际上这四种类型是两两对称的。这个指的是a的右子树根节点（设为b）的左子树（设其根节点为c）插入了新节点导致了不平衡现象。此时我们需要将c代替a的位置，c的原左子树作为a的现右子树，c的现左子树为a为根节点的树，c的原右子树为b的现左子树，c的现右子树为b为根节点的树。图解同样如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705220908967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="RL型"></p><p>以下举例子说明一下：</p><p>以序列（13，24，37，90，53）为例，首先空树是一个平衡的，然后把13加进去，同样平衡，再将24加进去同样平衡。接下来加进去37，此时就变为RR型，我们需要左旋，由于24没有左子树，所以只需让13为根的树作为24的左子树，不需要往13右孩子加东西。接下来90，保持平衡。直到53，变为RR型，此时37的平衡因子绝对值为-2，左旋后得到最终的平衡二叉排序树。如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210705222106842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="平衡二叉排序树最终构造"></p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 查找表 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉排序树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy实现一个简单的机器学习模型</title>
      <link href="/2021/08/01/numpy-shi-xian-yi-ge-jian-dan-de-ji-qi-xue-xi-mo-xing/"/>
      <url>/2021/08/01/numpy-shi-xian-yi-ge-jian-dan-de-ji-qi-xue-xi-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Numpy实现一个简单的机器学习模型"><a href="#Numpy实现一个简单的机器学习模型" class="headerlink" title="Numpy实现一个简单的机器学习模型"></a>Numpy实现一个简单的机器学习模型</h1><p>mes que un codesfarmer 足球、音乐与代码😏</p><h3 id="本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理"><a href="#本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理" class="headerlink" title="本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理."></a>本实例使用numpy实现机器学习，相对于pytorch这类包而言需要花费的代码多一点，但是每一步都是透明的，有利于理解每一步工作原理.</h3><h4 id="首先我们应该明确基本步骤："><a href="#首先我们应该明确基本步骤：" class="headerlink" title="首先我们应该明确基本步骤："></a>首先我们应该明确基本步骤：</h4><ol><li>基于函数式y = 3x ^ 2 + 2 得到一些数据，另外加上一些噪音数据到达另一组数据y。</li><li>构建一个机器学习模型来学习表达式y =  wx^2 + b 的两个参数w 、b .利用数组x, y的数据为训练数据。</li><li>采用梯度下降法来通过多次迭代学习到w、b的值。</li></ol><p>@[TOC]</p><h3 id="导入必要库"><a href="#导入必要库" class="headerlink" title="导入必要库"></a>导入必要库</h3><pre><code>import numpy as np%matplotlib inline from matplotlib import pyplot as plt</code></pre><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>%matplotlib inline是一个魔法函数（Magic Functions）。使用%matplotlib命令可以将matplotlib的图表直接嵌入到Notebook之中，或者使用指定的界面库显示图表，它有一个参数指定matplotlib图表的显示方式。 inline表示将图表嵌入到Notebook中。</p><h3 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h3><pre><code>np.random.seed(100)x = np.linspace(-1, 1, 100).reshape(100, 1)y = 3 * np.power(x, 2) + 2 + 0.2 * np.random.rand(x.size).reshape(100, 1)</code></pre><h4 id="代码分析：-1"><a href="#代码分析：-1" class="headerlink" title="代码分析："></a>代码分析：</h4><p>生成输入数据x及目标数据y，np.random.seed(100)时设置随机数种子。reshape函数将矩阵形状改为合适的形状方便操作。而后np.random.rand是为了加一些噪点。</p><h3 id="查看x、y数据分布情况"><a href="#查看x、y数据分布情况" class="headerlink" title="查看x、y数据分布情况"></a>查看x、y数据分布情况</h3><pre><code>plt.scatter(x, y, s=20, c=&#39;red&#39;)plt.show()</code></pre><p>运行结果： <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210531214950572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="函数图片"></p><h3 id="随机初始化参数"><a href="#随机初始化参数" class="headerlink" title="随机初始化参数"></a>随机初始化参数</h3><pre><code>w1 = np.random.rand(1, 1)b1 = np.random.rand(1, 1)</code></pre><h4 id="代码分析：-2"><a href="#代码分析：-2" class="headerlink" title="代码分析："></a>代码分析：</h4><p>随机初始化参数w1、b1，后面会计算梯度逐渐接近最优解。</p><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><pre><code>lr = 0.001  # 学习率for i in range(800):    # 前向传播    y_pred = np.power(x, 2) * w1 + b1    # 定义损失函数    loss = 0.5*(y_pred - y) ** 2    loss = loss.sum()    # 计算梯度    grad_w = np.sum((y_pred - y) * np.power(x, 2))    grad_b = np.sum((y_pred - y))    # 使用梯度下降法，使loss最小    w1 -= lr * grad_w    b1 -= lr * grad_b</code></pre><h4 id="代码分析：-3"><a href="#代码分析：-3" class="headerlink" title="代码分析："></a>代码分析：</h4><p><strong>这是我们代码最核心的一部分了。</strong> 一个简单的前向传播，y_pred是预测值，y是实际值。loss是均方损失函数，这里均方损失函数乘以0.5是为了求导的时候平方项正好消去，方便后续整理，实际上也可以不乘，梯度下降算法最重要的是方向，大小是次要的。sum函数对损失进行求和同时把loss函数变为标量，实际上这里面由于我们直接后续计算梯度直接求出了loss函数的导数，所以这里loss函数实际上没有在代码上没有很大的作用，写出来是为了方便我们去观看🤣😋。而这里我们接下来就是计算的grad_w、grad_b就是来进行梯度的计算，然后更新权重w1和参数b1。</p><h3 id="可视化结果"><a href="#可视化结果" class="headerlink" title="可视化结果"></a>可视化结果</h3><p><em>我们训练结果如何呢？其实际拟合程度如何呢？我们画图来验证一下拟合的效果。</em></p><pre><code>plt.plot(x, y_pred, &quot;r-&quot;, label=&#39;predict&#39;)plt.scatter(x, y, color=&#39;blue&#39;, marker=&#39;o&#39;, label=&#39;true&#39;)    # true dataplt.xlim(-1, 1)plt.ylim(2, 6)plt.legend()plt.show()print(w1, b1)</code></pre><p>训练结果： <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021053123433278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="图像拟合效果"> [[2.98941611]] [[2.09813123]]</p><h4 id="代码分析：-4"><a href="#代码分析：-4" class="headerlink" title="代码分析："></a>代码分析：</h4><p>事实证明，经过800次训练之后，我们训练出的模型的拟合效果还是相当不错的，w是2.9894左右，b是2.0981左右。和我们初始时设定的3、2相差很小。</p><pre><code>BiTree GetSibling(BiTree T, KeyType e){    if (T == NULL)        return NULL;    if (T-&gt;lchild)    {        if (T-&gt;lchild-&gt;data.key == e)            return T-&gt;rchild; //左孩子符合条件就返回右孩子    }    else if (T-&gt;rchild)    {        if (T-&gt;rchild-&gt;data.key == e)            return T-&gt;lchild; //右孩子符合条件就返回左孩子    }    //否则递归查找，如果左子树里有就返回左子树里的，否则返回右子树    return GetSibling(T-&gt;lchild, e) != NULL ? GetSibling(T-&gt;lchild, e) : GetSibling(T-&gt;rchild, e);}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
            <tag> numpy </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> math </tag>
            
            <tag> 梯度下降 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上海交大概率论数理统计大作业代码实现解析</title>
      <link href="/2021/08/01/shang-hai-jiao-da-gai-lu-lun-shu-li-tong-ji-da-zuo-ye-dai-ma-shi-xian-jie-xi/"/>
      <url>/2021/08/01/shang-hai-jiao-da-gai-lu-lun-shu-li-tong-ji-da-zuo-ye-dai-ma-shi-xian-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前些日子有上交小姐姐概率论与数理统计课程结课了，有一个大作业要做，题目要求使用matlab或者python画图分析并统计有关数据。上海交大不亏是我们这种民办三本比不了的，真人上人，小姐姐根本就没学过编程大作业就要求开始写代码画图。别看博主现在觉得这门作业挺有意思，如果这是博主的概率论大作业，博主估计就呵呵了。于是——小姐姐就想起了我这个高中为数不多的程序猿同学（😅老工具人了）。华科真人下人，博主概率论才刚开课，也不怎么会用代码画图。但是想起我在小姐姐心目中的伟岸形象🙄。无所畏惧！满口答应下来。</p><p><em>不过这次作业的完成博主还是感触颇丰的，学到了许多道理，不会的东西不要等别人教，正如我们华科的那句被吐槽好多的那句“你能做的，起止如此”，博主感觉很有必要把这个学习过程记下来，于是有了这篇博客。</em></p><hr><p>[TOC]</p><h1 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603151333206.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="交大概率作业"></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>初始时就是有两个独立的满足高斯分布的随机变量， 使用bernoulli分布把这两个随机分布组合起来，通俗说就是高斯分布+伯努利分布。</p><h2 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h2><hr><h3 id="参数生成随机数"><a href="#参数生成随机数" class="headerlink" title="参数生成随机数"></a>参数生成随机数</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603152402661.png" alt="生成随机数"></p><h4 id="高斯函数随机数"><a href="#高斯函数随机数" class="headerlink" title="高斯函数随机数"></a>高斯函数随机数</h4><p>博主刚开始写的时候，看到生成随机数，以为需要博主自己实现代码的编写，于是博主自己就开始写高斯分布的代码，写着写着吐槽了一句后，室友提醒是不是有可以现成的函数。于是我查了一下，果然有别人写好的轮子（吐血）。还好还好，及时止损。numpy中的normal函数就是用来生成高斯分布随机数的。<br>高斯分布函数如下:<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603153849217.png" alt="高斯函数"><br>而我们的高斯随机数函数normal参数如下:<br>random.normal(loc=0.0, scale=1.0, size=None)<br>官网解释如下：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603154153716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="官网解释normal"><br>参数loc就是我们的“中位数”（mean），就是我们公式里的$\mu$,这个也是我们高斯分布的数学期望。<br>参数scale就是我们的标准差，也就是我们的$sigma$(markdown好像显示不出来这个符号）。<br>参数size就是我们要生成的随机数矩阵的size，比如1000、（3， 4）这种。<br>而函数返回值就是我们生成的随机数矩阵。矩阵类型是numpy的ndarray格式，如果只生成一个随机数就生成一个数。</p><h4 id="Bernoulli函数随机数"><a href="#Bernoulli函数随机数" class="headerlink" title="Bernoulli函数随机数"></a>Bernoulli函数随机数</h4><p>Bernoulli函数生成随机数嘛，博主就自己写函数啦，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bernoulli</span><span class="token punctuation">(</span>possi<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    ans1 <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        ans1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> possi <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ans1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码本身是很简单的，最后生成返回的是一个列表。</p><h4 id="混合高斯分布随机数"><a href="#混合高斯分布随机数" class="headerlink" title="混合高斯分布随机数"></a>混合高斯分布随机数</h4><p>有了前两步的步骤后这个混合高斯分布代码就很简单了，只需要我们调用生成随机数后把几项简单加和一下就可以了。代码如下：</p><pre class="line-numbers language-python"><code class="language-python">pict <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>bernoulli<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数的选取"><a href="#参数的选取" class="headerlink" title="参数的选取"></a>参数的选取</h3><p>这里面要求有$\mu1$ 、$\mu2$、$sigma1$、$siama2$、p这五个参数。我们应该合理的选择范围。为了更加正规的写这一道题，博主这里选择了一下这几组数据：</p><pre class="line-numbers language-python"><code class="language-python">u1 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>u2 <span class="token operator">=</span> u1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span>sigma1 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sigma2 <span class="token operator">=</span> sigma1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里最后应该会生成7$\times$ 7 $\times$ 9 $\times$ 9 $\times$ 6 = 23814组数据，每组数据有1000个随机数。<br>当然，按照题目来说我们完全可以缩小数据集，降低数据规模。当时我给小姐姐时就是提交了50组数据的图片。也顺利的完成了作业。</p><h3 id="生成随机数并画图保存文件"><a href="#生成随机数并画图保存文件" class="headerlink" title="生成随机数并画图保存文件"></a>生成随机数并画图保存文件</h3><p>接下来就是我们写出有关循环实现我们前文提到的生成混合高斯分布随机数和我们的对应图像的生成并保存。<br>代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> sigma1<span class="token punctuation">,</span> sigma2<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(a, b, c, d, e)</span>    pict <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>b<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>bernoulli<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax0<span class="token punctuation">,</span> ax1<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二个参数是柱子宽一些还是窄一些，越大越窄越密</span>    ax0<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>pict<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'yellowgreen'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># pdf: 概率分布图，一千个数落在某个区间内的数有多少个</span>    ax0<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Frequency distribution graph'</span><span class="token punctuation">)</span>    ax1<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>pict<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'pink'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">,</span> cumulative<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rwidth<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># cdf: 累计概率函数，cumulative累计。比如需要统计小于5的数的概率</span>    ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Cumulative probability function"</span><span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>subplots_adjust<span class="token punctuation">(</span>hspace<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>r<span class="token string">"E:\results\test{}(u1 = {}, u2 = {}, sigma1 = {}, sigma2 = {}, p = {}).png"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plt.show()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>循环组合我们有关的参数组合，这里用到了itertools中的product函数，用来生成一个笛卡尔积。然后我们可以使用hist函数来画频率分布直方图，这里注意，除了我们通常意义上的频率分布直方图外，博主额外加了一个Cumulative probability function，累计概率统计函数，这个可以更加直观看出我们累计的概率频次。<br>而后图像使用savefig进行保存，这里我们保存到E盘的results文件夹中。接下来我们只需要直接SHIFT + F10运行一下，然后再“稍等片刻”，图像就生成成功了 ！</p><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p>以下就是我们代码的部分运行结果（图太多不完整放了）<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603182119503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="运行结果"></p><h2 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603182538952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="任务二"></p><h3 id="期望方差数学公式推导"><a href="#期望方差数学公式推导" class="headerlink" title="期望方差数学公式推导"></a>期望方差数学公式推导</h3><p>说到这里我就要吐嘈一下这位小姐姐了😭，俺还没学到这里呢。小姐姐至少先把这些推导结果发给我吧，但是博主害羞，不好意思去问（其实博主知道她也不会😅），就自己找了一下概率统计老师，人美心善的概率老师教会了博主怎么推导的公式，并且一眼看出了任务二最终的频率随n的的变化的那个曲线（不愧我科老师🤗）。<br>不继续废话，来点硬核公式推导：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603183748249.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70#pic_center" alt="公式推导"><br>博主字确实有点丑，大家将就着看吧😋。</p><h3 id="关于n"><a href="#关于n" class="headerlink" title="关于n"></a>关于n</h3><p>这里面与任务一不一样的就是我们任务一的五个参数在这里面是是可以自己确定的，这里唯一的变量就是我们每组的随机数的数目，上文已经推导出了我们的期望与方差，这里面就只剩我们的U需要自己来设定计算。任务一的很多代码完全可以重用。</p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><h4 id="输入参数n"><a href="#输入参数n" class="headerlink" title="输入参数n"></a>输入参数n</h4><pre class="line-numbers language-python"><code class="language-python">nn <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>博主觉得一次一次手输n太麻烦了，干脆一次输完，使用我们列表存储需要的n值。</p><h4 id="各项参数"><a href="#各项参数" class="headerlink" title="各项参数"></a>各项参数</h4><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>u1 <span class="token operator">=</span> <span class="token number">5</span>u2 <span class="token operator">=</span> <span class="token number">5</span>sigma1 <span class="token operator">=</span> <span class="token number">3</span>sigma2 <span class="token operator">=</span> <span class="token number">4</span>p <span class="token operator">=</span> <span class="token number">0.5</span>U <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Ez <span class="token operator">=</span> u1 <span class="token operator">+</span> p <span class="token operator">*</span> u2Dz <span class="token operator">=</span> sigma1<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> sigma2<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>u2<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是我们有关于列到的混合高斯分布的有关各项参数。</p><h3 id="生成随机数画图并保存"><a href="#生成随机数画图并保存" class="headerlink" title="生成随机数画图并保存"></a>生成随机数画图并保存</h3><p>实际上这里除了额外加了一个我们的nn数组循环，用来循环运行我们n的值，其他部分和我们的任务一代码部分都一样。<br>代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> n <span class="token keyword">in</span> nn<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pict <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>u1<span class="token punctuation">,</span> sigma1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>u2<span class="token punctuation">,</span> sigma2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                             np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>bernoulli<span class="token punctuation">(</span>p<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">*</span> Dz<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>pict<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> n <span class="token operator">*</span> Ez<span class="token punctuation">)</span>        U <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>U<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax0<span class="token punctuation">,</span> ax1<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二个参数是柱子宽一些还是窄一些，越大越窄越密</span>    ax0<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>U<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'yellowgreen'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># # pdf概率分布图，n个数落在某个区间内的数有多少个</span>    ax0<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Frequency distribution graph for n={}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    ax1<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>U<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'pink'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">,</span> cumulative<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rwidth<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># cdf累计概率函数，cumulative累计。比如需要统计小于5的数的概率</span>    ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Cumulative probability function n={}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>subplots_adjust<span class="token punctuation">(</span>hspace<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>r<span class="token string">"E:\result\homework2 u1 = 5 u2 = 5 sigma1 = 3 sigma2 = 4 p = 0.5\test n={}.png"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># plt.show()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>最终运行结果为：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210603203747134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xSWTg5NzU3,size_16,color_FFFFFF,t_70" alt="任务二运行结果"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>写这么长的博客累死了QAQ，代码也写有一段时间了，有许多当初的细节都有些遗忘了，写博客过程本身也收获了许多，把之前学到的知识认真整理一下，把学习过程记录下来放到网上和大家分享本身也是一件很有成就感的事情。<br>希望这也能让各位也有所收获，博主码字不易，也欢迎大家一键三连哦😘。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
            <tag> numpy </tag>
            
            <tag> math </tag>
            
            <tag> 概率论与数理统计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
